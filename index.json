{
  "api/index.html": {
    "href": "api/index.html",
    "title": "BSIPA API Documentation",
    "keywords": "BSIPA API Documentation Welcome to the full class documentation! To see guides, head over to the Articles tab . Select a namespace and a class on the left to get started."
  },
  "api/IPA.AntiMalware.AntiMalwareEngine.html": {
    "href": "api/IPA.AntiMalware.AntiMalwareEngine.html",
    "title": "Class AntiMalwareEngine",
    "keywords": "Class AntiMalwareEngine Provides a way to access BSIPA's Anti-Malware engine. Inheritance Object AntiMalwareEngine Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.AntiMalware Assembly : IPA.Loader.dll Syntax public static class AntiMalwareEngine Properties | Improve this Doc View Source Engine Gets the current Anti-Malware engine. Declaration public static IAntiMalware Engine { get; } Property Value Type Description IAntiMalware"
  },
  "api/IPA.AntiMalware.html": {
    "href": "api/IPA.AntiMalware.html",
    "title": "",
    "keywords": "Classes AntiMalwareEngine Provides a way to access BSIPA's Anti-Malware engine. Interfaces IAntiMalware An Anti-Malware engine that can be used to scan and detect potentially harmful files. Enums ScanResult The result of an Anti-Malware scan."
  },
  "api/IPA.AntiMalware.IAntiMalware.html": {
    "href": "api/IPA.AntiMalware.IAntiMalware.html",
    "title": "Interface IAntiMalware",
    "keywords": "Interface IAntiMalware An Anti-Malware engine that can be used to scan and detect potentially harmful files. Namespace : IPA.AntiMalware Assembly : IPA.Loader.dll Syntax public interface IAntiMalware Methods | Improve this Doc View Source ScanData(Byte[], String) Scans a particular in-memory blob for malware. Declaration ScanResult ScanData(byte[] data, string contentName = null) Parameters Type Name Description Byte [] data The binary blob to scan. String contentName The name of the content. If this is left null , one will be automatically generated. Returns Type Description ScanResult A ScanResult indicating whether the file is safe or not. | Improve this Doc View Source ScanFile(FileInfo) Scans a particular file for malware. Declaration ScanResult ScanFile(FileInfo file) Parameters Type Name Description FileInfo file The file to scan. Returns Type Description ScanResult A ScanResult indicating whether the file is safe or not. Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.AntiMalware.ScanResult.html": {
    "href": "api/IPA.AntiMalware.ScanResult.html",
    "title": "Enum ScanResult",
    "keywords": "Enum ScanResult The result of an Anti-Malware scan. Namespace : IPA.AntiMalware Assembly : IPA.Loader.dll Syntax public enum ScanResult Fields Name Description Detected Malware was detected, and the content should not be executed. KnownSafe The object is known to be safe. MaybeMalware The malware engine returned a threat level less than the max, so this object may be dangerous. Proceed with caution. NotDetected No malware was detected, but it is not known to be safe. Extension Methods ReflectionUtil.SetField<ScanResult, U>(String, U) ReflectionUtil.GetField<U, ScanResult>(String) ReflectionUtil.SetProperty<ScanResult, U>(String, U) ReflectionUtil.GetProperty<U, ScanResult>(String) ReflectionUtil.InvokeMethod<U, ScanResult>(String, Object[])"
  },
  "api/IPA.Config.Config.html": {
    "href": "api/IPA.Config.Config.html",
    "title": "Class Config",
    "keywords": "Class Config An abstraction of a config file on disk, which handles synchronizing between a memory representation and the disk representation. Inheritance Object Config Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config Assembly : IPA.Loader.dll Syntax public class Config Properties | Improve this Doc View Source Name Gets the name associated with this Config object. Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source Provider Gets the IConfigProvider associated with this Config object. Declaration public IConfigProvider Provider { get; } Property Value Type Description IConfigProvider Methods | Improve this Doc View Source GetConfigFor(String, String[]) Gets a Config object using the specified list of preferred config types. Declaration public static Config GetConfigFor(string configName, params string[] extensions) Parameters Type Name Description String configName the name of the mod for this config String [] extensions the preferred config types to try to get Returns Type Description Config a Config using the requested format, or of type JSON. | Improve this Doc View Source LoadAsync() Forces an asynchronous load from disk. Declaration public Task LoadAsync() Returns Type Description Task | Improve this Doc View Source LoadSync() Forces a synchronous load from disk. Declaration public void LoadSync() | Improve this Doc View Source Register(Type) Registers a IConfigProvider to use for configs. Declaration public static void Register(Type type) Parameters Type Name Description Type type the type to register | Improve this Doc View Source Register<T>() Registers a IConfigProvider to use for configs. Declaration public static void Register<T>() where T : IConfigProvider, new() Type Parameters Name Description T the type to register | Improve this Doc View Source SetStore(IConfigStore) Sets this object's IConfigStore . Can only be called once. Declaration public void SetStore(IConfigStore store) Parameters Type Name Description IConfigStore store the IConfigStore to add to this instance Exceptions Type Condition InvalidOperationException If this was called before. Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[]) GeneratedStore.Generated<T>(Config, Boolean)"
  },
  "api/IPA.Config.Config.NameAttribute.html": {
    "href": "api/IPA.Config.Config.NameAttribute.html",
    "title": "Class Config.NameAttribute",
    "keywords": "Class Config.NameAttribute Specifies a preferred config name, instead of using the plugin's name. Inheritance Object Attribute Config.NameAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config Assembly : IPA.Loader.dll Syntax [AttributeUsage(AttributeTargets.Parameter)] public sealed class NameAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source NameAttribute(String) Constructs the attribute with a specific name. Declaration public NameAttribute(string name) Parameters Type Name Description String name the name to use for the config. Properties | Improve this Doc View Source Name The name to use for the config. Declaration public string Name { get; } Property Value Type Description String the name to use for the config Implements System.Runtime.InteropServices._Attribute Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Config.Config.PreferAttribute.html": {
    "href": "api/IPA.Config.Config.PreferAttribute.html",
    "title": "Class Config.PreferAttribute",
    "keywords": "Class Config.PreferAttribute Specifies that a particular parameter is preferred to use a particular IConfigProvider . If it is not available, also specifies backups. If none are available, the default is used. Inheritance Object Attribute Config.PreferAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config Assembly : IPA.Loader.dll Syntax [AttributeUsage(AttributeTargets.Parameter)] public sealed class PreferAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source PreferAttribute(String[]) Constructs the attribute with a specific preference list. Each entry is the extension without a '.' Declaration public PreferAttribute(params string[] preference) Parameters Type Name Description String [] preference The preferences in order of preference. Properties | Improve this Doc View Source PreferenceOrder The order of preference for the config type. Declaration public string[] PreferenceOrder { get; } Property Value Type Description String [] the list of config extensions in order of preference Implements System.Runtime.InteropServices._Attribute Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Config.ConfigProvider.html": {
    "href": "api/IPA.Config.ConfigProvider.html",
    "title": "Class ConfigProvider",
    "keywords": "Class ConfigProvider A wrapper for an IConfigProvider and the FileInfo to use with it. Inheritance Object ConfigProvider Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config Assembly : IPA.Loader.dll Syntax public class ConfigProvider Methods | Improve this Doc View Source Load() Loads a Value from disk in whatever format this provider provides and returns it. Declaration public Value Load() Returns Type Description Value the Value loaded | Improve this Doc View Source Store(Value) Stores the Value given to disk in the format specified. Declaration public void Store(Value value) Parameters Type Name Description Value value the Value to store Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Config.Data.Boolean.html": {
    "href": "api/IPA.Config.Data.Boolean.html",
    "title": "Class Boolean",
    "keywords": "Class Boolean A Value representing a boolean value. Inheritance Object Value Boolean Inherited Members Value.Null() Value.List() Value.Map() Value.From(String) Value.Text(String) Value.From(Int64) Value.Integer(Int64) Value.From(Decimal) Value.Float(Decimal) Value.From(Boolean) Value.Bool(Boolean) Value.From(IEnumerable<Value>) Value.From(IDictionary<String, Value>) Value.From(IEnumerable<KeyValuePair<String, Value>>) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Data Assembly : IPA.Loader.dll Syntax public sealed class Boolean : Value Constructors | Improve this Doc View Source Boolean() Constructs an empty Boolean object. Declaration [Obsolete(\"Use the long constructor.\")] public Boolean() | Improve this Doc View Source Boolean(Boolean) Constructs a Boolean object containing the provided value. Declaration public Boolean(bool value) Parameters Type Name Description Boolean value The value to construct with. Properties | Improve this Doc View Source Value The actual value fo this Boolean object. Declaration public bool Value { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source ToString() Converts this Value into a human-readable format. Declaration public override string ToString() Returns Type Description String the result of Value.ToString().ToLower() Overrides Value.ToString() Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Config.Data.FloatingPoint.html": {
    "href": "api/IPA.Config.Data.FloatingPoint.html",
    "title": "Class FloatingPoint",
    "keywords": "Class FloatingPoint A Value representing a floating point value. This may hold a Decimal 's worth of data. Inheritance Object Value FloatingPoint Inherited Members Value.Null() Value.List() Value.Map() Value.From(String) Value.Text(String) Value.From(Int64) Value.Integer(Int64) Value.From(Decimal) Value.Float(Decimal) Value.From(Boolean) Value.Bool(Boolean) Value.From(IEnumerable<Value>) Value.From(IDictionary<String, Value>) Value.From(IEnumerable<KeyValuePair<String, Value>>) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Data Assembly : IPA.Loader.dll Syntax public sealed class FloatingPoint : Value Constructors | Improve this Doc View Source FloatingPoint() Constructs an empty FloatingPoint object. Declaration [Obsolete(\"Use the long constructor.\")] public FloatingPoint() | Improve this Doc View Source FloatingPoint(Decimal) Constructs a FloatingPoint object containing the provided value. Declaration public FloatingPoint(decimal value) Parameters Type Name Description Decimal value The value to construct with. Properties | Improve this Doc View Source Value The actual value fo this FloatingPoint object. Declaration public decimal Value { get; set; } Property Value Type Description Decimal Methods | Improve this Doc View Source AsInteger() Coerces this FloatingPoint into an Integer . Declaration public Integer AsInteger() Returns Type Description Integer a Integer representing the closest approximation of Value | Improve this Doc View Source ToString() Converts this Value into a human-readable format. Declaration public override string ToString() Returns Type Description String the result of Value.ToString() Overrides Value.ToString() Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Config.Data.html": {
    "href": "api/IPA.Config.Data.html",
    "title": "",
    "keywords": "Classes Boolean A Value representing a boolean value. FloatingPoint A Value representing a floating point value. This may hold a Decimal 's worth of data. Integer A Value representing an integer. This may hold a Int64 's worth of data. List A list of Value s for serialization by an IConfigProvider . Use List() or From(IEnumerable<Value>) to create. Map A ordered map of String to Value for serialization by an IConfigProvider . Use Map() or From(IDictionary<String, Value>) to create. Text A Value representing a piece of text. The only reason this is not named String is so that it doesn't conflict with String . Value A base value type for config data abstract representations, to be serialized with an IConfigProvider . If a Value is null , then that represents just that: a null in whatever serialization is being used. Also contains factory functions for all derived types."
  },
  "api/IPA.Config.Data.Integer.html": {
    "href": "api/IPA.Config.Data.Integer.html",
    "title": "Class Integer",
    "keywords": "Class Integer A Value representing an integer. This may hold a Int64 's worth of data. Inheritance Object Value Integer Inherited Members Value.Null() Value.List() Value.Map() Value.From(String) Value.Text(String) Value.From(Int64) Value.Integer(Int64) Value.From(Decimal) Value.Float(Decimal) Value.From(Boolean) Value.Bool(Boolean) Value.From(IEnumerable<Value>) Value.From(IDictionary<String, Value>) Value.From(IEnumerable<KeyValuePair<String, Value>>) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Data Assembly : IPA.Loader.dll Syntax public sealed class Integer : Value Constructors | Improve this Doc View Source Integer() Constructs an empty Integer object. Declaration [Obsolete(\"Use the long constructor.\")] public Integer() | Improve this Doc View Source Integer(Int64) Constructs a Integer object containing the provided value. Declaration public Integer(long value) Parameters Type Name Description Int64 value The value to construct with. Properties | Improve this Doc View Source Value The actual value of the Integer object. Declaration public long Value { get; set; } Property Value Type Description Int64 Methods | Improve this Doc View Source AsFloat() Coerces this Integer into a FloatingPoint . Declaration public FloatingPoint AsFloat() Returns Type Description FloatingPoint a FloatingPoint representing the closest approximation of Value | Improve this Doc View Source ToString() Converts this Value into a human-readable format. Declaration public override string ToString() Returns Type Description String the result of Value.ToString() Overrides Value.ToString() Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Config.Data.List.html": {
    "href": "api/IPA.Config.Data.List.html",
    "title": "Class List",
    "keywords": "Class List A list of Value s for serialization by an IConfigProvider . Use List() or From(IEnumerable<Value>) to create. Inheritance Object Value List Implements IList < Value > ICollection < Value > IEnumerable < Value > IEnumerable Inherited Members Value.Null() Value.List() Value.Map() Value.From(String) Value.Text(String) Value.From(Int64) Value.Integer(Int64) Value.From(Decimal) Value.Float(Decimal) Value.From(Boolean) Value.Bool(Boolean) Value.From(IEnumerable<Value>) Value.From(IDictionary<String, Value>) Value.From(IEnumerable<KeyValuePair<String, Value>>) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Data Assembly : IPA.Loader.dll Syntax public sealed class List : Value, IList<Value>, ICollection<Value>, IEnumerable<Value>, IEnumerable Properties | Improve this Doc View Source Count Gets the number of elements in the List . Declaration public int Count { get; } Property Value Type Description Int32 See Also Count | Improve this Doc View Source Item[Int32] Gets the value at the given index in this List . Declaration public Value this[int index] { get; set; } Parameters Type Name Description Int32 index the index to retrieve the Value at Property Value Type Description Value the Value at index See Also Item [ Int32 ] Methods | Improve this Doc View Source Add(Value) Adds a Value to the end of this List . Declaration public void Add(Value item) Parameters Type Name Description Value item the Value to add See Also Add (T) | Improve this Doc View Source AddRange(IEnumerable<Value>) Adds a range of Value s to the end of this List . Declaration public void AddRange(IEnumerable<Value> vals) Parameters Type Name Description IEnumerable < Value > vals the range of Value s to add | Improve this Doc View Source Clear() Clears the List . Declaration public void Clear() See Also Clear () | Improve this Doc View Source Contains(Value) Checks if the List contains a certian item. Declaration public bool Contains(Value item) Parameters Type Name Description Value item the Value to check for Returns Type Description Boolean true if the item was founc, otherwise false See Also Contains (T) | Improve this Doc View Source CopyTo(Value[], Int32) Copies the Value s in the List to the Array in array . Declaration public void CopyTo(Value[] array, int arrayIndex) Parameters Type Name Description Value [] array the Array to copy to Int32 arrayIndex the starting index to copy to See Also CopyTo (T[], Int32 ) | Improve this Doc View Source GetEnumerator() Gets an enumerator to enumerate the List . Declaration public IEnumerator<Value> GetEnumerator() Returns Type Description IEnumerator < Value > an IEnumerator<T> for this List See Also GetEnumerator () | Improve this Doc View Source IndexOf(Value) Gets the index that a given Value is in the List . Declaration public int IndexOf(Value item) Parameters Type Name Description Value item the Value to search for Returns Type Description Int32 the index that the item was at, or -1. See Also IndexOf (T) | Improve this Doc View Source Insert(Int32, Value) Inserts a Value at an index. Declaration public void Insert(int index, Value item) Parameters Type Name Description Int32 index the index to insert at Value item the Value to insert See Also Insert ( Int32 , T) | Improve this Doc View Source Remove(Value) Removes a Value from the List . Declaration public bool Remove(Value item) Parameters Type Name Description Value item the Value to remove Returns Type Description Boolean true if the item was removed, false otherwise See Also Remove (T) | Improve this Doc View Source RemoveAt(Int32) Removes a Value at an index. Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index the index to remove a Value at See Also RemoveAt ( Int32 ) | Improve this Doc View Source ToString() Converts this Value into a human-readable format. Declaration public override string ToString() Returns Type Description String a comma-seperated list of the result of ToString() wrapped in square brackets Overrides Value.ToString() Explicit Interface Implementations | Improve this Doc View Source ICollection<Value>.IsReadOnly Declaration bool ICollection<Value>.IsReadOnly { get; } Returns Type Description Boolean | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods EnumerableExtensions.NonNull<T>(IEnumerable<T>) EnumerableExtensions.NonNull<T, U>(IEnumerable<T>, Func<T, U>) EnumerableExtensions.NonNull<T, U>(IEnumerable<T>, Func<T, Nullable<U>>) ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Config.Data.Map.html": {
    "href": "api/IPA.Config.Data.Map.html",
    "title": "Class Map",
    "keywords": "Class Map A ordered map of String to Value for serialization by an IConfigProvider . Use Map() or From(IDictionary<String, Value>) to create. Inheritance Object Value Map Implements IDictionary < String , Value > ICollection < KeyValuePair < String , Value >> IEnumerable < KeyValuePair < String , Value >> IEnumerable Inherited Members Value.Null() Value.List() Value.Map() Value.From(String) Value.Text(String) Value.From(Int64) Value.Integer(Int64) Value.From(Decimal) Value.Float(Decimal) Value.From(Boolean) Value.Bool(Boolean) Value.From(IEnumerable<Value>) Value.From(IDictionary<String, Value>) Value.From(IEnumerable<KeyValuePair<String, Value>>) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Data Assembly : IPA.Loader.dll Syntax public sealed class Map : Value, IDictionary<string, Value>, ICollection<KeyValuePair<string, Value>>, IEnumerable<KeyValuePair<string, Value>>, IEnumerable Properties | Improve this Doc View Source Count Gets the number of key-value pairs in this Map . Declaration public int Count { get; } Property Value Type Description Int32 See Also Count | Improve this Doc View Source Item[String] Accesses the Value at key in the map. Declaration public Value this[string key] { get; set; } Parameters Type Name Description String key the key to get the value associated with Property Value Type Description Value the value associated with the key See Also Item [TKey] | Improve this Doc View Source Keys Gets a collection of the keys for the Map . Declaration public ICollection<string> Keys { get; } Property Value Type Description ICollection < String > See Also Keys | Improve this Doc View Source Values Gets a collection of the values in the Map . Declaration public ICollection<Value> Values { get; } Property Value Type Description ICollection < Value > Remarks Unlike all other iterables given by Map , this does not guarantee that order is maintained. See Also Values Methods | Improve this Doc View Source Add(String, Value) Adds a new Value with a given key. Declaration public void Add(string key, Value value) Parameters Type Name Description String key the key to put the value at Value value the Value to add See Also Add (TKey, TValue) | Improve this Doc View Source Clear() Clears the Map of its key-value pairs. Declaration public void Clear() See Also Clear () | Improve this Doc View Source ContainsKey(String) Checks if the Map contains a given key . Declaration public bool ContainsKey(string key) Parameters Type Name Description String key the key to check for Returns Type Description Boolean true if the key exists, otherwise false See Also ContainsKey (TKey) | Improve this Doc View Source GetEnumerator() Enumerates the Map 's key-value pairs. Declaration public IEnumerator<KeyValuePair<string, Value>> GetEnumerator() Returns Type Description IEnumerator < KeyValuePair < String , Value >> an IEnumerator<T> of key-value pairs in this Map See Also GetEnumerator () | Improve this Doc View Source Remove(String) Removes the object associated with a key in this Map . Declaration public bool Remove(string key) Parameters Type Name Description String key the key to remove Returns Type Description Boolean true if the key existed, false otherwise See Also Remove (TKey) | Improve this Doc View Source ToString() Converts this Value into a human-readable format. Declaration public override string ToString() Returns Type Description String a JSON-like set of key-value pairs Overrides Value.ToString() | Improve this Doc View Source TryGetValue(String, out Value) Gets the value associated with the specified key. Declaration public bool TryGetValue(string key, out Value value) Parameters Type Name Description String key the key of the value to get Value value the target location of the retrieved object Returns Type Description Boolean true if the key was found and value set, false otherwise See Also TryGetValue (TKey, TValue) Explicit Interface Implementations | Improve this Doc View Source ICollection<KeyValuePair<String, Value>>.Add(KeyValuePair<String, Value>) Declaration void ICollection<KeyValuePair<string, Value>>.Add(KeyValuePair<string, Value> item) Parameters Type Name Description KeyValuePair < String , Value > item | Improve this Doc View Source ICollection<KeyValuePair<String, Value>>.Contains(KeyValuePair<String, Value>) Declaration bool ICollection<KeyValuePair<string, Value>>.Contains(KeyValuePair<string, Value> item) Parameters Type Name Description KeyValuePair < String , Value > item Returns Type Description Boolean | Improve this Doc View Source ICollection<KeyValuePair<String, Value>>.CopyTo(KeyValuePair<String, Value>[], Int32) Declaration void ICollection<KeyValuePair<string, Value>>.CopyTo(KeyValuePair<string, Value>[] array, int arrayIndex) Parameters Type Name Description KeyValuePair < String , Value >[] array Int32 arrayIndex | Improve this Doc View Source ICollection<KeyValuePair<String, Value>>.IsReadOnly Declaration bool ICollection<KeyValuePair<string, Value>>.IsReadOnly { get; } Returns Type Description Boolean | Improve this Doc View Source ICollection<KeyValuePair<String, Value>>.Remove(KeyValuePair<String, Value>) Declaration bool ICollection<KeyValuePair<string, Value>>.Remove(KeyValuePair<string, Value> item) Parameters Type Name Description KeyValuePair < String , Value > item Returns Type Description Boolean | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IDictionary<TKey,TValue> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods EnumerableExtensions.NonNull<T, U>(IEnumerable<T>, Func<T, U>) EnumerableExtensions.NonNull<T, U>(IEnumerable<T>, Func<T, Nullable<U>>) ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Config.Data.Text.html": {
    "href": "api/IPA.Config.Data.Text.html",
    "title": "Class Text",
    "keywords": "Class Text A Value representing a piece of text. The only reason this is not named String is so that it doesn't conflict with String . Inheritance Object Value Text Inherited Members Value.Null() Value.List() Value.Map() Value.From(String) Value.Text(String) Value.From(Int64) Value.Integer(Int64) Value.From(Decimal) Value.Float(Decimal) Value.From(Boolean) Value.Bool(Boolean) Value.From(IEnumerable<Value>) Value.From(IDictionary<String, Value>) Value.From(IEnumerable<KeyValuePair<String, Value>>) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Data Assembly : IPA.Loader.dll Syntax public sealed class Text : Value Constructors | Improve this Doc View Source Text() Constructs an empty Text object. Declaration [Obsolete(\"Use the String constructor.\")] public Text() | Improve this Doc View Source Text(String) Constructs a Text object containing the provided value. Declaration public Text(string value) Parameters Type Name Description String value The value to construct with. Properties | Improve this Doc View Source Value The actual value of this Text object. Declaration public string Value { get; set; } Property Value Type Description String Methods | Improve this Doc View Source ToString() Converts this Value into a human-readable format. Declaration public override string ToString() Returns Type Description String a quoted, unescaped string form of Value Overrides Value.ToString() Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Config.Data.Value.html": {
    "href": "api/IPA.Config.Data.Value.html",
    "title": "Class Value",
    "keywords": "Class Value A base value type for config data abstract representations, to be serialized with an IConfigProvider . If a Value is null , then that represents just that: a null in whatever serialization is being used. Also contains factory functions for all derived types. Inheritance Object Value Boolean FloatingPoint Integer List Map Text Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Data Assembly : IPA.Loader.dll Syntax public abstract class Value Methods | Improve this Doc View Source Bool(Boolean) Creates a new Boolean wrapping a Boolean . Declaration public static Boolean Bool(bool val) Parameters Type Name Description Boolean val the value to wrap Returns Type Description Boolean a Boolean wrapping val See Also From(Boolean) | Improve this Doc View Source Float(Decimal) Creates a new FloatingPoint wrapping a Decimal . Declaration public static FloatingPoint Float(decimal val) Parameters Type Name Description Decimal val the value to wrap Returns Type Description FloatingPoint a FloatingPoint wrapping val See Also From(Decimal) | Improve this Doc View Source From(Boolean) Creates a new Value wrapping a Boolean . Declaration public static Boolean From(bool val) Parameters Type Name Description Boolean val the value to wrap Returns Type Description Boolean a Boolean wrapping val See Also Bool(Boolean) | Improve this Doc View Source From(IDictionary<String, Value>) Creates a new Map holding the content of an IDictionary<TKey,TValue> of String to Value . Declaration public static Map From(IDictionary<string, Value> vals) Parameters Type Name Description IDictionary < String , Value > vals the dictionary of Value s to initialize the Map wtih Returns Type Description Map a Map containing the content of vals See Also Map() From(IEnumerable<KeyValuePair<String, Value>>) | Improve this Doc View Source From(IEnumerable<Value>) Creates a new List holding the content of an IEnumerable<T> of Value . Declaration public static List From(IEnumerable<Value> vals) Parameters Type Name Description IEnumerable < Value > vals the Value s to initialize the List with Returns Type Description List a List containing the content of vals See Also List() | Improve this Doc View Source From(IEnumerable<KeyValuePair<String, Value>>) Creates a new Map holding the content of an IEnumerable<T> of KeyValuePair<TKey,TValue> of String to Value . Declaration public static Map From(IEnumerable<KeyValuePair<string, Value>> vals) Parameters Type Name Description IEnumerable < KeyValuePair < String , Value >> vals the enumerable of KeyValuePair<TKey,TValue> of name to Value Returns Type Description Map a Map containing the content of vals See Also Map() From(IDictionary<String, Value>) | Improve this Doc View Source From(Decimal) Creates a new Value wrapping a Double . Declaration public static FloatingPoint From(decimal val) Parameters Type Name Description Decimal val the value to wrap Returns Type Description FloatingPoint a FloatingPoint wrapping val See Also Float(Decimal) | Improve this Doc View Source From(Int64) Creates a new Value wrapping a Int64 . Declaration public static Integer From(long val) Parameters Type Name Description Int64 val the value to wrap Returns Type Description Integer a Integer wrapping val See Also Integer(Int64) | Improve this Doc View Source From(String) Creates a new Value representing a String . Declaration public static Text From(string val) Parameters Type Name Description String val the value to wrap Returns Type Description Text a Text wrapping val See Also Text(String) | Improve this Doc View Source Integer(Int64) Creates a new Integer wrapping a Int64 . Declaration public static Integer Integer(long val) Parameters Type Name Description Int64 val the value to wrap Returns Type Description Integer a Integer wrapping val See Also From(Int64) | Improve this Doc View Source List() Creates an empty List() . Declaration public static List List() Returns Type Description List an empty List() See Also From(IEnumerable<Value>) | Improve this Doc View Source Map() Creates an empty Map() . Declaration public static Map Map() Returns Type Description Map an empty Map() See Also From(IDictionary<String, Value>) From(IEnumerable<KeyValuePair<String, Value>>) | Improve this Doc View Source Null() Creates a Null Value . Declaration public static Value Null() Returns Type Description Value null | Improve this Doc View Source Text(String) Creates a new Text object wrapping a String . Declaration public static Text Text(string val) Parameters Type Name Description String val the value to wrap Returns Type Description Text a Text wrapping val See Also From(String) | Improve this Doc View Source ToString() Converts this Value into a human-readable format. Declaration public abstract override string ToString() Returns Type Description String a human-readable string containing the value provided Overrides Object.ToString() Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Config.html": {
    "href": "api/IPA.Config.html",
    "title": "",
    "keywords": "Classes Config An abstraction of a config file on disk, which handles synchronizing between a memory representation and the disk representation. Config.NameAttribute Specifies a preferred config name, instead of using the plugin's name. Config.PreferAttribute Specifies that a particular parameter is preferred to use a particular IConfigProvider . If it is not available, also specifies backups. If none are available, the default is used. ConfigProvider A wrapper for an IConfigProvider and the FileInfo to use with it. ModPrefs Allows to get and set preferences for your mod. Interfaces IConfigProvider An interface for configuration providers. IConfigStore A storage for a config structure. IModPrefs Allows to get and set preferences for your mod."
  },
  "api/IPA.Config.IConfigProvider.html": {
    "href": "api/IPA.Config.IConfigProvider.html",
    "title": "Interface IConfigProvider",
    "keywords": "Interface IConfigProvider An interface for configuration providers. Namespace : IPA.Config Assembly : IPA.Loader.dll Syntax public interface IConfigProvider Remarks Implementers must provide a default constructor. Do not assume that File will ever be set for a given object. Implementers are expected to preserve the typing of values passed to Store(Value, FileInfo) when returned from Load(FileInfo) . The only exceptions to this are the numeric types, Integer and FloatingPoint , since they can be coerced to each other with AsFloat() and AsInteger() respectively. The provider should however store and recover Integer with as much precision as is possible. For example, a JSON provider may decide to decode all numbers that have an integral value, even if they were originally FloatingPoint , as Integer . This is reasonable, as Integer is more precise, particularly with larger values, than FloatingPoint . Properties | Improve this Doc View Source Extension Gets the extension without a dot to use for files handled by this provider. Declaration string Extension { get; } Property Value Type Description String Remarks This must work immediately, and is used to generate the FileInfo used to set File . Methods | Improve this Doc View Source Load(FileInfo) Loads a Value from disk in whatever format this provider provides and returns it. Declaration Value Load(FileInfo file) Parameters Type Name Description FileInfo file the file to read from Returns Type Description Value the Value loaded | Improve this Doc View Source Store(Value, FileInfo) Stores the Value given to disk in the format specified. Declaration void Store(Value value, FileInfo file) Parameters Type Name Description Value value the Value to store FileInfo file the file to write to Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Config.IConfigStore.html": {
    "href": "api/IPA.Config.IConfigStore.html",
    "title": "Interface IConfigStore",
    "keywords": "Interface IConfigStore A storage for a config structure. Namespace : IPA.Config Assembly : IPA.Loader.dll Syntax public interface IConfigStore Properties | Improve this Doc View Source SyncObject A synchronization object for the save thread to wait on for changes. It should be signaled whenever the internal state of the object is changed. The writer will never signal this handle. Declaration WaitHandle SyncObject { get; } Property Value Type Description WaitHandle | Improve this Doc View Source WriteSyncObject A synchronization object for the load thread and accessors to maintain safe synchronization. Any readers should take a read lock with EnterReadLock() or EnterUpgradeableReadLock() , and any writers should take a write lock with EnterWriteLock() . Declaration ReaderWriterLockSlim WriteSyncObject { get; } Property Value Type Description ReaderWriterLockSlim Remarks Read and write are read and write to this object , not to the file on disk. Methods | Improve this Doc View Source ReadFrom(ConfigProvider) Reads the config structure from the given IConfigProvider into the current IConfigStore . Declaration void ReadFrom(ConfigProvider provider) Parameters Type Name Description ConfigProvider provider the provider to read from Remarks The calling code will have entered a write lock on WriteSyncObject when this is called. | Improve this Doc View Source WriteTo(ConfigProvider) Writes the config structure stored by the current IConfigStore to the given IConfigProvider . Declaration void WriteTo(ConfigProvider provider) Parameters Type Name Description ConfigProvider provider the provider to write to Remarks The calling code will have entered a read lock on WriteSyncObject when this is called. Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Config.IModPrefs.html": {
    "href": "api/IPA.Config.IModPrefs.html",
    "title": "Interface IModPrefs",
    "keywords": "Interface IModPrefs Allows to get and set preferences for your mod. Namespace : IPA.Config Assembly : IPA.Loader.dll Syntax [Obsolete(\"Uses IniFile, which uses 16 bit system calls. Use the new object based config system.\")] public interface IModPrefs Methods | Improve this Doc View Source GetBool(String, String, Boolean, Boolean) Gets a bool from the ini. Declaration bool GetBool(string section, string name, bool defaultValue = false, bool autoSave = false) Parameters Type Name Description String section Section of the key. String name Name of the key. Boolean defaultValue Value that should be used when no value is found. Boolean autoSave Whether or not the default value should be written if no value is found. Returns Type Description Boolean | Improve this Doc View Source GetFloat(String, String, Single, Boolean) Gets a float from the ini. Declaration float GetFloat(string section, string name, float defaultValue = 0F, bool autoSave = false) Parameters Type Name Description String section Section of the key. String name Name of the key. Single defaultValue Value that should be used when no value is found. Boolean autoSave Whether or not the default value should be written if no value is found. Returns Type Description Single | Improve this Doc View Source GetInt(String, String, Int32, Boolean) Gets an int from the ini. Declaration int GetInt(string section, string name, int defaultValue = 0, bool autoSave = false) Parameters Type Name Description String section Section of the key. String name Name of the key. Int32 defaultValue Value that should be used when no value is found. Boolean autoSave Whether or not the default value should be written if no value is found. Returns Type Description Int32 | Improve this Doc View Source GetString(String, String, String, Boolean) Gets a string from the ini. Declaration string GetString(string section, string name, string defaultValue = \"\", bool autoSave = false) Parameters Type Name Description String section Section of the key. String name Name of the key. String defaultValue Value that should be used when no value is found. Boolean autoSave Whether or not the default value should be written if no value is found. Returns Type Description String | Improve this Doc View Source HasKey(String, String) Checks whether or not a key exists in the ini. Declaration bool HasKey(string section, string name) Parameters Type Name Description String section Section of the key. String name Name of the key. Returns Type Description Boolean | Improve this Doc View Source SetBool(String, String, Boolean) Sets a bool in the ini. Declaration void SetBool(string section, string name, bool value) Parameters Type Name Description String section Section of the key. String name Name of the key. Boolean value Value that should be written. | Improve this Doc View Source SetFloat(String, String, Single) Sets a float in the ini. Declaration void SetFloat(string section, string name, float value) Parameters Type Name Description String section Section of the key. String name Name of the key. Single value Value that should be written. | Improve this Doc View Source SetInt(String, String, Int32) Sets an int in the ini. Declaration void SetInt(string section, string name, int value) Parameters Type Name Description String section Section of the key. String name Name of the key. Int32 value Value that should be written. | Improve this Doc View Source SetString(String, String, String) Sets a string in the ini. Declaration void SetString(string section, string name, string value) Parameters Type Name Description String section Section of the key. String name Name of the key. String value Value that should be written. Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Config.ModPrefs.html": {
    "href": "api/IPA.Config.ModPrefs.html",
    "title": "Class ModPrefs",
    "keywords": "Class ModPrefs Allows to get and set preferences for your mod. Inheritance Object ModPrefs Implements IModPrefs Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config Assembly : IPA.Loader.dll Syntax [Obsolete(\"Uses IniFile, which uses 16 bit system calls. Use BS Utils INI system for now.\")] public class ModPrefs : IModPrefs Constructors | Improve this Doc View Source ModPrefs(PluginMetadata) Constructs a ModPrefs object for the provide plugin. Declaration public ModPrefs(PluginMetadata plugin) Parameters Type Name Description PluginMetadata plugin the plugin to get the preferences file for Methods | Improve this Doc View Source GetBool(String, String, Boolean, Boolean) Gets a bool from the ini. Declaration public static bool GetBool(string section, string name, bool defaultValue = false, bool autoSave = false) Parameters Type Name Description String section Section of the key. String name Name of the key. Boolean defaultValue Value that should be used when no value is found. Boolean autoSave Whether or not the default value should be written if no value is found. Returns Type Description Boolean | Improve this Doc View Source GetFloat(String, String, Single, Boolean) Gets a float from the ini. Declaration public static float GetFloat(string section, string name, float defaultValue = 0F, bool autoSave = false) Parameters Type Name Description String section Section of the key. String name Name of the key. Single defaultValue Value that should be used when no value is found. Boolean autoSave Whether or not the default value should be written if no value is found. Returns Type Description Single | Improve this Doc View Source GetInt(String, String, Int32, Boolean) Gets an int from the ini. Declaration public static int GetInt(string section, string name, int defaultValue = 0, bool autoSave = false) Parameters Type Name Description String section Section of the key. String name Name of the key. Int32 defaultValue Value that should be used when no value is found. Boolean autoSave Whether or not the default value should be written if no value is found. Returns Type Description Int32 | Improve this Doc View Source GetString(String, String, String, Boolean) Gets a string from the ini. Declaration public static string GetString(string section, string name, string defaultValue = \"\", bool autoSave = false) Parameters Type Name Description String section Section of the key. String name Name of the key. String defaultValue Value that should be used when no value is found. Boolean autoSave Whether or not the default value should be written if no value is found. Returns Type Description String | Improve this Doc View Source HasKey(String, String) Checks whether or not a key exists in the ini. Declaration public static bool HasKey(string section, string name) Parameters Type Name Description String section Section of the key. String name Name of the key. Returns Type Description Boolean | Improve this Doc View Source SetBool(String, String, Boolean) Sets a bool in the ini. Declaration public static void SetBool(string section, string name, bool value) Parameters Type Name Description String section Section of the key. String name Name of the key. Boolean value Value that should be written. | Improve this Doc View Source SetFloat(String, String, Single) Sets a float in the ini. Declaration public static void SetFloat(string section, string name, float value) Parameters Type Name Description String section Section of the key. String name Name of the key. Single value Value that should be written. | Improve this Doc View Source SetInt(String, String, Int32) Sets an int in the ini. Declaration public static void SetInt(string section, string name, int value) Parameters Type Name Description String section Section of the key. String name Name of the key. Int32 value Value that should be written. | Improve this Doc View Source SetString(String, String, String) Sets a string in the ini. Declaration public static void SetString(string section, string name, string value) Parameters Type Name Description String section Section of the key. String name Name of the key. String value Value that should be written. Explicit Interface Implementations | Improve this Doc View Source IModPrefs.GetBool(String, String, Boolean, Boolean) Declaration bool IModPrefs.GetBool(string section, string name, bool defaultValue, bool autoSave) Parameters Type Name Description String section String name Boolean defaultValue Boolean autoSave Returns Type Description Boolean | Improve this Doc View Source IModPrefs.GetFloat(String, String, Single, Boolean) Declaration float IModPrefs.GetFloat(string section, string name, float defaultValue, bool autoSave) Parameters Type Name Description String section String name Single defaultValue Boolean autoSave Returns Type Description Single | Improve this Doc View Source IModPrefs.GetInt(String, String, Int32, Boolean) Declaration int IModPrefs.GetInt(string section, string name, int defaultValue, bool autoSave) Parameters Type Name Description String section String name Int32 defaultValue Boolean autoSave Returns Type Description Int32 | Improve this Doc View Source IModPrefs.GetString(String, String, String, Boolean) Declaration string IModPrefs.GetString(string section, string name, string defaultValue, bool autoSave) Parameters Type Name Description String section String name String defaultValue Boolean autoSave Returns Type Description String | Improve this Doc View Source IModPrefs.HasKey(String, String) Declaration bool IModPrefs.HasKey(string section, string name) Parameters Type Name Description String section String name Returns Type Description Boolean | Improve this Doc View Source IModPrefs.SetBool(String, String, Boolean) Declaration void IModPrefs.SetBool(string section, string name, bool value) Parameters Type Name Description String section String name Boolean value | Improve this Doc View Source IModPrefs.SetFloat(String, String, Single) Declaration void IModPrefs.SetFloat(string section, string name, float value) Parameters Type Name Description String section String name Single value | Improve this Doc View Source IModPrefs.SetInt(String, String, Int32) Declaration void IModPrefs.SetInt(string section, string name, int value) Parameters Type Name Description String section String name Int32 value | Improve this Doc View Source IModPrefs.SetString(String, String, String) Declaration void IModPrefs.SetString(string section, string name, string value) Parameters Type Name Description String section String name String value Implements IModPrefs Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Config.Stores.Attributes.html": {
    "href": "api/IPA.Config.Stores.Attributes.html",
    "title": "",
    "keywords": "Classes IgnoreAttribute Causes a field or property in an object being wrapped by Generated<T>(Config, Boolean) to be ignored during serialization and deserialization. NonNullableAttribute Indicates that a field or property in an object being wrapped by Generated<T>(Config, Boolean) that would otherwise be nullable (i.e. a reference type or a Nullable<T> type) should never be null, and the member will be ignored if the deserialized value is null . NotifyPropertyChangesAttribute Indicates that the generated subclass of the attribute's target should implement INotifyPropertyChanged . If the type this is applied to already inherits it, this is implied. SerializedNameAttribute Specifies a name for the serialized field or property in an object being wrapped by Generated<T>(Config, Boolean) that is different from the member name itself. UseConverterAttribute Indicates that a given field or property in an object being wrapped by Generated<T>(Config, Boolean) should be serialized and deserialized using the provided converter instead of the default mechanism."
  },
  "api/IPA.Config.Stores.Attributes.IgnoreAttribute.html": {
    "href": "api/IPA.Config.Stores.Attributes.IgnoreAttribute.html",
    "title": "Class IgnoreAttribute",
    "keywords": "Class IgnoreAttribute Causes a field or property in an object being wrapped by Generated<T>(Config, Boolean) to be ignored during serialization and deserialization. Inheritance Object Attribute IgnoreAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Stores.Attributes Assembly : IPA.Loader.dll Syntax [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false, Inherited = true)] public sealed class IgnoreAttribute : Attribute, _Attribute Implements System.Runtime.InteropServices._Attribute Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Config.Stores.Attributes.NonNullableAttribute.html": {
    "href": "api/IPA.Config.Stores.Attributes.NonNullableAttribute.html",
    "title": "Class NonNullableAttribute",
    "keywords": "Class NonNullableAttribute Indicates that a field or property in an object being wrapped by Generated<T>(Config, Boolean) that would otherwise be nullable (i.e. a reference type or a Nullable<T> type) should never be null, and the member will be ignored if the deserialized value is null . Inheritance Object Attribute NonNullableAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Stores.Attributes Assembly : IPA.Loader.dll Syntax [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false, Inherited = true)] public sealed class NonNullableAttribute : Attribute, _Attribute Implements System.Runtime.InteropServices._Attribute Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Config.Stores.Attributes.NotifyPropertyChangesAttribute.html": {
    "href": "api/IPA.Config.Stores.Attributes.NotifyPropertyChangesAttribute.html",
    "title": "Class NotifyPropertyChangesAttribute",
    "keywords": "Class NotifyPropertyChangesAttribute Indicates that the generated subclass of the attribute's target should implement INotifyPropertyChanged . If the type this is applied to already inherits it, this is implied. Inheritance Object Attribute NotifyPropertyChangesAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Stores.Attributes Assembly : IPA.Loader.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = true)] public sealed class NotifyPropertyChangesAttribute : Attribute, _Attribute Implements System.Runtime.InteropServices._Attribute Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Config.Stores.Attributes.SerializedNameAttribute.html": {
    "href": "api/IPA.Config.Stores.Attributes.SerializedNameAttribute.html",
    "title": "Class SerializedNameAttribute",
    "keywords": "Class SerializedNameAttribute Specifies a name for the serialized field or property in an object being wrapped by Generated<T>(Config, Boolean) that is different from the member name itself. Inheritance Object Attribute SerializedNameAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Stores.Attributes Assembly : IPA.Loader.dll Syntax [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false, Inherited = true)] public sealed class SerializedNameAttribute : Attribute, _Attribute Examples When serializing the following object, we might get the JSON that follows. public class PluginConfig { public virtual bool BooleanField { get; set; } = true; } { \"BooleanField\": true } However, if we were to add a SerializedNameAttribute to that field, we would get the following. public class PluginConfig { [SerializedName(\"bool\")] public virtual bool BooleanField { get; set; } = true; } { \"bool\": true } Constructors | Improve this Doc View Source SerializedNameAttribute(String) Creates a new SerializedNameAttribute with the given Name . Declaration public SerializedNameAttribute(string name) Parameters Type Name Description String name the value to assign to Name Properties | Improve this Doc View Source Name Gets the name to replace the member name with. Declaration public string Name { get; } Property Value Type Description String Implements System.Runtime.InteropServices._Attribute Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Config.Stores.Attributes.UseConverterAttribute.html": {
    "href": "api/IPA.Config.Stores.Attributes.UseConverterAttribute.html",
    "title": "Class UseConverterAttribute",
    "keywords": "Class UseConverterAttribute Indicates that a given field or property in an object being wrapped by Generated<T>(Config, Boolean) should be serialized and deserialized using the provided converter instead of the default mechanism. Inheritance Object Attribute UseConverterAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Stores.Attributes Assembly : IPA.Loader.dll Syntax [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false, Inherited = true)] public sealed class UseConverterAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source UseConverterAttribute() Creates a new UseConverterAttribute specifying to use the default converter type for the target member. Declaration public UseConverterAttribute() | Improve this Doc View Source UseConverterAttribute(Type) Creates a new UseConverterAttribute with a given ConverterType . Declaration public UseConverterAttribute(Type converterType) Parameters Type Name Description Type converterType the type to assign to ConverterType Properties | Improve this Doc View Source ConverterTargetType Gets the target type of the converter if it is avaliable at instantiation time, otherwise null . Declaration public Type ConverterTargetType { get; } Property Value Type Description Type | Improve this Doc View Source ConverterType Gets the type of the converter to use. Declaration public Type ConverterType { get; } Property Value Type Description Type | Improve this Doc View Source IsGenericConverter Gets whether or not this converter is a generic ValueConverter<T> . Declaration public bool IsGenericConverter { get; } Property Value Type Description Boolean | Improve this Doc View Source UseDefaultConverterForType Gets whether or not to use the default converter for the member type instead of the specified type. Declaration public bool UseDefaultConverterForType { get; } Property Value Type Description Boolean Implements System.Runtime.InteropServices._Attribute Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Config.Stores.Converters.CaseInsensitiveEnumConverter-1.html": {
    "href": "api/IPA.Config.Stores.Converters.CaseInsensitiveEnumConverter-1.html",
    "title": "Class CaseInsensitiveEnumConverter<T>",
    "keywords": "Class CaseInsensitiveEnumConverter<T> A converter for an enum of type T , that converts the enum to its string representation and back, ignoring the case of the serialized value for deseiralization. Inheritance Object ValueConverter <T> CaseInsensitiveEnumConverter<T> Implements IValueConverter Inherited Members ValueConverter<T>.IValueConverter.ToValue(Object, Object) ValueConverter<T>.IValueConverter.FromValue(Value, Object) ValueConverter<T>.IValueConverter.Type Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Stores.Converters Assembly : IPA.Loader.dll Syntax public sealed class CaseInsensitiveEnumConverter<T> : ValueConverter<T>, IValueConverter where T : Enum Type Parameters Name Description T the enum type Methods | Improve this Doc View Source FromValue(Value, Object) Converts a Value that is a Text node to the corresponding enum value. Declaration public override T FromValue(Value value, object parent) Parameters Type Name Description Value value the Value to convert Object parent the object which will own the created object Returns Type Description T the deserialized enum value Overrides IPA.Config.Stores.ValueConverter<T>.FromValue(IPA.Config.Data.Value, System.Object) Exceptions Type Condition ArgumentException if value is not a Text node | Improve this Doc View Source ToValue(T, Object) Converts an enum of type T to a Value node corresponding to its value. Declaration public override Value ToValue(T obj, object parent) Parameters Type Name Description T obj the value to serialize Object parent the object which owns obj Returns Type Description Value a Text node representing obj Overrides IPA.Config.Stores.ValueConverter<T>.ToValue(T, System.Object) Implements IValueConverter Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Config.Stores.Converters.CollectionConverter-2.html": {
    "href": "api/IPA.Config.Stores.Converters.CollectionConverter-2.html",
    "title": "Class CollectionConverter<T, TCollection>",
    "keywords": "Class CollectionConverter<T, TCollection> A base class for all ICollection<T> type converters, providing most of the functionality. Inheritance Object ValueConverter <TCollection> CollectionConverter<T, TCollection> CollectionConverter<T, TCollection, TConverter> IListConverter<T> ISetConverter<T> ListConverter<T> Implements IValueConverter Inherited Members ValueConverter<TCollection>.IValueConverter.ToValue(Object, Object) ValueConverter<TCollection>.IValueConverter.FromValue(Value, Object) ValueConverter<TCollection>.IValueConverter.Type Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Stores.Converters Assembly : IPA.Loader.dll Syntax public class CollectionConverter<T, TCollection> : ValueConverter<TCollection>, IValueConverter where TCollection : ICollection<T> Type Parameters Name Description T the type of the items in the collection TCollection the instantiated type of collection Constructors | Improve this Doc View Source CollectionConverter() Creates a CollectionConverter<T, TCollection> using the default converter for the element type. Equivalent to calling CollectionConverter(ValueConverter<T>) with Default . Declaration public CollectionConverter() See Also CollectionConverter(ValueConverter<T>) | Improve this Doc View Source CollectionConverter(ValueConverter<T>) Creates a CollectionConverter<T, TCollection> using the specified underlying converter. Declaration public CollectionConverter(ValueConverter<T> underlying) Parameters Type Name Description ValueConverter <T> underlying the ValueConverter<T> to use to convert the values Properties | Improve this Doc View Source BaseConverter Gets the converter for the collection's value type. Declaration protected ValueConverter<T> BaseConverter { get; } Property Value Type Description ValueConverter <T> Methods | Improve this Doc View Source Create(Int32, Object) Creates a collection of type TCollection using the size and parent . Declaration protected virtual TCollection Create(int size, object parent) Parameters Type Name Description Int32 size the initial size of the collecion Object parent the object that will own the new collection Returns Type Description TCollection a new instance of TCollection See Also FromValue ( Value , Object ) | Improve this Doc View Source FromValue(Value, Object) Deserializes a List in value into a new TCollection owned by parent . Declaration public override TCollection FromValue(Value value, object parent) Parameters Type Name Description Value value the List to convert to a TCollection Object parent the object that will own the resulting TCollection Returns Type Description TCollection a new TCollection holding the deserialized content of value Overrides IPA.Config.Stores.ValueConverter<TCollection>.FromValue(IPA.Config.Data.Value, System.Object) See Also FromValue ( Value , Object ) | Improve this Doc View Source PopulateFromValue(TCollection, List, Object) Populates the colleciton col with the deserialized values from list with the parent parent . Declaration protected void PopulateFromValue(TCollection col, List list, object parent) Parameters Type Name Description TCollection col the collection to populate List list the values to populate it with Object parent the object that will own the new objects See Also FromValue ( Value , Object ) | Improve this Doc View Source ToValue(TCollection, Object) Serializes a TCollection into a List . Declaration public override Value ToValue(TCollection obj, object parent) Parameters Type Name Description TCollection obj the TCollection to serialize Object parent the object owning obj Returns Type Description Value the List that obj was serialized into Overrides IPA.Config.Stores.ValueConverter<TCollection>.ToValue(TCollection, System.Object) See Also ToValue (T, Object ) Implements IValueConverter Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Config.Stores.Converters.CollectionConverter-3.html": {
    "href": "api/IPA.Config.Stores.Converters.CollectionConverter-3.html",
    "title": "Class CollectionConverter<T, TCollection, TConverter>",
    "keywords": "Class CollectionConverter<T, TCollection, TConverter> A CollectionConverter<T, TCollection> which default constructs a converter for use as the value converter. Inheritance Object ValueConverter <TCollection> CollectionConverter <T, TCollection> CollectionConverter<T, TCollection, TConverter> Implements IValueConverter Inherited Members CollectionConverter<T, TCollection>.BaseConverter CollectionConverter<T, TCollection>.Create(Int32, Object) CollectionConverter<T, TCollection>.PopulateFromValue(TCollection, List, Object) CollectionConverter<T, TCollection>.FromValue(Value, Object) CollectionConverter<T, TCollection>.ToValue(TCollection, Object) ValueConverter<TCollection>.ToValue(TCollection, Object) ValueConverter<TCollection>.FromValue(Value, Object) ValueConverter<TCollection>.IValueConverter.ToValue(Object, Object) ValueConverter<TCollection>.IValueConverter.FromValue(Value, Object) ValueConverter<TCollection>.IValueConverter.Type Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Stores.Converters Assembly : IPA.Loader.dll Syntax public sealed class CollectionConverter<T, TCollection, TConverter> : CollectionConverter<T, TCollection>, IValueConverter where TCollection : ICollection<T> where TConverter : ValueConverter<T>, new() Type Parameters Name Description T the value type of the collection TCollection the type of the colleciton TConverter the type of the converter to use for T Constructors | Improve this Doc View Source CollectionConverter() Creates a CollectionConverter<T, TCollection> using a default constructed TConverter element type. Equivalent to calling CollectionConverter(ValueConverter<T>) with a default-constructed TConverter . Declaration public CollectionConverter() See Also CollectionConverter(ValueConverter<T>) Implements IValueConverter Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[]) See Also CollectionConverter <T, TCollection>"
  },
  "api/IPA.Config.Stores.Converters.Converter.html": {
    "href": "api/IPA.Config.Stores.Converters.Converter.html",
    "title": "Class Converter",
    "keywords": "Class Converter Provides utility functions for custom converters. Inheritance Object Converter Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Stores.Converters Assembly : IPA.Loader.dll Syntax public static class Converter Methods | Improve this Doc View Source FloatValue(Value) Gets the floaing point value of a Value , coercing an Integer if necessary, or null if val is not an Integer or FloatingPoint . Declaration public static decimal? FloatValue(Value val) Parameters Type Name Description Value val the Value to get the floaing point value of Returns Type Description Nullable < Decimal > the floaing point value of val , or null | Improve this Doc View Source IntValue(Value) Gets the integral value of a Value , coercing a FloatingPoint if necessary, or null if val is not an Integer or FloatingPoint . Declaration public static long? IntValue(Value val) Parameters Type Name Description Value val the Value to get the integral value of Returns Type Description Nullable < Int64 > the integral value of val , or null"
  },
  "api/IPA.Config.Stores.Converters.Converter-1.html": {
    "href": "api/IPA.Config.Stores.Converters.Converter-1.html",
    "title": "Class Converter<T>",
    "keywords": "Class Converter<T> Provides generic utilities for converters for certain types. Inheritance Object Converter<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Stores.Converters Assembly : IPA.Loader.dll Syntax public static class Converter<T> Type Parameters Name Description T the type of the ValueConverter<T> that this works on Properties | Improve this Doc View Source Default Gets the default ValueConverter<T> for the current type. Declaration public static ValueConverter<T> Default { get; } Property Value Type Description ValueConverter <T>"
  },
  "api/IPA.Config.Stores.Converters.CustomObjectConverter-1.html": {
    "href": "api/IPA.Config.Stores.Converters.CustomObjectConverter-1.html",
    "title": "Class CustomObjectConverter<T>",
    "keywords": "Class CustomObjectConverter<T> A ValueConverter<T> for objects normally serialized to config via Generated<T>(Config, Boolean) . Inheritance Object ValueConverter <T> CustomObjectConverter<T> Implements IValueConverter Inherited Members ValueConverter<T>.IValueConverter.ToValue(Object, Object) ValueConverter<T>.IValueConverter.FromValue(Value, Object) ValueConverter<T>.IValueConverter.Type Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Stores.Converters Assembly : IPA.Loader.dll Syntax public class CustomObjectConverter<T> : ValueConverter<T>, IValueConverter where T : class Type Parameters Name Description T the same type parameter that would be passed into Generated<T>(Config, Boolean) Methods | Improve this Doc View Source Deserialize(Value, Object) Deserializes value into a T with the given parent . Declaration public static T Deserialize(Value value, object parent) Parameters Type Name Description Value value the Value to deserialize Object parent the parent object that will own the deserialized value Returns Type Description T the deserialized value See Also FromValue ( Value , Object ) | Improve this Doc View Source FromValue(Value, Object) Deserializes value into a T with the given parent . Declaration public override T FromValue(Value value, object parent) Parameters Type Name Description Value value the Value to deserialize Object parent the parent object that will own the deserialized value Returns Type Description T the deserialized value Overrides IPA.Config.Stores.ValueConverter<T>.FromValue(IPA.Config.Data.Value, System.Object) See Also FromValue ( Value , Object ) | Improve this Doc View Source Serialize(T, Object) Serializes obj into a Value structure, given parent . Declaration public static Value Serialize(T obj, object parent) Parameters Type Name Description T obj the object to serialize Object parent the parent object that owns obj Returns Type Description Value the Value tree that represents obj See Also ToValue (T, Object ) | Improve this Doc View Source ToValue(T, Object) Serializes obj into a Value structure, given parent . Declaration public override Value ToValue(T obj, object parent) Parameters Type Name Description T obj the object to serialize Object parent the parent object that owns obj Returns Type Description Value the Value tree that represents obj Overrides IPA.Config.Stores.ValueConverter<T>.ToValue(T, System.Object) See Also ToValue (T, Object ) Implements IValueConverter Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[]) See Also Generated<T> ( Config , Boolean )"
  },
  "api/IPA.Config.Stores.Converters.CustomValueTypeConverter-1.html": {
    "href": "api/IPA.Config.Stores.Converters.CustomValueTypeConverter-1.html",
    "title": "Class CustomValueTypeConverter<T>",
    "keywords": "Class CustomValueTypeConverter<T> A ValueConverter<T> for custom value types, serialized identically to the reference types serialized with Generated<T>(Config, Boolean) . Inheritance Object ValueConverter <T> CustomValueTypeConverter<T> Implements IValueConverter Inherited Members ValueConverter<T>.IValueConverter.ToValue(Object, Object) ValueConverter<T>.IValueConverter.FromValue(Value, Object) ValueConverter<T>.IValueConverter.Type Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Stores.Converters Assembly : IPA.Loader.dll Syntax public class CustomValueTypeConverter<T> : ValueConverter<T>, IValueConverter where T : struct Type Parameters Name Description T the type of the value to convert Methods | Improve this Doc View Source Deserialize(Value, Object) Deserializes value into a T with the given parent . Declaration public static T Deserialize(Value value, object parent) Parameters Type Name Description Value value the Value to deserialize Object parent the parent object that will own the deserialized value Returns Type Description T the deserialized value See Also FromValue ( Value , Object ) | Improve this Doc View Source FromValue(Value, Object) Deserializes value into a T with the given parent . Declaration public override T FromValue(Value value, object parent) Parameters Type Name Description Value value the Value to deserialize Object parent the parent object that will own the deserialized value Returns Type Description T the deserialized value Overrides IPA.Config.Stores.ValueConverter<T>.FromValue(IPA.Config.Data.Value, System.Object) See Also FromValue ( Value , Object ) | Improve this Doc View Source Serialize(T) Serializes obj into a corresponding Value structure. Declaration public static Value Serialize(T obj) Parameters Type Name Description T obj the object to serialize Returns Type Description Value the Value tree that represents obj See Also ToValue (T, Object ) | Improve this Doc View Source ToValue(T, Object) Serializes obj into a Value structure, given parent . Declaration public override Value ToValue(T obj, object parent) Parameters Type Name Description T obj the object to serialize Object parent the parent object that owns obj Returns Type Description Value the Value tree that represents obj Overrides IPA.Config.Stores.ValueConverter<T>.ToValue(T, System.Object) See Also ToValue (T, Object ) Implements IValueConverter Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Config.Stores.Converters.DictionaryConverter-1.html": {
    "href": "api/IPA.Config.Stores.Converters.DictionaryConverter-1.html",
    "title": "Class DictionaryConverter<TValue>",
    "keywords": "Class DictionaryConverter<TValue> A converter for instances of Dictionary<TKey,TValue> . Inheritance Object ValueConverter < Dictionary < String , TValue>> DictionaryConverter<TValue> DictionaryConverter<TValue, TConverter> Implements IValueConverter Inherited Members ValueConverter<Dictionary<String, TValue>>.ToValue(Dictionary<String, TValue>, Object) ValueConverter<Dictionary<String, TValue>>.FromValue(Value, Object) ValueConverter<Dictionary<String, TValue>>.IValueConverter.ToValue(Object, Object) ValueConverter<Dictionary<String, TValue>>.IValueConverter.FromValue(Value, Object) ValueConverter<Dictionary<String, TValue>>.IValueConverter.Type Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Stores.Converters Assembly : IPA.Loader.dll Syntax public class DictionaryConverter<TValue> : ValueConverter<Dictionary<string, TValue>>, IValueConverter Type Parameters Name Description TValue the value type of the dictionary Constructors | Improve this Doc View Source DictionaryConverter() Constructs an IDictionaryConverter<TValue> using the default converter for the value type. Declaration public DictionaryConverter() | Improve this Doc View Source DictionaryConverter(ValueConverter<TValue>) Constructs an IDictionaryConverter<TValue> using the specified converter for the value. Declaration public DictionaryConverter(ValueConverter<TValue> converter) Parameters Type Name Description ValueConverter <TValue> converter the converter for the value Properties | Improve this Doc View Source BaseConverter Gets the converter for the dictionary's value type. Declaration protected ValueConverter<TValue> BaseConverter { get; } Property Value Type Description ValueConverter <TValue> Methods | Improve this Doc View Source FromValue(Value, Object) Converts a Map to a Dictionary<TKey,TValue> that is represented by it. Declaration public override Dictionary<string, TValue> FromValue(Value value, object parent) Parameters Type Name Description Value value the Map to convert Object parent the parent that will own the resulting object Returns Type Description Dictionary < String , TValue> the deserialized dictionary Overrides IPA.Config.Stores.ValueConverter<System.Collections.Generic.Dictionary<System.String, TValue>>.FromValue(IPA.Config.Data.Value, System.Object) | Improve this Doc View Source ToValue(Dictionary<String, TValue>, Object) Serializes a Dictionary<TKey,TValue> into a Map containing its values. Declaration public override Value ToValue(Dictionary<string, TValue> obj, object parent) Parameters Type Name Description Dictionary < String , TValue> obj the dictionary to serialize Object parent the object that owns the dictionary Returns Type Description Value the dictionary serialized as a Map Overrides IPA.Config.Stores.ValueConverter<System.Collections.Generic.Dictionary<System.String, TValue>>.ToValue(System.Collections.Generic.Dictionary<System.String, TValue>, System.Object) Implements IValueConverter Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Config.Stores.Converters.DictionaryConverter-2.html": {
    "href": "api/IPA.Config.Stores.Converters.DictionaryConverter-2.html",
    "title": "Class DictionaryConverter<TValue, TConverter>",
    "keywords": "Class DictionaryConverter<TValue, TConverter> A converter for instances of Dictionary<TKey,TValue> , specifying a value converter as a type parameter. Inheritance Object ValueConverter < Dictionary < String , TValue>> DictionaryConverter <TValue> DictionaryConverter<TValue, TConverter> Implements IValueConverter Inherited Members DictionaryConverter<TValue>.BaseConverter DictionaryConverter<TValue>.FromValue(Value, Object) DictionaryConverter<TValue>.ToValue(Dictionary<String, TValue>, Object) ValueConverter<Dictionary<String, TValue>>.ToValue(Dictionary<String, TValue>, Object) ValueConverter<Dictionary<String, TValue>>.FromValue(Value, Object) ValueConverter<Dictionary<String, TValue>>.IValueConverter.ToValue(Object, Object) ValueConverter<Dictionary<String, TValue>>.IValueConverter.FromValue(Value, Object) ValueConverter<Dictionary<String, TValue>>.IValueConverter.Type Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Stores.Converters Assembly : IPA.Loader.dll Syntax public sealed class DictionaryConverter<TValue, TConverter> : DictionaryConverter<TValue>, IValueConverter where TConverter : ValueConverter<TValue>, new() Type Parameters Name Description TValue the value type of the dictionary TConverter the converter type for values Constructors | Improve this Doc View Source DictionaryConverter() Constructs a new IDictionaryConverter<TValue, TConverter> with a new instance of TConverter as the value converter. Declaration public DictionaryConverter() Implements IValueConverter Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Config.Stores.Converters.EnumConverter-1.html": {
    "href": "api/IPA.Config.Stores.Converters.EnumConverter-1.html",
    "title": "Class EnumConverter<T>",
    "keywords": "Class EnumConverter<T> A converter for an enum of type T , that converts the enum to its string representation and back. Inheritance Object ValueConverter <T> EnumConverter<T> Implements IValueConverter Inherited Members ValueConverter<T>.IValueConverter.ToValue(Object, Object) ValueConverter<T>.IValueConverter.FromValue(Value, Object) ValueConverter<T>.IValueConverter.Type Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Stores.Converters Assembly : IPA.Loader.dll Syntax public sealed class EnumConverter<T> : ValueConverter<T>, IValueConverter where T : Enum Type Parameters Name Description T the enum type Methods | Improve this Doc View Source FromValue(Value, Object) Converts a Value that is a Text node to the corresponding enum value. Declaration public override T FromValue(Value value, object parent) Parameters Type Name Description Value value the Value to convert Object parent the object which will own the created object Returns Type Description T the deserialized enum value Overrides IPA.Config.Stores.ValueConverter<T>.FromValue(IPA.Config.Data.Value, System.Object) Exceptions Type Condition ArgumentException if value is not a Text node | Improve this Doc View Source ToValue(T, Object) Converts an enum of type T to a Value node corresponding to its value. Declaration public override Value ToValue(T obj, object parent) Parameters Type Name Description T obj the value to serialize Object parent the object which owns obj Returns Type Description Value a Text node representing obj Overrides IPA.Config.Stores.ValueConverter<T>.ToValue(T, System.Object) Implements IValueConverter Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Config.Stores.Converters.HexColorConverter.html": {
    "href": "api/IPA.Config.Stores.Converters.HexColorConverter.html",
    "title": "Class HexColorConverter",
    "keywords": "Class HexColorConverter A converter for UnityEngine.Color objects. Inheritance Object ValueConverter < UnityEngine.Color > HexColorConverter Implements IValueConverter Inherited Members ValueConverter<Color>.IValueConverter.ToValue(Object, Object) ValueConverter<Color>.IValueConverter.FromValue(Value, Object) ValueConverter<Color>.IValueConverter.Type Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Stores.Converters Assembly : IPA.Loader.dll Syntax public sealed class HexColorConverter : ValueConverter<Color>, IValueConverter Methods | Improve this Doc View Source FromValue(Value, Object) Converts a Value that is a Text node to the corresponding UnityEngine.Color object. Declaration public override Color FromValue(Value value, object parent) Parameters Type Name Description Value value the Value to convert Object parent the object which will own the created object Returns Type Description UnityEngine.Color the deserialized Color object Overrides IPA.Config.Stores.ValueConverter<UnityEngine.Color>.FromValue(IPA.Config.Data.Value, System.Object) Exceptions Type Condition ArgumentException if value is not a Text node or couldn't be parsed into a Color object | Improve this Doc View Source ToValue(Color, Object) Converts color of type UnityEngine.Color to a Value node. Declaration public override Value ToValue(Color obj, object parent) Parameters Type Name Description UnityEngine.Color obj the object to serialize Object parent the object which owns obj Returns Type Description Value a Text node representing obj Overrides IPA.Config.Stores.ValueConverter<UnityEngine.Color>.ToValue(UnityEngine.Color, System.Object) Implements IValueConverter Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Config.Stores.Converters.html": {
    "href": "api/IPA.Config.Stores.Converters.html",
    "title": "",
    "keywords": "Classes CaseInsensitiveEnumConverter<T> A converter for an enum of type T , that converts the enum to its string representation and back, ignoring the case of the serialized value for deseiralization. CollectionConverter<T, TCollection> A base class for all ICollection<T> type converters, providing most of the functionality. CollectionConverter<T, TCollection, TConverter> A CollectionConverter<T, TCollection> which default constructs a converter for use as the value converter. Converter Provides utility functions for custom converters. Converter<T> Provides generic utilities for converters for certain types. CustomObjectConverter<T> A ValueConverter<T> for objects normally serialized to config via Generated<T>(Config, Boolean) . CustomValueTypeConverter<T> A ValueConverter<T> for custom value types, serialized identically to the reference types serialized with Generated<T>(Config, Boolean) . DictionaryConverter<TValue> A converter for instances of Dictionary<TKey,TValue> . DictionaryConverter<TValue, TConverter> A converter for instances of Dictionary<TKey,TValue> , specifying a value converter as a type parameter. EnumConverter<T> A converter for an enum of type T , that converts the enum to its string representation and back. HexColorConverter A converter for UnityEngine.Color objects. IDictionaryConverter<TValue> A converter for instances of IDictionary<TKey,TValue> . IDictionaryConverter<TValue, TConverter> A converter for instances of IDictionary<TKey,TValue> , specifying a value converter as a type parameter. IListConverter<T> A CollectionConverter<T, TCollection> for an IList<T> , creating a List<T> when deserializing. IListConverter<T, TConverter> An IListConverter<T> which default constructs a converter for use as the value converter. IReadOnlyDictionaryConverter<TValue> A converter for instances of IReadOnlyDictionary<TKey,TValue> . IReadOnlyDictionaryConverter<TValue, TConverter> A converter for instances of IReadOnlyDictionary<TKey,TValue> , specifying a value converter as a type parameter. ISetConverter<T> A CollectionConverter<T, TCollection> for an ISet<T> , creating a HashSet<T> when deserializing. ISetConverter<T, TConverter> An ISetConverter<T> which default constructs a converter for use as the value converter. ListConverter<T> A CollectionConverter<T, TCollection> for a List<T> . ListConverter<T, TConverter> A ListConverter<T> which default constructs a converter for use as the value converter. NullableConverter<T> A converter for a Nullable<T> . NullableConverter<T, TConverter> A converter for a Nullable<T> that default-constructs a converter of type TConverter to use as the underlying converter. Use this in the UseConverterAttribute . NumericEnumConverter<T> A converter for an enum of type T , that converts the enum to its underlying value for serialization."
  },
  "api/IPA.Config.Stores.Converters.IDictionaryConverter-1.html": {
    "href": "api/IPA.Config.Stores.Converters.IDictionaryConverter-1.html",
    "title": "Class IDictionaryConverter<TValue>",
    "keywords": "Class IDictionaryConverter<TValue> A converter for instances of IDictionary<TKey,TValue> . Inheritance Object ValueConverter < IDictionary < String , TValue>> IDictionaryConverter<TValue> IDictionaryConverter<TValue, TConverter> Implements IValueConverter Inherited Members ValueConverter<IDictionary<String, TValue>>.ToValue(IDictionary<String, TValue>, Object) ValueConverter<IDictionary<String, TValue>>.FromValue(Value, Object) ValueConverter<IDictionary<String, TValue>>.IValueConverter.ToValue(Object, Object) ValueConverter<IDictionary<String, TValue>>.IValueConverter.FromValue(Value, Object) ValueConverter<IDictionary<String, TValue>>.IValueConverter.Type Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Stores.Converters Assembly : IPA.Loader.dll Syntax public class IDictionaryConverter<TValue> : ValueConverter<IDictionary<string, TValue>>, IValueConverter Type Parameters Name Description TValue the value type of the dictionary Constructors | Improve this Doc View Source IDictionaryConverter() Constructs an IDictionaryConverter<TValue> using the default converter for the value type. Declaration public IDictionaryConverter() | Improve this Doc View Source IDictionaryConverter(ValueConverter<TValue>) Constructs an IDictionaryConverter<TValue> using the specified converter for the value. Declaration public IDictionaryConverter(ValueConverter<TValue> converter) Parameters Type Name Description ValueConverter <TValue> converter the converter for the value Properties | Improve this Doc View Source BaseConverter Gets the converter for the dictionary's value type. Declaration protected ValueConverter<TValue> BaseConverter { get; } Property Value Type Description ValueConverter <TValue> Methods | Improve this Doc View Source FromValue(Value, Object) Converts a Map to an IDictionary<TKey,TValue> that is represented by it. Declaration public override IDictionary<string, TValue> FromValue(Value value, object parent) Parameters Type Name Description Value value the Map to convert Object parent the parent that will own the resulting object Returns Type Description IDictionary < String , TValue> the deserialized dictionary Overrides IPA.Config.Stores.ValueConverter<System.Collections.Generic.IDictionary<System.String, TValue>>.FromValue(IPA.Config.Data.Value, System.Object) | Improve this Doc View Source ToValue(IDictionary<String, TValue>, Object) Serializes an IDictionary<TKey,TValue> into a Map containing its values. Declaration public override Value ToValue(IDictionary<string, TValue> obj, object parent) Parameters Type Name Description IDictionary < String , TValue> obj the dictionary to serialize Object parent the object that owns the dictionary Returns Type Description Value the dictionary serialized as a Map Overrides IPA.Config.Stores.ValueConverter<System.Collections.Generic.IDictionary<System.String, TValue>>.ToValue(System.Collections.Generic.IDictionary<System.String, TValue>, System.Object) Implements IValueConverter Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Config.Stores.Converters.IDictionaryConverter-2.html": {
    "href": "api/IPA.Config.Stores.Converters.IDictionaryConverter-2.html",
    "title": "Class IDictionaryConverter<TValue, TConverter>",
    "keywords": "Class IDictionaryConverter<TValue, TConverter> A converter for instances of IDictionary<TKey,TValue> , specifying a value converter as a type parameter. Inheritance Object ValueConverter < IDictionary < String , TValue>> IDictionaryConverter <TValue> IDictionaryConverter<TValue, TConverter> Implements IValueConverter Inherited Members IDictionaryConverter<TValue>.BaseConverter IDictionaryConverter<TValue>.FromValue(Value, Object) IDictionaryConverter<TValue>.ToValue(IDictionary<String, TValue>, Object) ValueConverter<IDictionary<String, TValue>>.ToValue(IDictionary<String, TValue>, Object) ValueConverter<IDictionary<String, TValue>>.FromValue(Value, Object) ValueConverter<IDictionary<String, TValue>>.IValueConverter.ToValue(Object, Object) ValueConverter<IDictionary<String, TValue>>.IValueConverter.FromValue(Value, Object) ValueConverter<IDictionary<String, TValue>>.IValueConverter.Type Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Stores.Converters Assembly : IPA.Loader.dll Syntax public sealed class IDictionaryConverter<TValue, TConverter> : IDictionaryConverter<TValue>, IValueConverter where TConverter : ValueConverter<TValue>, new() Type Parameters Name Description TValue the value type of the dictionary TConverter the converter type for values Constructors | Improve this Doc View Source IDictionaryConverter() Constructs a new IDictionaryConverter<TValue, TConverter> with a new instance of TConverter as the value converter. Declaration public IDictionaryConverter() Implements IValueConverter Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Config.Stores.Converters.IListConverter-1.html": {
    "href": "api/IPA.Config.Stores.Converters.IListConverter-1.html",
    "title": "Class IListConverter<T>",
    "keywords": "Class IListConverter<T> A CollectionConverter<T, TCollection> for an IList<T> , creating a List<T> when deserializing. Inheritance Object ValueConverter < IList <T>> CollectionConverter <T, IList <T>> IListConverter<T> IListConverter<T, TConverter> Implements IValueConverter Inherited Members CollectionConverter<T, IList<T>>.BaseConverter CollectionConverter<T, IList<T>>.Create(Int32, Object) CollectionConverter<T, IList<T>>.PopulateFromValue(IList<T>, List, Object) CollectionConverter<T, IList<T>>.FromValue(Value, Object) CollectionConverter<T, IList<T>>.ToValue(IList<T>, Object) ValueConverter<IList<T>>.ToValue(IList<T>, Object) ValueConverter<IList<T>>.FromValue(Value, Object) ValueConverter<IList<T>>.IValueConverter.ToValue(Object, Object) ValueConverter<IList<T>>.IValueConverter.FromValue(Value, Object) ValueConverter<IList<T>>.IValueConverter.Type Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Stores.Converters Assembly : IPA.Loader.dll Syntax public class IListConverter<T> : CollectionConverter<T, IList<T>>, IValueConverter Type Parameters Name Description T the element type of the IList<T> Constructors | Improve this Doc View Source IListConverter() Creates an IListConverter<T> using the default converter for T . Declaration public IListConverter() See Also CollectionConverter() | Improve this Doc View Source IListConverter(ValueConverter<T>) Creates an IListConverter<T> using the specified underlying converter for values. Declaration public IListConverter(ValueConverter<T> underlying) Parameters Type Name Description ValueConverter <T> underlying the underlying ValueConverter<T> to use for the values Methods | Improve this Doc View Source Create(Int32, Object) Creates a new IList<T> (a List<T> ) for deserialization. Declaration protected override IList<T> Create(int size, object parent) Parameters Type Name Description Int32 size the size to initialize it to Object parent the object that will own the new object Returns Type Description IList <T> the new IList<T> Overrides IPA.Config.Stores.Converters.CollectionConverter<T, System.Collections.Generic.IList<T>>.Create(System.Int32, System.Object) Implements IValueConverter Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[]) See Also CollectionConverter <T, TCollection>"
  },
  "api/IPA.Config.Stores.Converters.IListConverter-2.html": {
    "href": "api/IPA.Config.Stores.Converters.IListConverter-2.html",
    "title": "Class IListConverter<T, TConverter>",
    "keywords": "Class IListConverter<T, TConverter> An IListConverter<T> which default constructs a converter for use as the value converter. Inheritance Object ValueConverter < IList <T>> CollectionConverter <T, IList <T>> IListConverter <T> IListConverter<T, TConverter> Implements IValueConverter Inherited Members IListConverter<T>.Create(Int32, Object) CollectionConverter<T, IList<T>>.BaseConverter CollectionConverter<T, IList<T>>.Create(Int32, Object) CollectionConverter<T, IList<T>>.PopulateFromValue(IList<T>, List, Object) CollectionConverter<T, IList<T>>.FromValue(Value, Object) CollectionConverter<T, IList<T>>.ToValue(IList<T>, Object) ValueConverter<IList<T>>.ToValue(IList<T>, Object) ValueConverter<IList<T>>.FromValue(Value, Object) ValueConverter<IList<T>>.IValueConverter.ToValue(Object, Object) ValueConverter<IList<T>>.IValueConverter.FromValue(Value, Object) ValueConverter<IList<T>>.IValueConverter.Type Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Stores.Converters Assembly : IPA.Loader.dll Syntax public sealed class IListConverter<T, TConverter> : IListConverter<T>, IValueConverter where TConverter : ValueConverter<T>, new() Type Parameters Name Description T the value type of the collection TConverter the type of the converter to use for T Constructors | Improve this Doc View Source IListConverter() Creates an IListConverter<T> using a default constructed TConverter element type. Equivalent to calling IListConverter(ValueConverter<T>) with a default-constructed TConverter . Declaration public IListConverter() See Also IListConverter(ValueConverter<T>) Implements IValueConverter Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[]) See Also IListConverter <T>"
  },
  "api/IPA.Config.Stores.Converters.IReadOnlyDictionaryConverter-1.html": {
    "href": "api/IPA.Config.Stores.Converters.IReadOnlyDictionaryConverter-1.html",
    "title": "Class IReadOnlyDictionaryConverter<TValue>",
    "keywords": "Class IReadOnlyDictionaryConverter<TValue> A converter for instances of IReadOnlyDictionary<TKey,TValue> . Inheritance Object ValueConverter < IReadOnlyDictionary < String , TValue>> IReadOnlyDictionaryConverter<TValue> IReadOnlyDictionaryConverter<TValue, TConverter> Implements IValueConverter Inherited Members ValueConverter<IReadOnlyDictionary<String, TValue>>.ToValue(IReadOnlyDictionary<String, TValue>, Object) ValueConverter<IReadOnlyDictionary<String, TValue>>.FromValue(Value, Object) ValueConverter<IReadOnlyDictionary<String, TValue>>.IValueConverter.ToValue(Object, Object) ValueConverter<IReadOnlyDictionary<String, TValue>>.IValueConverter.FromValue(Value, Object) ValueConverter<IReadOnlyDictionary<String, TValue>>.IValueConverter.Type Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Stores.Converters Assembly : IPA.Loader.dll Syntax public class IReadOnlyDictionaryConverter<TValue> : ValueConverter<IReadOnlyDictionary<string, TValue>>, IValueConverter Type Parameters Name Description TValue the value type of the dictionary Constructors | Improve this Doc View Source IReadOnlyDictionaryConverter() Constructs an IReadOnlyDictionaryConverter<TValue> using the default converter for the value type. Declaration public IReadOnlyDictionaryConverter() | Improve this Doc View Source IReadOnlyDictionaryConverter(ValueConverter<TValue>) Constructs an IReadOnlyDictionaryConverter<TValue> using the specified converter for the value. Declaration public IReadOnlyDictionaryConverter(ValueConverter<TValue> converter) Parameters Type Name Description ValueConverter <TValue> converter the converter for the value Properties | Improve this Doc View Source BaseConverter Gets the converter for the dictionary's value type. Declaration protected ValueConverter<TValue> BaseConverter { get; } Property Value Type Description ValueConverter <TValue> Methods | Improve this Doc View Source FromValue(Value, Object) Converts a Map to an IDictionary<TKey,TValue> that is represented by it. Declaration public override IReadOnlyDictionary<string, TValue> FromValue(Value value, object parent) Parameters Type Name Description Value value the Map to convert Object parent the parent that will own the resulting object Returns Type Description IReadOnlyDictionary < String , TValue> the deserialized dictionary Overrides IPA.Config.Stores.ValueConverter<System.Collections.Generic.IReadOnlyDictionary<System.String, TValue>>.FromValue(IPA.Config.Data.Value, System.Object) | Improve this Doc View Source ToValue(IReadOnlyDictionary<String, TValue>, Object) Serializes an IDictionary<TKey,TValue> into a Map containing its values. Declaration public override Value ToValue(IReadOnlyDictionary<string, TValue> obj, object parent) Parameters Type Name Description IReadOnlyDictionary < String , TValue> obj the dictionary to serialize Object parent the object that owns the dictionary Returns Type Description Value the dictionary serialized as a Map Overrides IPA.Config.Stores.ValueConverter<System.Collections.Generic.IReadOnlyDictionary<System.String, TValue>>.ToValue(System.Collections.Generic.IReadOnlyDictionary<System.String, TValue>, System.Object) Implements IValueConverter Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Config.Stores.Converters.IReadOnlyDictionaryConverter-2.html": {
    "href": "api/IPA.Config.Stores.Converters.IReadOnlyDictionaryConverter-2.html",
    "title": "Class IReadOnlyDictionaryConverter<TValue, TConverter>",
    "keywords": "Class IReadOnlyDictionaryConverter<TValue, TConverter> A converter for instances of IReadOnlyDictionary<TKey,TValue> , specifying a value converter as a type parameter. Inheritance Object ValueConverter < IReadOnlyDictionary < String , TValue>> IReadOnlyDictionaryConverter <TValue> IReadOnlyDictionaryConverter<TValue, TConverter> Implements IValueConverter Inherited Members IReadOnlyDictionaryConverter<TValue>.BaseConverter IReadOnlyDictionaryConverter<TValue>.FromValue(Value, Object) IReadOnlyDictionaryConverter<TValue>.ToValue(IReadOnlyDictionary<String, TValue>, Object) ValueConverter<IReadOnlyDictionary<String, TValue>>.ToValue(IReadOnlyDictionary<String, TValue>, Object) ValueConverter<IReadOnlyDictionary<String, TValue>>.FromValue(Value, Object) ValueConverter<IReadOnlyDictionary<String, TValue>>.IValueConverter.ToValue(Object, Object) ValueConverter<IReadOnlyDictionary<String, TValue>>.IValueConverter.FromValue(Value, Object) ValueConverter<IReadOnlyDictionary<String, TValue>>.IValueConverter.Type Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Stores.Converters Assembly : IPA.Loader.dll Syntax public sealed class IReadOnlyDictionaryConverter<TValue, TConverter> : IReadOnlyDictionaryConverter<TValue>, IValueConverter where TConverter : ValueConverter<TValue>, new() Type Parameters Name Description TValue the value type of the dictionary TConverter the converter type for values Constructors | Improve this Doc View Source IReadOnlyDictionaryConverter() Constructs a new IReadOnlyDictionaryConverter<TValue, TConverter> with a new instance of TConverter as the value converter. Declaration public IReadOnlyDictionaryConverter() Implements IValueConverter Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Config.Stores.Converters.ISetConverter-1.html": {
    "href": "api/IPA.Config.Stores.Converters.ISetConverter-1.html",
    "title": "Class ISetConverter<T>",
    "keywords": "Class ISetConverter<T> A CollectionConverter<T, TCollection> for an ISet<T> , creating a HashSet<T> when deserializing. Inheritance Object ValueConverter < ISet <T>> CollectionConverter <T, ISet <T>> ISetConverter<T> ISetConverter<T, TConverter> Implements IValueConverter Inherited Members CollectionConverter<T, ISet<T>>.BaseConverter CollectionConverter<T, ISet<T>>.Create(Int32, Object) CollectionConverter<T, ISet<T>>.PopulateFromValue(ISet<T>, List, Object) CollectionConverter<T, ISet<T>>.FromValue(Value, Object) CollectionConverter<T, ISet<T>>.ToValue(ISet<T>, Object) ValueConverter<ISet<T>>.ToValue(ISet<T>, Object) ValueConverter<ISet<T>>.FromValue(Value, Object) ValueConverter<ISet<T>>.IValueConverter.ToValue(Object, Object) ValueConverter<ISet<T>>.IValueConverter.FromValue(Value, Object) ValueConverter<ISet<T>>.IValueConverter.Type Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Stores.Converters Assembly : IPA.Loader.dll Syntax public class ISetConverter<T> : CollectionConverter<T, ISet<T>>, IValueConverter Type Parameters Name Description T the element type of the ISet<T> Constructors | Improve this Doc View Source ISetConverter() Creates an ISetConverter<T> using the default converter for T . Declaration public ISetConverter() See Also CollectionConverter() | Improve this Doc View Source ISetConverter(ValueConverter<T>) Creates an ISetConverter<T> using the specified underlying converter for values. Declaration public ISetConverter(ValueConverter<T> underlying) Parameters Type Name Description ValueConverter <T> underlying the underlying ValueConverter<T> to use for the values Methods | Improve this Doc View Source Create(Int32, Object) Creates a new ISet<T> (a HashSet<T> ) for deserialization. Declaration protected override ISet<T> Create(int size, object parent) Parameters Type Name Description Int32 size the size to initialize it to Object parent the object that will own the new object Returns Type Description ISet <T> the new ISet<T> Overrides IPA.Config.Stores.Converters.CollectionConverter<T, System.Collections.Generic.ISet<T>>.Create(System.Int32, System.Object) Implements IValueConverter Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[]) See Also CollectionConverter <T, TCollection>"
  },
  "api/IPA.Config.Stores.Converters.ISetConverter-2.html": {
    "href": "api/IPA.Config.Stores.Converters.ISetConverter-2.html",
    "title": "Class ISetConverter<T, TConverter>",
    "keywords": "Class ISetConverter<T, TConverter> An ISetConverter<T> which default constructs a converter for use as the value converter. Inheritance Object ValueConverter < ISet <T>> CollectionConverter <T, ISet <T>> ISetConverter <T> ISetConverter<T, TConverter> Implements IValueConverter Inherited Members ISetConverter<T>.Create(Int32, Object) CollectionConverter<T, ISet<T>>.BaseConverter CollectionConverter<T, ISet<T>>.Create(Int32, Object) CollectionConverter<T, ISet<T>>.PopulateFromValue(ISet<T>, List, Object) CollectionConverter<T, ISet<T>>.FromValue(Value, Object) CollectionConverter<T, ISet<T>>.ToValue(ISet<T>, Object) ValueConverter<ISet<T>>.ToValue(ISet<T>, Object) ValueConverter<ISet<T>>.FromValue(Value, Object) ValueConverter<ISet<T>>.IValueConverter.ToValue(Object, Object) ValueConverter<ISet<T>>.IValueConverter.FromValue(Value, Object) ValueConverter<ISet<T>>.IValueConverter.Type Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Stores.Converters Assembly : IPA.Loader.dll Syntax public sealed class ISetConverter<T, TConverter> : ISetConverter<T>, IValueConverter where TConverter : ValueConverter<T>, new() Type Parameters Name Description T the value type of the collection TConverter the type of the converter to use for T Constructors | Improve this Doc View Source ISetConverter() Creates an ISetConverter<T> using a default constructed TConverter element type. Equivalent to calling ISetConverter(ValueConverter<T>) with a default-constructed TConverter . Declaration public ISetConverter() See Also ISetConverter(ValueConverter<T>) Implements IValueConverter Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[]) See Also ISetConverter <T>"
  },
  "api/IPA.Config.Stores.Converters.ListConverter-1.html": {
    "href": "api/IPA.Config.Stores.Converters.ListConverter-1.html",
    "title": "Class ListConverter<T>",
    "keywords": "Class ListConverter<T> A CollectionConverter<T, TCollection> for a List<T> . Inheritance Object ValueConverter < List <T>> CollectionConverter <T, List <T>> ListConverter<T> ListConverter<T, TConverter> Implements IValueConverter Inherited Members CollectionConverter<T, List<T>>.BaseConverter CollectionConverter<T, List<T>>.Create(Int32, Object) CollectionConverter<T, List<T>>.PopulateFromValue(List<T>, List, Object) CollectionConverter<T, List<T>>.FromValue(Value, Object) CollectionConverter<T, List<T>>.ToValue(List<T>, Object) ValueConverter<List<T>>.ToValue(List<T>, Object) ValueConverter<List<T>>.FromValue(Value, Object) ValueConverter<List<T>>.IValueConverter.ToValue(Object, Object) ValueConverter<List<T>>.IValueConverter.FromValue(Value, Object) ValueConverter<List<T>>.IValueConverter.Type Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Stores.Converters Assembly : IPA.Loader.dll Syntax public class ListConverter<T> : CollectionConverter<T, List<T>>, IValueConverter Type Parameters Name Description T the element type of the List<T> Constructors | Improve this Doc View Source ListConverter() Creates an ListConverter<T> using the default converter for T . Declaration public ListConverter() See Also CollectionConverter() | Improve this Doc View Source ListConverter(ValueConverter<T>) Creates an ListConverter<T> using the specified underlying converter for values. Declaration public ListConverter(ValueConverter<T> underlying) Parameters Type Name Description ValueConverter <T> underlying the underlying ValueConverter<T> to use for the values Methods | Improve this Doc View Source Create(Int32, Object) Creates a new List<T> for deserialization. Declaration protected override List<T> Create(int size, object parent) Parameters Type Name Description Int32 size the size to initialize it to Object parent the object that will own the new object Returns Type Description List <T> the new List<T> Overrides IPA.Config.Stores.Converters.CollectionConverter<T, System.Collections.Generic.List<T>>.Create(System.Int32, System.Object) Implements IValueConverter Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[]) See Also CollectionConverter <T, TCollection>"
  },
  "api/IPA.Config.Stores.Converters.ListConverter-2.html": {
    "href": "api/IPA.Config.Stores.Converters.ListConverter-2.html",
    "title": "Class ListConverter<T, TConverter>",
    "keywords": "Class ListConverter<T, TConverter> A ListConverter<T> which default constructs a converter for use as the value converter. Inheritance Object ValueConverter < List <T>> CollectionConverter <T, List <T>> ListConverter <T> ListConverter<T, TConverter> Implements IValueConverter Inherited Members ListConverter<T>.Create(Int32, Object) CollectionConverter<T, List<T>>.BaseConverter CollectionConverter<T, List<T>>.Create(Int32, Object) CollectionConverter<T, List<T>>.PopulateFromValue(List<T>, List, Object) CollectionConverter<T, List<T>>.FromValue(Value, Object) CollectionConverter<T, List<T>>.ToValue(List<T>, Object) ValueConverter<List<T>>.ToValue(List<T>, Object) ValueConverter<List<T>>.FromValue(Value, Object) ValueConverter<List<T>>.IValueConverter.ToValue(Object, Object) ValueConverter<List<T>>.IValueConverter.FromValue(Value, Object) ValueConverter<List<T>>.IValueConverter.Type Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Stores.Converters Assembly : IPA.Loader.dll Syntax public sealed class ListConverter<T, TConverter> : ListConverter<T>, IValueConverter where TConverter : ValueConverter<T>, new() Type Parameters Name Description T the value type of the collection TConverter the type of the converter to use for T Constructors | Improve this Doc View Source ListConverter() Creates an ListConverter<T> using a default constructed TConverter element type. Equivalent to calling ListConverter(ValueConverter<T>) with a default-constructed TConverter . Declaration public ListConverter() See Also ListConverter(ValueConverter<T>) Implements IValueConverter Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[]) See Also ListConverter <T>"
  },
  "api/IPA.Config.Stores.Converters.NullableConverter-1.html": {
    "href": "api/IPA.Config.Stores.Converters.NullableConverter-1.html",
    "title": "Class NullableConverter<T>",
    "keywords": "Class NullableConverter<T> A converter for a Nullable<T> . Inheritance Object ValueConverter < Nullable <T>> NullableConverter<T> NullableConverter<T, TConverter> Implements IValueConverter Inherited Members ValueConverter<Nullable<T>>.IValueConverter.ToValue(Object, Object) ValueConverter<Nullable<T>>.IValueConverter.FromValue(Value, Object) ValueConverter<Nullable<T>>.IValueConverter.Type Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Stores.Converters Assembly : IPA.Loader.dll Syntax public class NullableConverter<T> : ValueConverter<T?>, IValueConverter where T : struct Type Parameters Name Description T the underlying type of the Nullable<T> Constructors | Improve this Doc View Source NullableConverter() Creates a converter with the default converter for the base type. Equivalent to new NullableConverter(Converter<T>.Default) Declaration public NullableConverter() See Also NullableConverter(ValueConverter<T>) Default | Improve this Doc View Source NullableConverter(ValueConverter<T>) Creates a converter with the given underlying ValueConverter<T> . Declaration public NullableConverter(ValueConverter<T> underlying) Parameters Type Name Description ValueConverter <T> underlying the undlerlying ValueConverter<T> to use Methods | Improve this Doc View Source FromValue(Value, Object) Converts a Value tree to a value. Declaration public override T? FromValue(Value value, object parent) Parameters Type Name Description Value value the Value tree to convert Object parent the object which will own the created object Returns Type Description Nullable <T> the object represented by value Overrides IPA.Config.Stores.ValueConverter<System.Nullable<T>>.FromValue(IPA.Config.Data.Value, System.Object) | Improve this Doc View Source ToValue(Nullable<T>, Object) Converts a nullable T to a Value tree. Declaration public override Value ToValue(T? obj, object parent) Parameters Type Name Description Nullable <T> obj the value to serialize Object parent the object which owns obj Returns Type Description Value a Value tree representing obj . Overrides IPA.Config.Stores.ValueConverter<System.Nullable<T>>.ToValue(System.Nullable<T>, System.Object) Implements IValueConverter Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Config.Stores.Converters.NullableConverter-2.html": {
    "href": "api/IPA.Config.Stores.Converters.NullableConverter-2.html",
    "title": "Class NullableConverter<T, TConverter>",
    "keywords": "Class NullableConverter<T, TConverter> A converter for a Nullable<T> that default-constructs a converter of type TConverter to use as the underlying converter. Use this in the UseConverterAttribute . Inheritance Object ValueConverter < Nullable <T>> NullableConverter <T> NullableConverter<T, TConverter> Implements IValueConverter Inherited Members NullableConverter<T>.FromValue(Value, Object) NullableConverter<T>.ToValue(Nullable<T>, Object) ValueConverter<Nullable<T>>.IValueConverter.ToValue(Object, Object) ValueConverter<Nullable<T>>.IValueConverter.FromValue(Value, Object) ValueConverter<Nullable<T>>.IValueConverter.Type Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Stores.Converters Assembly : IPA.Loader.dll Syntax public sealed class NullableConverter<T, TConverter> : NullableConverter<T>, IValueConverter where T : struct where TConverter : ValueConverter<T>, new() Type Parameters Name Description T the underlying type of the Nullable<T> TConverter the type to use as an underlying converter Constructors | Improve this Doc View Source NullableConverter() Creates a converter with a new TConverter as the underlying converter. Declaration public NullableConverter() See Also NullableConverter(ValueConverter<T>) Implements IValueConverter Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[]) See Also NullableConverter <T>"
  },
  "api/IPA.Config.Stores.Converters.NumericEnumConverter-1.html": {
    "href": "api/IPA.Config.Stores.Converters.NumericEnumConverter-1.html",
    "title": "Class NumericEnumConverter<T>",
    "keywords": "Class NumericEnumConverter<T> A converter for an enum of type T , that converts the enum to its underlying value for serialization. Inheritance Object ValueConverter <T> NumericEnumConverter<T> Implements IValueConverter Inherited Members ValueConverter<T>.IValueConverter.ToValue(Object, Object) ValueConverter<T>.IValueConverter.FromValue(Value, Object) ValueConverter<T>.IValueConverter.Type Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Stores.Converters Assembly : IPA.Loader.dll Syntax public sealed class NumericEnumConverter<T> : ValueConverter<T>, IValueConverter where T : Enum Type Parameters Name Description T the enum type Methods | Improve this Doc View Source FromValue(Value, Object) Converts a Value that is a numeric node to the corresponding enum value. Declaration public override T FromValue(Value value, object parent) Parameters Type Name Description Value value the Value to convert Object parent the object which will own the created object Returns Type Description T the deserialized enum value Overrides IPA.Config.Stores.ValueConverter<T>.FromValue(IPA.Config.Data.Value, System.Object) Exceptions Type Condition ArgumentException if value is not a numeric node | Improve this Doc View Source ToValue(T, Object) Converts an enum of type T to a Value node corresponding to its value. Declaration public override Value ToValue(T obj, object parent) Parameters Type Name Description T obj the value to serialize Object parent the object which owns obj Returns Type Description Value an Integer node representing obj Overrides IPA.Config.Stores.ValueConverter<T>.ToValue(T, System.Object) Implements IValueConverter Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Config.Stores.GeneratedStore.html": {
    "href": "api/IPA.Config.Stores.GeneratedStore.html",
    "title": "Class GeneratedStore",
    "keywords": "Class GeneratedStore A class providing an extension for Config to make it easy to use generated config stores. Inheritance Object GeneratedStore Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Stores Assembly : IPA.Loader.dll Syntax public static class GeneratedStore Fields | Improve this Doc View Source AssemblyVisibilityTarget The name of the assembly that internals must be visible to to allow internal protection. Declaration public const string AssemblyVisibilityTarget = \"IPA.Config.Generated\" Field Value Type Description String Methods | Improve this Doc View Source Create<T>() Creates a generated store outside of the context of the config system. Declaration public static T Create<T>() where T : class Returns Type Description T a generated instance of T implementing functionality described by Generated<T>(Config, Boolean) Type Parameters Name Description T the type to wrap Remarks See Generated<T>(Config, Boolean) for more information about how it behaves. See Also Generated<T>(Config, Boolean) | Improve this Doc View Source Generated<T>(Config, Boolean) Creates a generated IConfigStore of type T , registers it to the Config object, and returns it. This also forces a synchronous config load via LoadSync() if loadSync is true . Declaration public static T Generated<T>(this Config cfg, bool loadSync = true) where T : class Parameters Type Name Description Config cfg the Config to register to Boolean loadSync whether to synchronously load the content, or trigger an async load Returns Type Description T a generated instance of T as a special IConfigStore Type Parameters Name Description T the type to wrap Remarks T must be a public non- sealed class. It can also be internal, but in that case, then your assembly must have the following attribute to allow the generated code to reference it. [assembly: InternalsVisibleTo(IPA.Config.Stores.GeneratedStore.AssemblyVisibilityTarget)] Only fields and properties that are public or protected will be considered, and only properties where both the getter and setter are public or protected are considered. Any fields or properties with an IgnoreAttribute applied to them are also ignored. Having properties be virtual is not strictly necessary, however it allows the generated type to keep track of changes and lock around them so that the config will auto-save. All of the attributes in the IPA.Config.Stores.Attributes namespace are handled as described by them. If the T declares a public or protected, virtual method Changed() , then that method may be called to artificially signal to the runtime that the content of the object has changed. That method will also be called after the write locks are released when a property is set anywhere in the owning tree. This will only be called on the outermost generated object of the config structure, even if the change being signaled is somewhere deep into the tree. Similarly, T can declare a public or protected, virtual method OnReload() , which will be called on the filesystem reader thread after the object has been repopulated with new data values. It will be called after the write lock for this object is released. This will only be called on the outermost generated object of the config structure. Similarly, T can declare a public or protected, virtual method CopyFrom(ConfigType) (the first parameter is the type it is defined on), which may be called to copy the properties from another object of its type easily, and more importantly, as only one change. Its body will be executed after the values have been copied. Similarly, T can declare a public or protected, virtual method ChangeTransaction() returning IDisposable , which may be called to get an object representing a transactional change. This may be used to change a lot of properties at once without triggering a save multiple times. Ideally, this is used in a langword_csharp_using block or declaration. The IDisposable returned from your implementation will have its Dispose() called after Changed() is called, but before the write lock is released. Unless you have a very good reason to use the nested IDisposable , avoid it. If T is marked with NotifyPropertyChangesAttribute , the resulting object will implement INotifyPropertyChanged . Similarly, if T implements INotifyPropertyChanged , the resulting object will implement it and notify it too."
  },
  "api/IPA.Config.Stores.html": {
    "href": "api/IPA.Config.Stores.html",
    "title": "",
    "keywords": "Classes GeneratedStore A class providing an extension for Config to make it easy to use generated config stores. ValueConverter<T> A strongly-typed IValueConverter . Interfaces IValueConverter The base interface for a value converter for use by objects generated by Generated<T>(Config, Boolean) ."
  },
  "api/IPA.Config.Stores.IValueConverter.html": {
    "href": "api/IPA.Config.Stores.IValueConverter.html",
    "title": "Interface IValueConverter",
    "keywords": "Interface IValueConverter The base interface for a value converter for use by objects generated by Generated<T>(Config, Boolean) . Namespace : IPA.Config.Stores Assembly : IPA.Loader.dll Syntax public interface IValueConverter Remarks The object returned from FromValue(Value, Object) , if fed into ToValue(Object, Object) , should return equivalent Value structures. Similarly, if the result of ToValue(Object, Object) is fed into FromValue(Value, Object) , the resulting object should be equivalent to the one passed to ToValue(Object, Object) . The parent parameter to ToValue(Object, Object) and FromValue(Value, Object) should be (ideally) the the top of the serialization tree, or some other generated object in that tree, rather than some arbitrary object in the middle that is not managed by the generatd config system. Converters do not need to perform null checks, as the serializer and deserializer will do that automatically. Properties | Improve this Doc View Source Type Gets the type that this IValueConverter handles. Declaration Type Type { get; } Property Value Type Description Type Methods | Improve this Doc View Source FromValue(Value, Object) Converts the given Value to the object type handled by this converter. Declaration object FromValue(Value value, object parent) Parameters Type Name Description Value value the Value to deserialize Object parent the object that will own the result Returns Type Description Object the deserialized object | Improve this Doc View Source ToValue(Object, Object) Converts the given object to a Value . Declaration Value ToValue(object obj, object parent) Parameters Type Name Description Object obj the object to convert Object parent the owning object of obj Returns Type Description Value a representation of obj as a Value structure Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Config.Stores.ValueConverter-1.html": {
    "href": "api/IPA.Config.Stores.ValueConverter-1.html",
    "title": "Class ValueConverter<T>",
    "keywords": "Class ValueConverter<T> A strongly-typed IValueConverter . Inheritance Object ValueConverter<T> CaseInsensitiveEnumConverter<T> CollectionConverter<T, TCollection> CustomObjectConverter<T> CustomValueTypeConverter<T> DictionaryConverter<TValue> EnumConverter<T> HexColorConverter IDictionaryConverter<TValue> IReadOnlyDictionaryConverter<TValue> NullableConverter<T> NumericEnumConverter<T> AlmostVersionConverter Implements IValueConverter Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Config.Stores Assembly : IPA.Loader.dll Syntax public abstract class ValueConverter<T> : IValueConverter Type Parameters Name Description T the type of object to handle Methods | Improve this Doc View Source FromValue(Value, Object) Converts the given Value to the object type handled by this converter. Declaration public abstract T FromValue(Value value, object parent) Parameters Type Name Description Value value the Value to deserialize Object parent the object that will own the result Returns Type Description T the deserialized object See Also FromValue ( Value , Object ) | Improve this Doc View Source ToValue(T, Object) Converts the given object to a Value . Declaration public abstract Value ToValue(T obj, object parent) Parameters Type Name Description T obj the object to convert Object parent the owning object of obj Returns Type Description Value a representation of obj as a Value structure See Also ToValue ( Object , Object ) Explicit Interface Implementations | Improve this Doc View Source IValueConverter.FromValue(Value, Object) Declaration object IValueConverter.FromValue(Value value, object parent) Parameters Type Name Description Value value Object parent Returns Type Description Object | Improve this Doc View Source IValueConverter.ToValue(Object, Object) Declaration Value IValueConverter.ToValue(object obj, object parent) Parameters Type Name Description Object obj Object parent Returns Type Description Value | Improve this Doc View Source IValueConverter.Type Declaration Type IValueConverter.Type { get; } Returns Type Description Type Implements IValueConverter Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[]) See Also IValueConverter"
  },
  "api/IPA.html": {
    "href": "api/IPA.html",
    "title": "",
    "keywords": "Classes InitAttribute Marks a method or a constructor as an inialization method. NoEnableDisableAttribute Indicates that the applied plugin class does not need OnEnableAttribute or OnDisableAttribute methods. OnDisableAttribute Indicates that the target method should be called when the plugin is disabled. OnEnableAttribute Indicates that the target method should be called when the plugin is enabled. OnExitAttribute Indicates that the target method should be called when the game exits. OnStartAttribute Indicates that the target method should be called when the game starts. PluginAttribute Marks a class as being a BSIPA plugin. Enums RuntimeOptions Options that a plugin must specify to describe how it expects to be run."
  },
  "api/IPA.InitAttribute.html": {
    "href": "api/IPA.InitAttribute.html",
    "title": "Class InitAttribute",
    "keywords": "Class InitAttribute Marks a method or a constructor as an inialization method. Inheritance Object Attribute InitAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : IPA Assembly : IPA.Loader.dll Syntax [AttributeUsage(AttributeTargets.Constructor | AttributeTargets.Method, AllowMultiple = false, Inherited = false)] public sealed class InitAttribute : Attribute, _Attribute Remarks If more than one constructor is marked with this attribute, the one with the most parameters, whether or not they can be injected, will be used. Parameter injection is done with PluginInitInjector . Implements System.Runtime.InteropServices._Attribute Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[]) See Also PluginAttribute PluginInitInjector"
  },
  "api/IPA.Loader.CannotRuntimeDisableException.html": {
    "href": "api/IPA.Loader.CannotRuntimeDisableException.html",
    "title": "Class CannotRuntimeDisableException",
    "keywords": "Class CannotRuntimeDisableException Indicates that a plugin cannot be disabled at runtime. Generally not considered an error, however. Inheritance Object Exception CannotRuntimeDisableException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : IPA.Loader Assembly : IPA.Loader.dll Syntax [Serializable] public class CannotRuntimeDisableException : Exception, ISerializable, _Exception Constructors | Improve this Doc View Source CannotRuntimeDisableException(PluginMetadata) Creates an exception for the given plugin metadata. Declaration public CannotRuntimeDisableException(PluginMetadata plugin) Parameters Type Name Description PluginMetadata plugin the plugin that cannot be disabled | Improve this Doc View Source CannotRuntimeDisableException(PluginMetadata, String) Creats an exception with the given plugin metadata and message information. Declaration public CannotRuntimeDisableException(PluginMetadata plugin, string message) Parameters Type Name Description PluginMetadata plugin the plugin that cannot be disabled String message the message to associate with it | Improve this Doc View Source CannotRuntimeDisableException(SerializationInfo, StreamingContext) Creates an exception from a serialization context. Not currently implemented. Declaration protected CannotRuntimeDisableException(SerializationInfo serializationInfo, StreamingContext streamingContext) Parameters Type Name Description SerializationInfo serializationInfo StreamingContext streamingContext Exceptions Type Condition NotImplementedException Properties | Improve this Doc View Source Plugin The plugin that cannot be disabled at runtime. Declaration public PluginMetadata Plugin { get; } Property Value Type Description PluginMetadata Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Loader.Features.Feature.html": {
    "href": "api/IPA.Loader.Features.Feature.html",
    "title": "Class Feature",
    "keywords": "Class Feature The root interface for a mod Feature. Inheritance Object Feature Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Loader.Features Assembly : IPA.Loader.dll Syntax public abstract class Feature Remarks Avoid storing any data in any subclasses. If you do, it may result in a failure to load the feature. Properties | Improve this Doc View Source InvalidMessage The message to be logged when the feature is not valid for a plugin. This should also be set whenever either BeforeInit(PluginMetadata) returns false. Declaration public virtual string InvalidMessage { get; protected set; } Property Value Type Description String the message to show when the feature is marked invalid Methods | Improve this Doc View Source AfterDisable(PluginMetadata) Called after a plugin with this feature appplied is disabled. Declaration public virtual void AfterDisable(PluginMetadata plugin) Parameters Type Name Description PluginMetadata plugin the plugin that was disabled | Improve this Doc View Source AfterInit(PluginMetadata) Called after a plugin has been fully initialized, whether or not there is an Init method. This should never throw an exception. Declaration public virtual void AfterInit(PluginMetadata plugin) Parameters Type Name Description PluginMetadata plugin the plugin that was just initialized | Improve this Doc View Source AfterInit(PluginMetadata, Object) Called after a plugin has been fully initialized, whether or not there is an Init method. This should never throw an exception. Declaration public virtual void AfterInit(PluginMetadata plugin, object pluginInstance) Parameters Type Name Description PluginMetadata plugin the plugin that was just initialized Object pluginInstance the instance of the plugin being initialized | Improve this Doc View Source BeforeInit(PluginMetadata) Called before a plugin's Init method is called. This will not be called if there is no Init method. This should never throw an exception. An exception will abort the loading of the plugin with an error. Declaration public virtual void BeforeInit(PluginMetadata plugin) Parameters Type Name Description PluginMetadata plugin the plugin to be initialized | Improve this Doc View Source Initialize(PluginMetadata, JObject) Initializes the feature with the data provided in the definition. Declaration protected abstract bool Initialize(PluginMetadata meta, JObject featureData) Parameters Type Name Description PluginMetadata meta the metadata of the plugin that is being prepared Newtonsoft.Json.Linq.JObject featureData the data provided with the feature Returns Type Description Boolean true if the feature is valid for the plugin, false otherwise Remarks This gets called AFTER your Init method, but BEFORE the target's Init method. If it is applied to the defining plugin, BeforeInit is not called. Returning false does not prevent the plugin from being loaded. It simply prevents the feature from being used. Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Loader.Features.html": {
    "href": "api/IPA.Loader.Features.html",
    "title": "",
    "keywords": "Classes Feature The root interface for a mod Feature."
  },
  "api/IPA.Loader.html": {
    "href": "api/IPA.Loader.html",
    "title": "",
    "keywords": "Classes CannotRuntimeDisableException Indicates that a plugin cannot be disabled at runtime. Generally not considered an error, however. PluginInitInjector The type that handles value injecting into a plugin's initialization methods. PluginManager The manager class for all plugins. PluginMetadata A class which describes a loaded plugin. StateTransitionTransaction A class to represent a transaction for changing the state of loaded mods. Structs IgnoreReason A structure describing the reason that a plugin was ignored. Enums Reason An enum that represents several categories of ignore reasons that the loader may encounter. Delegates PluginInitInjector.InjectedValueProvider A provider for parameter injectors to request injected values themselves. PluginInitInjector.InjectParameter A typed injector for a plugin's Init method. When registered, called for all associated types. If it returns null, the default for the type will be used. PluginInitInjector.InjectParameterNested A typed injector for a plugin's Init method. When registered, called for all associated types. If it returns null, the default for the type will be used. PluginManager.OnAnyPluginsStateChangedDelegate A delegate representing a state change event for any plugin. PluginManager.PluginDisableDelegate An invoker for the PluginDisabled event. PluginManager.PluginEnableDelegate An invoker for the PluginEnabled event."
  },
  "api/IPA.Loader.IgnoreReason.html": {
    "href": "api/IPA.Loader.IgnoreReason.html",
    "title": "Struct IgnoreReason",
    "keywords": "Struct IgnoreReason A structure describing the reason that a plugin was ignored. Implements IEquatable < IgnoreReason > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : IPA.Loader Assembly : IPA.Loader.dll Syntax public struct IgnoreReason : IEquatable<IgnoreReason> Constructors | Improve this Doc View Source IgnoreReason(Reason, String, Exception, PluginMetadata) Initializes an IgnoreReason with the provided data. Declaration public IgnoreReason(Reason reason, string reasonText = null, Exception error = null, PluginMetadata relatedTo = null) Parameters Type Name Description Reason reason the Reason enum value that describes this reason String reasonText the textual description of this ignore reason, if any Exception error the Exception that caused this IgnoreReason , if any PluginMetadata relatedTo the PluginMetadata this reason is related to, if any Properties | Improve this Doc View Source Error Gets the Exception that caused this plugin to be ignored, if any. Declaration public Exception Error { readonly get; } Property Value Type Description Exception | Improve this Doc View Source Reason Gets the ignore reason, as represented by the Reason enum. Declaration public readonly Reason Reason { get; } Property Value Type Description Reason | Improve this Doc View Source ReasonText Gets the textual description of the particular ignore reason. This will typically include details about why the plugin was ignored, if it is present. Declaration public string ReasonText { readonly get; } Property Value Type Description String | Improve this Doc View Source RelatedTo Gets the metadata of the plugin that this ignore was related to, if any. Declaration public PluginMetadata RelatedTo { readonly get; } Property Value Type Description PluginMetadata Methods | Improve this Doc View Source Equals(IgnoreReason) Compares this IgnoreReason with other for equality. Declaration public bool Equals(IgnoreReason other) Parameters Type Name Description IgnoreReason other the reason to compare to Returns Type Description Boolean true if the two reasons compare equal, false otherwise | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(IgnoreReason, IgnoreReason) Checks if two IgnoreReason s are equal. Declaration public static bool operator ==(IgnoreReason left, IgnoreReason right) Parameters Type Name Description IgnoreReason left the first IgnoreReason to compare IgnoreReason right the second IgnoreReason to compare Returns Type Description Boolean true if the two reasons compare equal, false otherwise | Improve this Doc View Source Inequality(IgnoreReason, IgnoreReason) Checks if two IgnoreReason s are not equal. Declaration public static bool operator !=(IgnoreReason left, IgnoreReason right) Parameters Type Name Description IgnoreReason left the first IgnoreReason to compare IgnoreReason right the second IgnoreReason to compare Returns Type Description Boolean true if the two reasons are not equal, false otherwise Implements System.IEquatable<T> Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Loader.PluginInitInjector.html": {
    "href": "api/IPA.Loader.PluginInitInjector.html",
    "title": "Class PluginInitInjector",
    "keywords": "Class PluginInitInjector The type that handles value injecting into a plugin's initialization methods. Inheritance Object PluginInitInjector Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Loader Assembly : IPA.Loader.dll Syntax public static class PluginInitInjector Remarks The default injectors and what they provide are shown in this table. Parameter Type Injected Value Logger A StandardLogger specialized for the plugin being injected PluginMetadata The PluginMetadata of the plugin being injected Config A Config object for the plugin being injected. These parameters may have Config.NameAttribute and Config.PreferAttribute to control how it is constructed. IAntiMalware The IAntiMalware instance which should be used for any potentially dangerous files. For all of the default injectors, only one of each will be generated, and any later parameters will recieve the same value as the first one. Methods | Improve this Doc View Source AddInjector(Type, PluginInitInjector.InjectParameter) Adds an injector to be used when calling future plugins' Init methods. Declaration public static void AddInjector(Type type, PluginInitInjector.InjectParameter injector) Parameters Type Name Description Type type the type of the parameter. PluginInitInjector.InjectParameter injector the function to call for injection. | Improve this Doc View Source AddInjector(Type, PluginInitInjector.InjectParameterNested) Adds an injector to be used when calling future plugins' Init methods. Declaration public static void AddInjector(Type type, PluginInitInjector.InjectParameterNested injector) Parameters Type Name Description Type type the type of the parameter. PluginInitInjector.InjectParameterNested injector the function to call for injection. | Improve this Doc View Source Inject<T>(PluginInitInjector.InjectedValueProvider, ParameterInfo) Invokes the provider with param and T and casts the result to T . Declaration public static T Inject<T>(this PluginInitInjector.InjectedValueProvider provider, ParameterInfo param) Parameters Type Name Description PluginInitInjector.InjectedValueProvider provider the provider to invoke. ParameterInfo param the parameter to provide for Returns Type Description T the value requested, or null . Type Parameters Name Description T the type of object to be injected"
  },
  "api/IPA.Loader.PluginInitInjector.InjectedValueProvider.html": {
    "href": "api/IPA.Loader.PluginInitInjector.InjectedValueProvider.html",
    "title": "Delegate PluginInitInjector.InjectedValueProvider",
    "keywords": "Delegate PluginInitInjector.InjectedValueProvider A provider for parameter injectors to request injected values themselves. Namespace : IPA.Loader Assembly : IPA.Loader.dll Syntax public delegate object InjectedValueProvider(ParameterInfo forParam, Type typeOverride = null); Parameters Type Name Description ParameterInfo forParam the parameter that this is providing for. Type typeOverride an optional override for the parameter type. Returns Type Description Object the value that would otherwise be injected. Remarks Some injectors may look at attributes on the parameter to gain additional information about what it should provide. If an injector wants to allow end users to affect the things it requests, it may pass the parameter it is currently injecting for to this delegate along with a type override to select some other type. Extension Methods PluginInitInjector.Inject<T>(PluginInitInjector.InjectedValueProvider, ParameterInfo) ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Loader.PluginInitInjector.InjectParameter.html": {
    "href": "api/IPA.Loader.PluginInitInjector.InjectParameter.html",
    "title": "Delegate PluginInitInjector.InjectParameter",
    "keywords": "Delegate PluginInitInjector.InjectParameter A typed injector for a plugin's Init method. When registered, called for all associated types. If it returns null, the default for the type will be used. Namespace : IPA.Loader Assembly : IPA.Loader.dll Syntax public delegate object InjectParameter(object previous, ParameterInfo param, PluginMetadata meta); Parameters Type Name Description Object previous the previous return value of the function, or null if never called for plugin. ParameterInfo param the ParameterInfo of the parameter being injected. PluginMetadata meta the PluginMetadata for the plugin being loaded. Returns Type Description Object the value to inject into that parameter. Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Loader.PluginInitInjector.InjectParameterNested.html": {
    "href": "api/IPA.Loader.PluginInitInjector.InjectParameterNested.html",
    "title": "Delegate PluginInitInjector.InjectParameterNested",
    "keywords": "Delegate PluginInitInjector.InjectParameterNested A typed injector for a plugin's Init method. When registered, called for all associated types. If it returns null, the default for the type will be used. Namespace : IPA.Loader Assembly : IPA.Loader.dll Syntax public delegate object InjectParameterNested(object previous, ParameterInfo param, PluginMetadata meta, PluginInitInjector.InjectedValueProvider provider); Parameters Type Name Description Object previous the previous return value of the function, or null if never called for plugin. ParameterInfo param the ParameterInfo of the parameter being injected. PluginMetadata meta the PluginMetadata for the plugin being loaded. PluginInitInjector.InjectedValueProvider provider an PluginInitInjector.InjectedValueProvider to allow the injector to request injected values. Returns Type Description Object the value to inject into that parameter. Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Loader.PluginManager.html": {
    "href": "api/IPA.Loader.PluginManager.html",
    "title": "Class PluginManager",
    "keywords": "Class PluginManager The manager class for all plugins. Inheritance Object PluginManager Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Loader Assembly : IPA.Loader.dll Syntax public static class PluginManager Properties | Improve this Doc View Source AllPlugins Gets a list of all enabled BSIPA plugins. Use EnabledPlugins instead of this. Declaration [Obsolete(\"This is an old name that no longer accurately represents its value. Use EnabledPlugins instead.\")] public static IEnumerable<PluginMetadata> AllPlugins { get; } Property Value Type Description IEnumerable < PluginMetadata > a collection of all enabled plugins as PluginMetadata s | Improve this Doc View Source DisabledPlugins Gets a list of disabled BSIPA plugins. Declaration public static IEnumerable<PluginMetadata> DisabledPlugins { get; } Property Value Type Description IEnumerable < PluginMetadata > a collection of all disabled plugins as PluginMetadata | Improve this Doc View Source EnabledPlugins Gets a collection of all enabled plugins, as represented by PluginMetadata . Declaration public static IEnumerable<PluginMetadata> EnabledPlugins { get; } Property Value Type Description IEnumerable < PluginMetadata > a collection of all enabled plugins | Improve this Doc View Source IgnoredPlugins Gets a read-only dictionary of an ignored plugin to the reason it was ignored, as an IgnoreReason . Declaration public static IReadOnlyDictionary<PluginMetadata, IgnoreReason> IgnoredPlugins { get; } Property Value Type Description IReadOnlyDictionary < PluginMetadata , IgnoreReason > a dictionary of PluginMetadata to IgnoreReason of ignored plugins | Improve this Doc View Source Plugins An IEnumerable<T> of old IPA plugins. Declaration [Obsolete(\"This exists only to provide support for legacy IPA plugins based on the IPlugin interface.\")] public static IEnumerable<IPlugin> Plugins { get; } Property Value Type Description IEnumerable < IPlugin > all legacy plugin instances Methods | Improve this Doc View Source GetDisabledPlugin(String) Gets a disabled plugin's metadata by its name. Declaration public static PluginMetadata GetDisabledPlugin(string name) Parameters Type Name Description String name the name of the disabled plugin to get Returns Type Description PluginMetadata the metadata for the corresponding plugin | Improve this Doc View Source GetDisabledPluginFromId(String) Gets a disabled plugin's metadata by its ID. Declaration public static PluginMetadata GetDisabledPluginFromId(string id) Parameters Type Name Description String id the ID of the disabled plugin to get Returns Type Description PluginMetadata the metadata for the corresponding plugin | Improve this Doc View Source GetPlugin(String) Gets info about the enabled plugin with the specified name. Declaration public static PluginMetadata GetPlugin(string name) Parameters Type Name Description String name the name of the plugin to get (must be an exact match) Returns Type Description PluginMetadata the plugin metadata for the requested plugin or null if it doesn't exist or is disabled | Improve this Doc View Source GetPluginFromId(String) Gets info about the enabled plugin with the specified ID. Declaration public static PluginMetadata GetPluginFromId(string id) Parameters Type Name Description String id the ID name of the plugin to get (must be an exact match) Returns Type Description PluginMetadata the plugin metadata for the requested plugin or null if it doesn't exist or is disabled | Improve this Doc View Source IsDisabled(PluginMetadata) Checks if a given plugin is disabled. Declaration public static bool IsDisabled(PluginMetadata meta) Parameters Type Name Description PluginMetadata meta the plugin to check Returns Type Description Boolean true if the plugin is disabled, false otherwise. | Improve this Doc View Source IsEnabled(PluginMetadata) Checks if a given plugin is enabled. Declaration public static bool IsEnabled(PluginMetadata meta) Parameters Type Name Description PluginMetadata meta the plugin to check Returns Type Description Boolean true if the plugin is enabled, false otherwise. | Improve this Doc View Source PluginStateTransaction() Creates a new transaction for mod enabling and disabling mods simultaneously. Declaration public static StateTransitionTransaction PluginStateTransaction() Returns Type Description StateTransitionTransaction a new StateTransitionTransaction that captures the current state of loaded mods Events | Improve this Doc View Source OnAnyPluginsStateChanged Called whenever any plugins, regardless of whether or not their change occurs during runtime, have their state changed. Declaration public static event PluginManager.OnAnyPluginsStateChangedDelegate OnAnyPluginsStateChanged Event Type Type Description PluginManager.OnAnyPluginsStateChangedDelegate Remarks Note that this is called on the Unity main thread, and cannot therefore block, as the Task provided represents operations that also run on the Unity main thread. | Improve this Doc View Source OnPluginsStateChanged Called whenever any plugins have their state changed at runtime with the Task representing that state change. Declaration public static event Action<Task> OnPluginsStateChanged Event Type Type Description Action < Task > Remarks Note that this is called on the Unity main thread, and cannot therefore block, as the Task provided represents operations that also run on the Unity main thread. | Improve this Doc View Source PluginDisabled Called whenever a plugin is disabled, before the plugin in question is enabled. Declaration public static event PluginManager.PluginDisableDelegate PluginDisabled Event Type Type Description PluginManager.PluginDisableDelegate | Improve this Doc View Source PluginEnabled Called whenever a plugin is enabled, before the plugin in question is enabled. Declaration public static event PluginManager.PluginEnableDelegate PluginEnabled Event Type Type Description PluginManager.PluginEnableDelegate"
  },
  "api/IPA.Loader.PluginManager.OnAnyPluginsStateChangedDelegate.html": {
    "href": "api/IPA.Loader.PluginManager.OnAnyPluginsStateChangedDelegate.html",
    "title": "Delegate PluginManager.OnAnyPluginsStateChangedDelegate",
    "keywords": "Delegate PluginManager.OnAnyPluginsStateChangedDelegate A delegate representing a state change event for any plugin. Namespace : IPA.Loader Assembly : IPA.Loader.dll Syntax public delegate void OnAnyPluginsStateChangedDelegate(Task changeTask, IEnumerable<PluginMetadata> enabled, IEnumerable<PluginMetadata> disabled); Parameters Type Name Description Task changeTask the Task representing the change IEnumerable < PluginMetadata > enabled the plugins that were enabled in the change IEnumerable < PluginMetadata > disabled the plugins that were disabled in the change Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Loader.PluginManager.PluginDisableDelegate.html": {
    "href": "api/IPA.Loader.PluginManager.PluginDisableDelegate.html",
    "title": "Delegate PluginManager.PluginDisableDelegate",
    "keywords": "Delegate PluginManager.PluginDisableDelegate An invoker for the PluginDisabled event. Namespace : IPA.Loader Assembly : IPA.Loader.dll Syntax public delegate void PluginDisableDelegate(PluginMetadata plugin, bool needsRestart); Parameters Type Name Description PluginMetadata plugin the plugin that was disabled Boolean needsRestart whether it needs a restart to take effect Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Loader.PluginManager.PluginEnableDelegate.html": {
    "href": "api/IPA.Loader.PluginManager.PluginEnableDelegate.html",
    "title": "Delegate PluginManager.PluginEnableDelegate",
    "keywords": "Delegate PluginManager.PluginEnableDelegate An invoker for the PluginEnabled event. Namespace : IPA.Loader Assembly : IPA.Loader.dll Syntax public delegate void PluginEnableDelegate(PluginMetadata plugin, bool needsRestart); Parameters Type Name Description PluginMetadata plugin the plugin that was enabled Boolean needsRestart whether it needs a restart to take effect Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Loader.PluginMetadata.html": {
    "href": "api/IPA.Loader.PluginMetadata.html",
    "title": "Class PluginMetadata",
    "keywords": "Class PluginMetadata A class which describes a loaded plugin. Inheritance Object PluginMetadata Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Loader Assembly : IPA.Loader.dll Syntax public class PluginMetadata Properties | Improve this Doc View Source Assembly The assembly the plugin was loaded from. Declaration public Assembly Assembly { get; } Property Value Type Description Assembly the loaded Assembly that contains the plugin main type | Improve this Doc View Source AssociatedFiles A list of files (that aren't File ) that are associated with this plugin. Declaration public IReadOnlyList<FileInfo> AssociatedFiles { get; } Property Value Type Description IReadOnlyList < FileInfo > a list of associated files | Improve this Doc View Source Author The name of the author that wrote this plugin. Declaration public string Author { get; } Property Value Type Description String the name of the plugin's author | Improve this Doc View Source Description The description of this plugin. Declaration public string Description { get; } Property Value Type Description String the description of the plugin | Improve this Doc View Source DonateLink A link to a donate page for the author of this plugin, if avaliable. Declaration public Uri DonateLink { get; } Property Value Type Description Uri the Uri of the author's donate page | Improve this Doc View Source Features The features this plugin requests. Declaration public IReadOnlyList<Feature> Features { get; } Property Value Type Description IReadOnlyList < Feature > the list of features requested by the plugin | Improve this Doc View Source File The file the plugin was loaded from. Declaration public FileInfo File { get; } Property Value Type Description FileInfo the file the plugin was loaded from | Improve this Doc View Source HVersion The version of the plugin. Declaration public Version HVersion { get; } Property Value Type Description Hive.Versioning.Version the version of the plugin | Improve this Doc View Source IconName The name of the resource in the plugin assembly containing the plugin's icon. Declaration public string IconName { get; } Property Value Type Description String the name of the plugin's icon | Improve this Doc View Source Id The ID of the plugin. Declaration public string Id { get; } Property Value Type Description String the ID of the plugin | Improve this Doc View Source IsBare Whether or not this metadata object represents a bare manifest. Declaration public bool IsBare { get; } Property Value Type Description Boolean true if it is bare, false otherwise | Improve this Doc View Source Name The human readable name of the plugin. Declaration public string Name { get; } Property Value Type Description String the name of the plugin | Improve this Doc View Source PluginHomeLink A link to this plugin's home page, if any. Declaration public Uri PluginHomeLink { get; } Property Value Type Description Uri the Uri of the plugin's home page | Improve this Doc View Source PluginSourceLink A link to this plugin's source code, if avaliable. Declaration public Uri PluginSourceLink { get; } Property Value Type Description Uri the Uri of the plugin's source code | Improve this Doc View Source PluginType The TypeDefinition for the main type of the plugin. Declaration public TypeDefinition PluginType { get; } Property Value Type Description Mono.Cecil.TypeDefinition the Cecil definition for the plugin main type | Improve this Doc View Source RuntimeOptions The RuntimeOptions that the plugin specified in its PluginAttribute . Declaration public RuntimeOptions RuntimeOptions { get; } Property Value Type Description RuntimeOptions | Improve this Doc View Source Version The version of the plugin. Declaration [Obsolete(\"Use HVersion instead.\")] public Version Version { get; } Property Value Type Description Version the version of the plugin Methods | Improve this Doc View Source ToString() Gets all of the metadata as a readable string. Declaration public override string ToString() Returns Type Description String the readable printable metadata string Overrides Object.ToString() Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Loader.Reason.html": {
    "href": "api/IPA.Loader.Reason.html",
    "title": "Enum Reason",
    "keywords": "Enum Reason An enum that represents several categories of ignore reasons that the loader may encounter. Namespace : IPA.Loader Assembly : IPA.Loader.dll Syntax public enum Reason Fields Name Description Conflict The plugin this reason is associated with conflicts with another already loaded plugin. Dependency The plugin this reason is associated with is missing a dependency. Duplicate The plugin this reason is associated with has the same ID as another plugin whose information was already loaded. Error An error was thrown either loading plugin information from disk, or when initializing the plugin. Feature The plugin this reason is associated with was denied from loading by a Feature that it marks. MissingFiles One of the files that a plugin declared in its manifest is missing. Released The plugin this reason is associated with was released for a game update, but is still considered present for the purposes of updating. Unsupported The plugin this reason is associated with is unsupported. See Also IgnoreReason Extension Methods ReflectionUtil.SetField<Reason, U>(String, U) ReflectionUtil.GetField<U, Reason>(String) ReflectionUtil.SetProperty<Reason, U>(String, U) ReflectionUtil.GetProperty<U, Reason>(String) ReflectionUtil.InvokeMethod<U, Reason>(String, Object[])"
  },
  "api/IPA.Loader.StateTransitionTransaction.html": {
    "href": "api/IPA.Loader.StateTransitionTransaction.html",
    "title": "Class StateTransitionTransaction",
    "keywords": "Class StateTransitionTransaction A class to represent a transaction for changing the state of loaded mods. Inheritance Object StateTransitionTransaction Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Loader Assembly : IPA.Loader.dll Syntax public sealed class StateTransitionTransaction : IDisposable Properties | Improve this Doc View Source DisabledPlugins Gets a list of plugins that are disabled according to this transaction's current state. Declaration public IEnumerable<PluginMetadata> DisabledPlugins { get; } Property Value Type Description IEnumerable < PluginMetadata > Exceptions Type Condition ObjectDisposedException if this object has been disposed | Improve this Doc View Source EnabledPlugins Gets a list of plugins that are enabled according to this transaction's current state. Declaration public IEnumerable<PluginMetadata> EnabledPlugins { get; } Property Value Type Description IEnumerable < PluginMetadata > Exceptions Type Condition ObjectDisposedException if this object has been disposed | Improve this Doc View Source HasStateChanged Gets whether or not the current state has changed. Declaration public bool HasStateChanged { get; } Property Value Type Description Boolean true if the current state of the transaction is different from its construction, false otherwise Exceptions Type Condition ObjectDisposedException if this object has been disposed | Improve this Doc View Source WillNeedRestart Gets whether or not a game restart will be necessary to fully apply this transaction. Declaration public bool WillNeedRestart { get; } Property Value Type Description Boolean true if any mod who's state is changed cannot be changed at runtime, false otherwise Exceptions Type Condition ObjectDisposedException if this object has been disposed Methods | Improve this Doc View Source Clone() Clones this transaction to be identical, but with unrelated underlying sets. Declaration public StateTransitionTransaction Clone() Returns Type Description StateTransitionTransaction the new StateTransitionTransaction Exceptions Type Condition ObjectDisposedException if this object has been disposed | Improve this Doc View Source Commit() Commits this transaction to actual state, enabling and disabling plugins as necessary. Declaration public Task Commit() Returns Type Description Task a Task which completes whenever all disables complete Remarks After this completes, this transaction will be disposed. The Task that is returned will error if any of the mods being disabled error. It is up to the caller to handle these in a sane way, like logging them. If nothing else, do something like this: // get your transaction... var complete = transaction.Commit(); await complete.ContinueWith(t => { if (t.IsFaulted) Logger.log.Error($\"Error disabling plugins: {t.Exception}\"); }); If you are running in a coroutine, you can use WaitForTask(Task) instead of await . If you are running on the Unity main thread, this will block until all enabling is done, and will return a task representing the disables. Otherwise, the task returned represents both, and will not complete until Unity has done (possibly) several updates, depending on the number of plugins being disabled, and the time they take. Exceptions Type Condition ObjectDisposedException if this object has been disposed InvalidOperationException if the plugins' state no longer matches this transaction's original state | Improve this Doc View Source Disable(PluginMetadata, Boolean) Disables a plugin in this transaction. Declaration public bool Disable(PluginMetadata meta, bool autoDependents = true) Parameters Type Name Description PluginMetadata meta the plugin to disable Boolean autoDependents whether or not to automatically disable all dependents of the plugin Returns Type Description Boolean true if the transaction's state was changed, false otherwise Exceptions Type Condition ObjectDisposedException if this object has been disposed ArgumentException if meta is not loadable See Also Disable(PluginMetadata, out IEnumerable<PluginMetadata>, Boolean) | Improve this Doc View Source Disable(PluginMetadata, out IEnumerable<PluginMetadata>, Boolean) Disables a plugin in this transaction. Declaration public bool Disable(PluginMetadata meta, out IEnumerable<PluginMetadata> enabledDependents, bool autoDependents = false) Parameters Type Name Description PluginMetadata meta the plugin to disable IEnumerable < PluginMetadata > enabledDependents null if successful, otherwise a set of plugins that need to be disabled first Boolean autoDependents whether or not to automatically disable all dependents of the plugin Returns Type Description Boolean true if the transaction's state was changed, false otherwise Remarks enabledDependents will only be set when autoDependents is false . Exceptions Type Condition ObjectDisposedException if this object has been disposed ArgumentException if meta is not loadable | Improve this Doc View Source Dispose() Disposes and discards this transaction without committing it. Declaration public void Dispose() | Improve this Doc View Source Enable(PluginMetadata, Boolean) Enables a plugin in this transaction. Declaration public bool Enable(PluginMetadata meta, bool autoDeps = true) Parameters Type Name Description PluginMetadata meta the plugin to enable Boolean autoDeps whether or not to automatically enable all dependencies of the plugin Returns Type Description Boolean true if the transaction's state was changed, false otherwise Exceptions Type Condition ObjectDisposedException if this object has been disposed ArgumentException if meta is not loadable See Also Enable(PluginMetadata, out IEnumerable<PluginMetadata>, Boolean) | Improve this Doc View Source Enable(PluginMetadata, out IEnumerable<PluginMetadata>, Boolean) Enables a plugin in this transaction. Declaration public bool Enable(PluginMetadata meta, out IEnumerable<PluginMetadata> disabledDeps, bool autoDeps = false) Parameters Type Name Description PluginMetadata meta the plugin to enable IEnumerable < PluginMetadata > disabledDeps null if successful, otherwise a set of plugins that need to be enabled first Boolean autoDeps whether or not to automatically enable all dependencies Returns Type Description Boolean true if the transaction's state was changed, false otherwise Remarks disabledDeps will only be set when autoDeps is false . Exceptions Type Condition ObjectDisposedException if this object has been disposed ArgumentException if meta is not loadable | Improve this Doc View Source IsDisabled(PluginMetadata) Checks if a plugin is disabled according to this transaction's current state. Declaration public bool IsDisabled(PluginMetadata meta) Parameters Type Name Description PluginMetadata meta the plugin to check Returns Type Description Boolean true if the plugin is disabled, false otherwise Remarks This should be roughly equivalent to DisabledPlugins.Contains(meta) , but more performant. This should also always return the inverse of IsEnabled(PluginMetadata) for valid plugins. Exceptions Type Condition ObjectDisposedException if this object has been disposed See Also DisabledPlugins IsEnabled(PluginMetadata) | Improve this Doc View Source IsEnabled(PluginMetadata) Checks if a plugin is enabled according to this transaction's current state. Declaration public bool IsEnabled(PluginMetadata meta) Parameters Type Name Description PluginMetadata meta the plugin to check Returns Type Description Boolean true if the plugin is enabled, false otherwise Remarks This should be roughly equivalent to EnabledPlugins.Contains(meta) , but more performant. This should also always return the inverse of IsDisabled(PluginMetadata) for valid plugins. Exceptions Type Condition ObjectDisposedException if this object has been disposed See Also EnabledPlugins IsDisabled(PluginMetadata) Implements System.IDisposable Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Logging.html": {
    "href": "api/IPA.Logging.html",
    "title": "",
    "keywords": "Classes Logger The logger base class. Provides the format for console logs. LoggerExtensions A class providing extensions for various loggers. LogPrinter The log printer's base class. StandardLogger The default (and standard) Logger implementation. Enums Logger.Level An enum specifying the level of the message. Resembles Syslog. Logger.LogLevel An enum providing log level filters."
  },
  "api/IPA.Logging.Logger.html": {
    "href": "api/IPA.Logging.Logger.html",
    "title": "Class Logger",
    "keywords": "Class Logger The logger base class. Provides the format for console logs. Inheritance Object Logger StandardLogger Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Logging Assembly : IPA.Loader.dll Syntax public abstract class Logger Properties | Improve this Doc View Source LogFormat The standard format for log messages. Declaration public static string LogFormat { get; protected set; } Property Value Type Description String the format for the standard loggers to print in Methods | Improve this Doc View Source Critical(Exception) Sends an exception as a critical message. Equivalent to Log(Level.Critical, e); Declaration public virtual void Critical(Exception e) Parameters Type Name Description Exception e the exception to log See Also Log(Logger.Level, Exception) | Improve this Doc View Source Critical(String) Sends a critical message. Equivalent to Log(Level.Critical, message); Declaration public virtual void Critical(string message) Parameters Type Name Description String message the message to log See Also Log(Logger.Level, String) | Improve this Doc View Source Debug(Exception) Sends an exception as a debug message. Equivalent to Log(Level.Debug, e); Declaration public virtual void Debug(Exception e) Parameters Type Name Description Exception e the exception to log See Also Log(Logger.Level, Exception) | Improve this Doc View Source Debug(String) Sends a debug message. Equivalent to Log(Level.Debug, message); Declaration public virtual void Debug(string message) Parameters Type Name Description String message the message to log See Also Log(Logger.Level, String) | Improve this Doc View Source Error(Exception) Sends an exception as an error message. Equivalent to Log(Level.Error, e); Declaration public virtual void Error(Exception e) Parameters Type Name Description Exception e the exception to log See Also Log(Logger.Level, Exception) | Improve this Doc View Source Error(String) Sends an error message. Equivalent to Log(Level.Error, message); Declaration public virtual void Error(string message) Parameters Type Name Description String message the message to log See Also Log(Logger.Level, String) | Improve this Doc View Source Info(Exception) Sends an exception as an info message. Equivalent to Log(Level.Info, e); Declaration public virtual void Info(Exception e) Parameters Type Name Description Exception e the exception to log See Also Log(Logger.Level, Exception) | Improve this Doc View Source Info(String) Sends an info message. Equivalent to Log(Level.Info, message); Declaration public virtual void Info(string message) Parameters Type Name Description String message the message to log See Also Log(Logger.Level, String) | Improve this Doc View Source Log(Logger.Level, Exception) A basic log function taking an exception to log. Declaration public virtual void Log(Logger.Level level, Exception e) Parameters Type Name Description Logger.Level level the level of the message Exception e the exception to log | Improve this Doc View Source Log(Logger.Level, String) A basic log function. Declaration public abstract void Log(Logger.Level level, string message) Parameters Type Name Description Logger.Level level the level of the message String message the message to log | Improve this Doc View Source Notice(Exception) Sends an exception as a notice message. Equivalent to Log(Level.Notice, e); Declaration public virtual void Notice(Exception e) Parameters Type Name Description Exception e the exception to log See Also Log(Logger.Level, Exception) | Improve this Doc View Source Notice(String) Sends a notice message. Equivalent to Log(Level.Notice, message); Declaration public virtual void Notice(string message) Parameters Type Name Description String message the message to log See Also Log(Logger.Level, String) | Improve this Doc View Source Trace(Exception) Sends an exception as a trace message. Equivalent to Log(Level.Trace, e); Declaration public virtual void Trace(Exception e) Parameters Type Name Description Exception e the exception to log See Also Log(Logger.Level, Exception) | Improve this Doc View Source Trace(String) Sends a trace message. Equivalent to Log(Level.Trace, message); Declaration public virtual void Trace(string message) Parameters Type Name Description String message the message to log See Also Log(Logger.Level, String) | Improve this Doc View Source Warn(Exception) Sends an exception as a warning message. Equivalent to Log(Level.Warning, e); Declaration public virtual void Warn(Exception e) Parameters Type Name Description Exception e the exception to log See Also Log(Logger.Level, Exception) | Improve this Doc View Source Warn(String) Sends a warning message. Equivalent to Log(Level.Warning, message); Declaration public virtual void Warn(string message) Parameters Type Name Description String message the message to log See Also Log(Logger.Level, String) Extension Methods LoggerExtensions.GetChildLogger(Logger, String) ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Logging.Logger.Level.html": {
    "href": "api/IPA.Logging.Logger.Level.html",
    "title": "Enum Logger.Level",
    "keywords": "Enum Logger.Level An enum specifying the level of the message. Resembles Syslog. Namespace : IPA.Logging Assembly : IPA.Loader.dll Syntax public enum Level : byte Fields Name Description Critical A critical error message. Debug A debug message. Error An error message. Info An informational message. None No associated level. These never get shown. Notice A notice. More significant than Info, but less than a warning. Trace A trace message. These are ignored incredibly early. Warning A warning message. Extension Methods ReflectionUtil.SetField<Logger.Level, U>(String, U) ReflectionUtil.GetField<U, Logger.Level>(String) ReflectionUtil.SetProperty<Logger.Level, U>(String, U) ReflectionUtil.GetProperty<U, Logger.Level>(String) ReflectionUtil.InvokeMethod<U, Logger.Level>(String, Object[])"
  },
  "api/IPA.Logging.Logger.LogLevel.html": {
    "href": "api/IPA.Logging.Logger.LogLevel.html",
    "title": "Enum Logger.LogLevel",
    "keywords": "Enum Logger.LogLevel An enum providing log level filters. Namespace : IPA.Logging Assembly : IPA.Loader.dll Syntax [Flags] public enum LogLevel : byte Fields Name Description All Shows all messages. CriticalOnly Only shows Critical messages. DebugOnly Only shows Debug messages. DebugUp Shows all messages debug and up. ErrorOnly Only shows Error messages. ErrorUp Shows all messages error and up. InfoOnly Only shows info messages. InfoUp Shows all messages info and up. None Allow no messages through. NoticeOnly Only shows notice messages. NoticeUp Shows all messages Notice and up. TraceOnly Only shows Trace messages. Undefined Used for when the level is undefined. WarningOnly Only shows Warning messages. WarningUp Shows all messages warning and up. Extension Methods ReflectionUtil.SetField<Logger.LogLevel, U>(String, U) ReflectionUtil.GetField<U, Logger.LogLevel>(String) ReflectionUtil.SetProperty<Logger.LogLevel, U>(String, U) ReflectionUtil.GetProperty<U, Logger.LogLevel>(String) ReflectionUtil.InvokeMethod<U, Logger.LogLevel>(String, Object[])"
  },
  "api/IPA.Logging.LoggerExtensions.html": {
    "href": "api/IPA.Logging.LoggerExtensions.html",
    "title": "Class LoggerExtensions",
    "keywords": "Class LoggerExtensions A class providing extensions for various loggers. Inheritance Object LoggerExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Logging Assembly : IPA.Loader.dll Syntax public static class LoggerExtensions Methods | Improve this Doc View Source GetChildLogger(Logger, String) Gets a child logger, if supported. Currently the only defined and supported logger is StandardLogger , and most plugins will only ever receive this anyway. Declaration public static Logger GetChildLogger(this Logger logger, string name) Parameters Type Name Description Logger logger the parent Logger String name the name of the child Returns Type Description Logger the child logger"
  },
  "api/IPA.Logging.LogPrinter.html": {
    "href": "api/IPA.Logging.LogPrinter.html",
    "title": "Class LogPrinter",
    "keywords": "Class LogPrinter The log printer's base class. Inheritance Object LogPrinter ColoredConsolePrinter ColorlessConsolePrinter GZFilePrinter Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Logging Assembly : IPA.Loader.dll Syntax public abstract class LogPrinter Properties | Improve this Doc View Source Filter Provides a filter for which log levels to allow through. Declaration public abstract Logger.LogLevel Filter { get; set; } Property Value Type Description Logger.LogLevel the level to filter to Methods | Improve this Doc View Source EndPrint() Called after the last print in a group. May be called multiple times. Use this to dispose file handles and the like. Declaration public virtual void EndPrint() | Improve this Doc View Source Print(Logger.Level, DateTime, String, String) Prints a provided message from a given log at the specified time. Declaration public abstract void Print(Logger.Level level, DateTime time, string logName, string message) Parameters Type Name Description Logger.Level level the log level DateTime time the time the message was composed String logName the name of the log that created this message String message the message | Improve this Doc View Source StartPrint() Called before the first print in a group. May be called multiple times. Use this to create file handles and the like. Declaration public virtual void StartPrint() Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Logging.Printers.ColoredConsolePrinter.html": {
    "href": "api/IPA.Logging.Printers.ColoredConsolePrinter.html",
    "title": "Class ColoredConsolePrinter",
    "keywords": "Class ColoredConsolePrinter Prints a pretty message to the console. Inheritance Object LogPrinter ColoredConsolePrinter Inherited Members LogPrinter.StartPrint() LogPrinter.EndPrint() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Logging.Printers Assembly : IPA.Loader.dll Syntax public class ColoredConsolePrinter : LogPrinter Constructors | Improve this Doc View Source ColoredConsolePrinter() Declaration public ColoredConsolePrinter() | Improve this Doc View Source ColoredConsolePrinter(Boolean) Declaration public ColoredConsolePrinter(bool darkenMessages) Parameters Type Name Description Boolean darkenMessages Properties | Improve this Doc View Source Color The color to print messages as. Declaration public ConsoleColor Color { get; set; } Property Value Type Description ConsoleColor the color to print this message as | Improve this Doc View Source Filter A filter for this specific printer. Declaration public override Logger.LogLevel Filter { get; set; } Property Value Type Description Logger.LogLevel the filter to apply to this printer Overrides LogPrinter.Filter Methods | Improve this Doc View Source Print(Logger.Level, DateTime, String, String) Prints an entry to the console window. Declaration public override void Print(Logger.Level level, DateTime time, string logName, string message) Parameters Type Name Description Logger.Level level the Logger.Level of the message DateTime time the DateTime the message was recorded at String logName the name of the log that sent the message String message the message to print Overrides LogPrinter.Print(Logger.Level, DateTime, String, String) Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Logging.Printers.ColorlessConsolePrinter.html": {
    "href": "api/IPA.Logging.Printers.ColorlessConsolePrinter.html",
    "title": "Class ColorlessConsolePrinter",
    "keywords": "Class ColorlessConsolePrinter A colorless version of ColoredConsolePrinter , that indiscriminantly prints to standard out. Inheritance Object LogPrinter ColorlessConsolePrinter Inherited Members LogPrinter.StartPrint() LogPrinter.EndPrint() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Logging.Printers Assembly : IPA.Loader.dll Syntax public class ColorlessConsolePrinter : LogPrinter Properties | Improve this Doc View Source Filter A filter for this specific printer. Declaration public override Logger.LogLevel Filter { get; set; } Property Value Type Description Logger.LogLevel the filter level for this printer Overrides LogPrinter.Filter Methods | Improve this Doc View Source Print(Logger.Level, DateTime, String, String) Prints an entry to standard out. Declaration public override void Print(Logger.Level level, DateTime time, string logName, string message) Parameters Type Name Description Logger.Level level the Logger.Level of the message DateTime time the DateTime the message was recorded at String logName the name of the log that sent the message String message the message to print Overrides LogPrinter.Print(Logger.Level, DateTime, String, String) Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Logging.Printers.GlobalLogFilePrinter.html": {
    "href": "api/IPA.Logging.Printers.GlobalLogFilePrinter.html",
    "title": "Class GlobalLogFilePrinter",
    "keywords": "Class GlobalLogFilePrinter A printer for all messages to a unified log location. Inheritance Object LogPrinter GZFilePrinter GlobalLogFilePrinter Implements IDisposable Inherited Members GZFilePrinter.FileWriter GZFilePrinter.StartPrint() GZFilePrinter.EndPrint() GZFilePrinter.Dispose() GZFilePrinter.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Logging.Printers Assembly : IPA.Loader.dll Syntax public class GlobalLogFilePrinter : GZFilePrinter, IDisposable Properties | Improve this Doc View Source Filter Provides a filter for this specific printer. Declaration public override Logger.LogLevel Filter { get; set; } Property Value Type Description Logger.LogLevel the filter level for this printer Overrides LogPrinter.Filter Methods | Improve this Doc View Source GetFileInfo() Gets the FileInfo for the target file. Declaration protected override FileInfo GetFileInfo() Returns Type Description FileInfo the target file to write to Overrides GZFilePrinter.GetFileInfo() | Improve this Doc View Source Print(Logger.Level, DateTime, String, String) Prints an entry to the associated file. Declaration public override void Print(Logger.Level level, DateTime time, string logName, string message) Parameters Type Name Description Logger.Level level the Logger.Level of the message DateTime time the DateTime the message was recorded at String logName the name of the log that sent the message String message the message to print Overrides LogPrinter.Print(Logger.Level, DateTime, String, String) Implements System.IDisposable Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Logging.Printers.GZFilePrinter.html": {
    "href": "api/IPA.Logging.Printers.GZFilePrinter.html",
    "title": "Class GZFilePrinter",
    "keywords": "Class GZFilePrinter A LogPrinter abstract class that provides the utilities to write to a GZip file. Inheritance Object LogPrinter GZFilePrinter GlobalLogFilePrinter PluginLogFilePrinter PluginSubLogPrinter Implements IDisposable Inherited Members LogPrinter.Filter LogPrinter.Print(Logger.Level, DateTime, String, String) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Logging.Printers Assembly : IPA.Loader.dll Syntax public abstract class GZFilePrinter : LogPrinter, IDisposable Fields | Improve this Doc View Source FileWriter The StreamWriter that writes to the GZip file. Declaration protected StreamWriter FileWriter Field Value Type Description StreamWriter the writer to the underlying filestream Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Disposes the file printer. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing does nothing | Improve this Doc View Source EndPrint() Called at the end of any print session. Declaration public sealed override void EndPrint() Overrides LogPrinter.EndPrint() | Improve this Doc View Source GetFileInfo() Gets the FileInfo for the file to write to. Declaration protected abstract FileInfo GetFileInfo() Returns Type Description FileInfo the file to write to | Improve this Doc View Source StartPrint() Called at the start of any print session. Declaration public sealed override void StartPrint() Overrides LogPrinter.StartPrint() Implements System.IDisposable Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Logging.Printers.html": {
    "href": "api/IPA.Logging.Printers.html",
    "title": "",
    "keywords": "Classes ColoredConsolePrinter Prints a pretty message to the console. ColorlessConsolePrinter A colorless version of ColoredConsolePrinter , that indiscriminantly prints to standard out. GlobalLogFilePrinter A printer for all messages to a unified log location. GZFilePrinter A LogPrinter abstract class that provides the utilities to write to a GZip file. PluginLogFilePrinter Prints log messages to the file specified by the name. PluginSubLogPrinter Prints log messages to the file specified by the name."
  },
  "api/IPA.Logging.Printers.PluginLogFilePrinter.html": {
    "href": "api/IPA.Logging.Printers.PluginLogFilePrinter.html",
    "title": "Class PluginLogFilePrinter",
    "keywords": "Class PluginLogFilePrinter Prints log messages to the file specified by the name. Inheritance Object LogPrinter GZFilePrinter PluginLogFilePrinter Implements IDisposable Inherited Members GZFilePrinter.FileWriter GZFilePrinter.StartPrint() GZFilePrinter.EndPrint() GZFilePrinter.Dispose() GZFilePrinter.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Logging.Printers Assembly : IPA.Loader.dll Syntax public class PluginLogFilePrinter : GZFilePrinter, IDisposable Constructors | Improve this Doc View Source PluginLogFilePrinter(String) Creates a new printer with the given name. Declaration public PluginLogFilePrinter(string name) Parameters Type Name Description String name the name of the logger Properties | Improve this Doc View Source Filter Provides a filter for this specific printer. Declaration public override Logger.LogLevel Filter { get; set; } Property Value Type Description Logger.LogLevel the filter level for this printer Overrides LogPrinter.Filter Methods | Improve this Doc View Source GetFileInfo() Gets the FileInfo for the target file. Declaration protected override FileInfo GetFileInfo() Returns Type Description FileInfo the file to write to Overrides GZFilePrinter.GetFileInfo() | Improve this Doc View Source Print(Logger.Level, DateTime, String, String) Prints an entry to the associated file. Declaration public override void Print(Logger.Level level, DateTime time, string logName, string message) Parameters Type Name Description Logger.Level level the Logger.Level of the message DateTime time the DateTime the message was recorded at String logName the name of the log that sent the message String message the message to print Overrides LogPrinter.Print(Logger.Level, DateTime, String, String) Implements System.IDisposable Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Logging.Printers.PluginSubLogPrinter.html": {
    "href": "api/IPA.Logging.Printers.PluginSubLogPrinter.html",
    "title": "Class PluginSubLogPrinter",
    "keywords": "Class PluginSubLogPrinter Prints log messages to the file specified by the name. Inheritance Object LogPrinter GZFilePrinter PluginSubLogPrinter Implements IDisposable Inherited Members GZFilePrinter.FileWriter GZFilePrinter.StartPrint() GZFilePrinter.EndPrint() GZFilePrinter.Dispose() GZFilePrinter.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Logging.Printers Assembly : IPA.Loader.dll Syntax public class PluginSubLogPrinter : GZFilePrinter, IDisposable Constructors | Improve this Doc View Source PluginSubLogPrinter(String, String) Creates a new printer with the given name. Declaration public PluginSubLogPrinter(string mainname, string name) Parameters Type Name Description String mainname the name of the main logger String name the name of the logger Properties | Improve this Doc View Source Filter Provides a filter for this specific printer. Declaration public override Logger.LogLevel Filter { get; set; } Property Value Type Description Logger.LogLevel the filter for this printer Overrides LogPrinter.Filter Methods | Improve this Doc View Source GetFileInfo() Gets the FileInfo for the target file. Declaration protected override FileInfo GetFileInfo() Returns Type Description FileInfo the file to write to Overrides GZFilePrinter.GetFileInfo() | Improve this Doc View Source Print(Logger.Level, DateTime, String, String) Prints an entry to the associated file. Declaration public override void Print(Logger.Level level, DateTime time, string logName, string message) Parameters Type Name Description Logger.Level level the Logger.Level of the message DateTime time the DateTime the message was recorded at String logName the name of the log that sent the message String message the message to print Overrides LogPrinter.Print(Logger.Level, DateTime, String, String) Implements System.IDisposable Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Logging.StandardLogger.html": {
    "href": "api/IPA.Logging.StandardLogger.html",
    "title": "Class StandardLogger",
    "keywords": "Class StandardLogger The default (and standard) Logger implementation. Inheritance Object Logger StandardLogger Inherited Members Logger.LogFormat Logger.Log(Logger.Level, Exception) Logger.Trace(String) Logger.Trace(Exception) Logger.Debug(Exception) Logger.Info(String) Logger.Info(Exception) Logger.Notice(String) Logger.Notice(Exception) Logger.Warn(String) Logger.Warn(Exception) Logger.Error(String) Logger.Error(Exception) Logger.Critical(String) Logger.Critical(Exception) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Logging Assembly : IPA.Loader.dll Syntax public class StandardLogger : Logger Remarks StandardLogger uses a multi-threaded approach to logging. All actual I/O is done on another thread, where all messaged are guaranteed to be logged in the order they appeared. It is up to the printers to format them. This logger supports child loggers. Use GetChildLogger(Logger, String) to safely get a child. The modification of printers on a parent are reflected down the chain. Properties | Improve this Doc View Source ConsoleWriter The TextWriter for writing directly to the console window, or stdout if no window open. Declaration public static TextWriter ConsoleWriter { get; } Property Value Type Description TextWriter a TextWriter for the current primary text output | Improve this Doc View Source IsOnLoggerThread Whether or not the calling thread is the logger thread. Declaration public static bool IsOnLoggerThread { get; } Property Value Type Description Boolean true if the current thread is the logger thread, false otherwise | Improve this Doc View Source PrintFilter All levels defined by this filter will be sent to loggers. All others will be ignored. Declaration public static Logger.LogLevel PrintFilter { get; } Property Value Type Description Logger.LogLevel the global filter level Methods | Improve this Doc View Source AddPrinter(LogPrinter) Adds a log printer to the logger. Declaration public void AddPrinter(LogPrinter printer) Parameters Type Name Description LogPrinter printer the printer to add | Improve this Doc View Source Debug(String) An override to Debug(String) which shows the method that called it. Declaration public override void Debug(string message) Parameters Type Name Description String message the message to log Overrides Logger.Debug(String) See Also Log ( Logger.Level , String ) | Improve this Doc View Source Log(Logger.Level, String) Logs a specific message at a given level. Declaration public override void Log(Logger.Level level, string message) Parameters Type Name Description Logger.Level level the message level String message the message to log Overrides Logger.Log(Logger.Level, String) Extension Methods LoggerExtensions.GetChildLogger(Logger, String) ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.NoEnableDisableAttribute.html": {
    "href": "api/IPA.NoEnableDisableAttribute.html",
    "title": "Class NoEnableDisableAttribute",
    "keywords": "Class NoEnableDisableAttribute Indicates that the applied plugin class does not need OnEnableAttribute or OnDisableAttribute methods. Inheritance Object Attribute NoEnableDisableAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : IPA Assembly : IPA.Loader.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)] public sealed class NoEnableDisableAttribute : Attribute, _Attribute Remarks This is typically only the case when some other utility mod handles their lifecycle for them, such as with SiraUtil and Zenject. Implements System.Runtime.InteropServices._Attribute Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[]) See Also OnEnableAttribute OnDisableAttribute"
  },
  "api/IPA.Old.html": {
    "href": "api/IPA.Old.html",
    "title": "",
    "keywords": "Interfaces IEnhancedPlugin An enhanced version of the standard IPA plugin. IPlugin Interface for generic Illusion unity plugins. Every class that implements this will be loaded if the DLL is placed in Plugins."
  },
  "api/IPA.Old.IEnhancedPlugin.html": {
    "href": "api/IPA.Old.IEnhancedPlugin.html",
    "title": "Interface IEnhancedPlugin",
    "keywords": "Interface IEnhancedPlugin An enhanced version of the standard IPA plugin. Inherited Members IPlugin.Name IPlugin.Version IPlugin.OnApplicationStart() IPlugin.OnApplicationQuit() IPlugin.OnLevelWasLoaded(Int32) IPlugin.OnLevelWasInitialized(Int32) IPlugin.OnUpdate() IPlugin.OnFixedUpdate() Namespace : IPA.Old Assembly : IPA.Loader.dll Syntax [Obsolete(\"When building plugins for Beat Saber, use IPA.IEnhancedPlugin\")] public interface IEnhancedPlugin : IPlugin Properties | Improve this Doc View Source Filter Gets a list of executables this plugin should be executed on (without the file ending) Declaration string[] Filter { get; } Property Value Type Description String [] Examples { \"PlayClub\", \"PlayClubStudio\" } Methods | Improve this Doc View Source OnLateUpdate() Called after Update. Declaration void OnLateUpdate() Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Old.IPlugin.html": {
    "href": "api/IPA.Old.IPlugin.html",
    "title": "Interface IPlugin",
    "keywords": "Interface IPlugin Interface for generic Illusion unity plugins. Every class that implements this will be loaded if the DLL is placed in Plugins. Namespace : IPA.Old Assembly : IPA.Loader.dll Syntax [Obsolete(\"When building plugins for Beat Saber, use the plugin attributes starting with PluginAttribute\")] public interface IPlugin Properties | Improve this Doc View Source Name Gets the name of the plugin. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source Version Gets the version of the plugin. Declaration string Version { get; } Property Value Type Description String Methods | Improve this Doc View Source OnApplicationQuit() Gets invoked when the application is closed. Declaration void OnApplicationQuit() | Improve this Doc View Source OnApplicationStart() Gets invoked when the application is started. Declaration void OnApplicationStart() | Improve this Doc View Source OnFixedUpdate() Gets invoked on ever physics update. Declaration void OnFixedUpdate() | Improve this Doc View Source OnLevelWasInitialized(Int32) Gets invoked after the first update cycle after a level was loaded. Declaration void OnLevelWasInitialized(int level) Parameters Type Name Description Int32 level | Improve this Doc View Source OnLevelWasLoaded(Int32) Gets invoked whenever a level is loaded. Declaration void OnLevelWasLoaded(int level) Parameters Type Name Description Int32 level | Improve this Doc View Source OnUpdate() Gets invoked on every graphic update. Declaration void OnUpdate() Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.OnDisableAttribute.html": {
    "href": "api/IPA.OnDisableAttribute.html",
    "title": "Class OnDisableAttribute",
    "keywords": "Class OnDisableAttribute Indicates that the target method should be called when the plugin is disabled. Inheritance Object Attribute OnDisableAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : IPA Assembly : IPA.Loader.dll Syntax [AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = false)] public sealed class OnDisableAttribute : Attribute, _Attribute Remarks This attribute is interchangable with OnExitAttribute , and is treated identically. They are seperate to allow plugin code to more clearly describe the intent of the methods. Typically, this will be used when the RuntimeOptions parameter of the plugins's PluginAttribute is DynamicInit . The method marked by this attribute will always be called from the Unity main thread. Implements System.Runtime.InteropServices._Attribute Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[]) See Also PluginAttribute OnExitAttribute"
  },
  "api/IPA.OnEnableAttribute.html": {
    "href": "api/IPA.OnEnableAttribute.html",
    "title": "Class OnEnableAttribute",
    "keywords": "Class OnEnableAttribute Indicates that the target method should be called when the plugin is enabled. Inheritance Object Attribute OnEnableAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : IPA Assembly : IPA.Loader.dll Syntax [AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = false)] public sealed class OnEnableAttribute : Attribute, _Attribute Remarks This attribute is interchangable with OnStartAttribute , and is treated identically. They are seperate to allow plugin code to more clearly describe the intent of the methods. Typically, this will be used when the RuntimeOptions parameter of the plugins's PluginAttribute is DynamicInit . The method marked by this attribute will always be called from the Unity main thread. Implements System.Runtime.InteropServices._Attribute Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[]) See Also PluginAttribute OnStartAttribute"
  },
  "api/IPA.OnExitAttribute.html": {
    "href": "api/IPA.OnExitAttribute.html",
    "title": "Class OnExitAttribute",
    "keywords": "Class OnExitAttribute Indicates that the target method should be called when the game exits. Inheritance Object Attribute OnExitAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : IPA Assembly : IPA.Loader.dll Syntax [AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = false)] public sealed class OnExitAttribute : Attribute, _Attribute Remarks This attribute is interchangable with OnDisableAttribute , and is treated identically. They are seperate to allow plugin code to more clearly describe the intent of the methods. Typically, this will be used when the RuntimeOptions parameter of the plugins's PluginAttribute is SingleStartInit . The method marked by this attribute will always be called from the Unity main thread. Implements System.Runtime.InteropServices._Attribute Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[]) See Also PluginAttribute OnDisableAttribute"
  },
  "api/IPA.OnStartAttribute.html": {
    "href": "api/IPA.OnStartAttribute.html",
    "title": "Class OnStartAttribute",
    "keywords": "Class OnStartAttribute Indicates that the target method should be called when the game starts. Inheritance Object Attribute OnStartAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : IPA Assembly : IPA.Loader.dll Syntax [AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = false)] public sealed class OnStartAttribute : Attribute, _Attribute Remarks This attribute is interchangable with OnEnableAttribute , and is treated identically. They are seperate to allow plugin code to more clearly describe the intent of the methods. Typically, this will be used when the RuntimeOptions parameter of the plugins's PluginAttribute is SingleStartInit . The method marked by this attribute will always be called from the Unity main thread. Implements System.Runtime.InteropServices._Attribute Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[]) See Also PluginAttribute OnEnableAttribute"
  },
  "api/IPA.PluginAttribute.html": {
    "href": "api/IPA.PluginAttribute.html",
    "title": "Class PluginAttribute",
    "keywords": "Class PluginAttribute Marks a class as being a BSIPA plugin. Inheritance Object Attribute PluginAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : IPA Assembly : IPA.Loader.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)] public sealed class PluginAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source PluginAttribute(RuntimeOptions) Initializes a PluginAttribute with the given RuntimeOptions to indicate the runtime capabilities of the plugin. Declaration public PluginAttribute(RuntimeOptions runtimeOptions) Parameters Type Name Description RuntimeOptions runtimeOptions the options to use for this plugin Properties | Improve this Doc View Source RuntimeOptions The RuntimeOptions passed into the constructor of this attribute. Declaration public RuntimeOptions RuntimeOptions { get; } Property Value Type Description RuntimeOptions Implements System.Runtime.InteropServices._Attribute Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[]) See Also InitAttribute OnEnableAttribute OnDisableAttribute OnStartAttribute OnExitAttribute"
  },
  "api/IPA.RuntimeOptions.html": {
    "href": "api/IPA.RuntimeOptions.html",
    "title": "Enum RuntimeOptions",
    "keywords": "Enum RuntimeOptions Options that a plugin must specify to describe how it expects to be run. Namespace : IPA Assembly : IPA.Loader.dll Syntax public enum RuntimeOptions Fields Name Description DynamicInit Indicates that this plugin supports runtime enabling and disabling. When this is set, the plugin may be disabled at reasonable points during runtime. As with SingleStartInit , it will be initialized and enabled with the game if it is enabled on startup, and disabled with the game if it is enabled on shutdown. When a plugin with this set is enabled mid-game, the first time it is enabled, its initialization methods will be called, then its enable methods. All subsequent enables will NOT re-initialize, however the enable methods will be called. When a plugin with this set is disabled mid-game, the plugin instance will NOT be destroyed, and will instead be re-used for subsequent enables. The plugin is expected to handle this gracefully, and behave in a way that makes sense. SingleStartInit Indicates that this plugin expects to be initialized and enabled with the game, and disabled with the game. With this option set, whether or not the plugin is disabled during a given run is constant for that entire run. See Also PluginAttribute InitAttribute OnEnableAttribute OnDisableAttribute OnStartAttribute OnExitAttribute Extension Methods ReflectionUtil.SetField<RuntimeOptions, U>(String, U) ReflectionUtil.GetField<U, RuntimeOptions>(String) ReflectionUtil.SetProperty<RuntimeOptions, U>(String, U) ReflectionUtil.GetProperty<U, RuntimeOptions>(String) ReflectionUtil.InvokeMethod<U, RuntimeOptions>(String, Object[])"
  },
  "api/IPA.Utilities.AlmostVersion.html": {
    "href": "api/IPA.Utilities.AlmostVersion.html",
    "title": "Class AlmostVersion",
    "keywords": "Class AlmostVersion A type that wraps Hive.Versioning.Version so that the string of the version is stored when the string is not a valid Hive.Versioning.Version . Inheritance Object AlmostVersion Implements IComparable < AlmostVersion > IComparable < Hive.Versioning.Version > IComparable < Version > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : IPA.Utilities Assembly : IPA.Loader.dll Syntax public class AlmostVersion : IComparable<AlmostVersion>, IComparable<Version>, IComparable<Version> Constructors | Improve this Doc View Source AlmostVersion(Version) Creates an AlmostVersion from the Hive.Versioning.Version provided in ver . Declaration public AlmostVersion(Version ver) Parameters Type Name Description Hive.Versioning.Version ver the Hive.Versioning.Version to store | Improve this Doc View Source AlmostVersion(Version) Creates an AlmostVersion from the Version provided in ver . Declaration [Obsolete(\"Use Hive.Versioning.Version constructor instead.\")] public AlmostVersion(Version ver) Parameters Type Name Description Version ver the Version to store | Improve this Doc View Source AlmostVersion(String) Creates a new AlmostVersion with the version string provided in vertext . Declaration public AlmostVersion(string vertext) Parameters Type Name Description String vertext the version string to store | Improve this Doc View Source AlmostVersion(String, AlmostVersion) Creates a new AlmostVersion from the version string in vertext stored the same way as the AlmostVersion passed in copyMode . Declaration public AlmostVersion(string vertext, AlmostVersion copyMode) Parameters Type Name Description String vertext the text to parse as an AlmostVersion AlmostVersion copyMode an AlmostVersion to copy the storage mode of | Improve this Doc View Source AlmostVersion(String, AlmostVersion.StoredAs) Creates an AlmostVersion from the version string in vertext stored using the storage mode specified in mode . Declaration public AlmostVersion(string vertext, AlmostVersion.StoredAs mode) Parameters Type Name Description String vertext the text to parse as an AlmostVersion AlmostVersion.StoredAs mode the storage mode to store the version in Properties | Improve this Doc View Source SemverValue The value of the AlmostVersion if it was stored as a Hive.Versioning.Version . Declaration public Version SemverValue { get; } Property Value Type Description Hive.Versioning.Version the stored value as a Hive.Versioning.Version , or null if not stored as a version. | Improve this Doc View Source StorageMode The way the value is stored, whether it be as a Hive.Versioning.Version or a String . Declaration public AlmostVersion.StoredAs StorageMode { get; } Property Value Type Description AlmostVersion.StoredAs the storage mode used to store this value | Improve this Doc View Source StringValue The value of the AlmostVersion if it was stored as a String . Declaration public string StringValue { get; } Property Value Type Description String the stored value as a String , or null if not stored as a string. Methods | Improve this Doc View Source CompareTo(Version) Compares langword_csharp_this to the Hive.Versioning.Version in other using Hive.Versioning.Version.CompareTo(Hive.Versioning.Version) . Declaration public int CompareTo(Version other) Parameters Type Name Description Hive.Versioning.Version other the Hive.Versioning.Version to compare to Returns Type Description Int32 less than 0 if other is considered bigger than langword_csharp_this , 0 if equal, and greater than zero if smaller Remarks The storage method of langword_csharp_this must be SemVer , else an InvalidOperationException will be thrown. See Also CompareTo(AlmostVersion) | Improve this Doc View Source CompareTo(AlmostVersion) Compares langword_csharp_this to the AlmostVersion in other using Hive.Versioning.Version.CompareTo(Hive.Versioning.Version) or CompareTo(String) , depending on the current store. Declaration public int CompareTo(AlmostVersion other) Parameters Type Name Description AlmostVersion other the AlmostVersion to compare to Returns Type Description Int32 less than 0 if other is considered bigger than langword_csharp_this , 0 if equal, and greater than zero if smaller Remarks The storage methods of the two objects must be the same, or this will throw an InvalidOperationException . See Also CompareTo(Version) | Improve this Doc View Source CompareTo(Version) Compares langword_csharp_this to the Version in other using Hive.Versioning.Version.CompareTo(Hive.Versioning.Version) . Declaration [Obsolete(\"Use the Hive.Versioning.Version overload instead.\")] public int CompareTo(Version other) Parameters Type Name Description Version other the Version to compare to Returns Type Description Int32 less than 0 if other is considered bigger than langword_csharp_this , 0 if equal, and greater than zero if smaller Remarks The storage method of langword_csharp_this must be SemVer , else an InvalidOperationException will be thrown. See Also CompareTo(AlmostVersion) | Improve this Doc View Source Equals(Object) Performs a strict equality check between langword_csharp_this and obj . Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj the object to compare to Returns Type Description Boolean true if they are equal, false otherwise Overrides Object.Equals(Object) Remarks This may return false where Equality(AlmostVersion, AlmostVersion) returns true See Also Equals ( Object ) | Improve this Doc View Source GetHashCode() Default generated hash code function generated by VS. Declaration public override int GetHashCode() Returns Type Description Int32 a value unique to each object, except those that are considered equal by Equals(Object) Overrides Object.GetHashCode() See Also GetHashCode () | Improve this Doc View Source ToString() Gets a string representation of the current version. If the value is stored as a string, this returns it. If it is stored as a Hive.Versioning.Version , it is equivalent to calling Hive.Versioning.Version.ToString . Declaration public override string ToString() Returns Type Description String a string representation of the current version Overrides Object.ToString() See Also ToString () Operators | Improve this Doc View Source Equality(AlmostVersion, AlmostVersion) Compares two versions, only taking into account the numeric part of the version if they are stored as Hive.Versioning.Version s, or strict equality if they are stored as String s. Declaration public static bool operator ==(AlmostVersion l, AlmostVersion r) Parameters Type Name Description AlmostVersion l the first value to compare AlmostVersion r the second value to compare Returns Type Description Boolean true if they are mostly equal, false otherwise Remarks This is a looser equality than Equals(Object) , meaning that this may return true where Equals(Object) does not. See Also Equals(Object) | Improve this Doc View Source GreaterThan(AlmostVersion, AlmostVersion) Declaration public static bool operator>(AlmostVersion left, AlmostVersion right) Parameters Type Name Description AlmostVersion left AlmostVersion right Returns Type Description Boolean | Improve this Doc View Source GreaterThanOrEqual(AlmostVersion, AlmostVersion) Declaration public static bool operator >=(AlmostVersion left, AlmostVersion right) Parameters Type Name Description AlmostVersion left AlmostVersion right Returns Type Description Boolean | Improve this Doc View Source Implicit(Version to AlmostVersion) Implicitly converts a Version to AlmostVersion using AlmostVersion(Version) . Declaration public static implicit operator AlmostVersion(Version ver) Parameters Type Name Description Hive.Versioning.Version ver the Version to convert Returns Type Description AlmostVersion See Also AlmostVersion(Version) | Improve this Doc View Source Implicit(AlmostVersion to Version) Implicitly converts an AlmostVersion to Version , if applicable, using SemverValue . If not applicable, returns null Declaration public static implicit operator Version(AlmostVersion av) Parameters Type Name Description AlmostVersion av the AlmostVersion to convert to a Version Returns Type Description Hive.Versioning.Version See Also SemverValue | Improve this Doc View Source Implicit(AlmostVersion to Version) Implicitly converts an AlmostVersion to Version , if applicable, using SemverValue . If not applicable, returns null Declaration [Obsolete(\"Use Hive.Versioning.Version instead of SemVer.Version\")] public static implicit operator Version(AlmostVersion av) Parameters Type Name Description AlmostVersion av the AlmostVersion to convert to a Version Returns Type Description Version See Also SemverValue | Improve this Doc View Source Implicit(Version to AlmostVersion) Implicitly converts a Version to AlmostVersion using AlmostVersion(Version) . Declaration [Obsolete(\"Use Hive.Versioning.Version instead of SemVer.Version\")] public static implicit operator AlmostVersion(Version ver) Parameters Type Name Description Version ver the Version to convert Returns Type Description AlmostVersion See Also AlmostVersion(Version) | Improve this Doc View Source Inequality(AlmostVersion, AlmostVersion) The opposite of Equality(AlmostVersion, AlmostVersion) . Equivalent to !(l == r) . Declaration public static bool operator !=(AlmostVersion l, AlmostVersion r) Parameters Type Name Description AlmostVersion l the first value to compare AlmostVersion r the second value to compare Returns Type Description Boolean true if they are not mostly equal, false otherwise See Also Equality(AlmostVersion, AlmostVersion) | Improve this Doc View Source LessThan(AlmostVersion, AlmostVersion) Declaration public static bool operator <(AlmostVersion left, AlmostVersion right) Parameters Type Name Description AlmostVersion left AlmostVersion right Returns Type Description Boolean | Improve this Doc View Source LessThanOrEqual(AlmostVersion, AlmostVersion) Declaration public static bool operator <=(AlmostVersion left, AlmostVersion right) Parameters Type Name Description AlmostVersion left AlmostVersion right Returns Type Description Boolean Implements System.IComparable<T> System.IComparable<T> System.IComparable<T> Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Utilities.AlmostVersion.StoredAs.html": {
    "href": "api/IPA.Utilities.AlmostVersion.StoredAs.html",
    "title": "Enum AlmostVersion.StoredAs",
    "keywords": "Enum AlmostVersion.StoredAs Represents a storage type of either parsed Hive.Versioning.Version object or raw String . Namespace : IPA.Utilities Assembly : IPA.Loader.dll Syntax public enum StoredAs Fields Name Description SemVer The version was stored as a Version . String The version was stored as a String . Extension Methods ReflectionUtil.SetField<AlmostVersion.StoredAs, U>(String, U) ReflectionUtil.GetField<U, AlmostVersion.StoredAs>(String) ReflectionUtil.SetProperty<AlmostVersion.StoredAs, U>(String, U) ReflectionUtil.GetProperty<U, AlmostVersion.StoredAs>(String) ReflectionUtil.InvokeMethod<U, AlmostVersion.StoredAs>(String, Object[])"
  },
  "api/IPA.Utilities.AlmostVersionConverter.html": {
    "href": "api/IPA.Utilities.AlmostVersionConverter.html",
    "title": "Class AlmostVersionConverter",
    "keywords": "Class AlmostVersionConverter A ValueConverter<T> for AlmostVersion s. Inheritance Object ValueConverter < AlmostVersion > AlmostVersionConverter Implements IValueConverter Inherited Members ValueConverter<AlmostVersion>.IValueConverter.ToValue(Object, Object) ValueConverter<AlmostVersion>.IValueConverter.FromValue(Value, Object) ValueConverter<AlmostVersion>.IValueConverter.Type Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Utilities Assembly : IPA.Loader.dll Syntax public sealed class AlmostVersionConverter : ValueConverter<AlmostVersion>, IValueConverter Methods | Improve this Doc View Source FromValue(Value, Object) Converts a Text node into an AlmostVersion . Declaration public override AlmostVersion FromValue(Value value, object parent) Parameters Type Name Description Value value the Text node to convert Object parent the owner of the new object Returns Type Description AlmostVersion Overrides IPA.Config.Stores.ValueConverter<IPA.Utilities.AlmostVersion>.FromValue(IPA.Config.Data.Value, System.Object) | Improve this Doc View Source ToValue(AlmostVersion, Object) Converts an AlmostVersion to a Text node. Declaration public override Value ToValue(AlmostVersion obj, object parent) Parameters Type Name Description AlmostVersion obj the AlmostVersion to convert Object parent the parent of obj Returns Type Description Value a Text node representing obj Overrides IPA.Config.Stores.ValueConverter<IPA.Utilities.AlmostVersion>.ToValue(IPA.Utilities.AlmostVersion, System.Object) Implements IValueConverter Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Utilities.Async.Coroutines.html": {
    "href": "api/IPA.Utilities.Async.Coroutines.html",
    "title": "Class Coroutines",
    "keywords": "Class Coroutines A class providing coroutine helpers. Inheritance Object Coroutines Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Utilities.Async Assembly : IPA.Loader.dll Syntax public static class Coroutines Methods | Improve this Doc View Source AsTask(IEnumerator) Binds a Task to a Unity coroutine, capturing exceptions as well as the coroutine call stack. Declaration public static Task AsTask(IEnumerator coroutine) Parameters Type Name Description IEnumerator coroutine the coroutine to bind to a task Returns Type Description Task a Task that completes when coroutine completes, and fails when it throws Remarks This may be called off of the Unity main thread. If it is, the coroutine start will be scheduled using the default UnityMainThreadTaskScheduler and will be run on the main thread as required by Unity. Unity provides a handful of coroutine helpers that are not IEnumerable s. Most of these are not terribly helpful on their own, however UnityEngine.WaitForSeconds may be. Instead, prefer to use the typical .NET Wait(TimeSpan) or similar overloads, or use UnityEngine.WaitForSecondsRealtime . | Improve this Doc View Source WaitForTask(Task) Stalls the coroutine until task completes, faults, or is canceled. Declaration public static IEnumerator WaitForTask(Task task) Parameters Type Name Description Task task the Task to wait for Returns Type Description IEnumerator a coroutine waiting for the given task | Improve this Doc View Source WaitForTask(Task, Boolean) Stalls the coroutine until task completes, faults, or is canceled. Declaration public static IEnumerator WaitForTask(Task task, bool throwOnFault = false) Parameters Type Name Description Task task the Task to wait for Boolean throwOnFault whether or not to throw if the task faulted Returns Type Description IEnumerator a coroutine waiting for the given task"
  },
  "api/IPA.Utilities.Async.html": {
    "href": "api/IPA.Utilities.Async.html",
    "title": "",
    "keywords": "Classes Coroutines A class providing coroutine helpers. SingleCreationValueCache<TKey, TValue> A dictionary-like type intended for thread-safe value caches whose values are created only once ever. SingleThreadTaskScheduler A single-threaded task scheduler that runs all of its tasks on the same thread. Synchronization Utilities for inter-thread synchronization. All Locker method acquire their object immediately, and should only be used with langword_csharp_using to automatically release them. UnityMainThreadTaskScheduler A task scheduler that runs tasks on the Unity main thread via coroutines. Structs Synchronization.MutexLocker A locker for a Mutex that automatically releases when it is disposed. Create this with Lock(Mutex) . Synchronization.ReaderWriterLockSlimReadLocker A locker for a read lock on a ReaderWriterLockSlim that automatically releases when it is disposed. Create this with LockRead(ReaderWriterLockSlim) . Synchronization.ReaderWriterLockSlimUpgradableReadLocker A locker for an upgradable read lock on a ReaderWriterLockSlim that automatically releases when it is disposed. Create this with LockReadUpgradable(ReaderWriterLockSlim) . Synchronization.ReaderWriterLockSlimWriteLocker A locker for a write lock on a ReaderWriterLockSlim that automatically releases when it is disposed. Create this with LockWrite(ReaderWriterLockSlim) . Synchronization.SemaphoreLocker A locker for a Semaphore that automatically releases when it is disposed. Create this with Lock(Semaphore) . Synchronization.SemaphoreSlimAsyncLocker A locker for a SemaphoreSlim that was created asynchronously and automatically releases when it is disposed. Create this with LockAsync(SemaphoreSlim) . Synchronization.SemaphoreSlimLocker A locker for a SemaphoreSlim that automatically releases when it is disposed. Create this with Lock(SemaphoreSlim) ."
  },
  "api/IPA.Utilities.Async.SingleCreationValueCache-2.html": {
    "href": "api/IPA.Utilities.Async.SingleCreationValueCache-2.html",
    "title": "Class SingleCreationValueCache<TKey, TValue>",
    "keywords": "Class SingleCreationValueCache<TKey, TValue> A dictionary-like type intended for thread-safe value caches whose values are created only once ever. Inheritance Object SingleCreationValueCache<TKey, TValue> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Utilities.Async Assembly : IPA.Loader.dll Syntax public class SingleCreationValueCache<TKey, TValue> Type Parameters Name Description TKey the key type of the cache TValue the value type of the cache Remarks This object basically wraps a ConcurrentDictionary<TKey,TValue> with some special handling to ensure that values are only created once ever, without having multiple parallel constructions. Constructors | Improve this Doc View Source SingleCreationValueCache() Initializes a new instance of the SingleCreationValueCache<TKey, TValue> class that is empty, has the default concurrency level, has the default initial capacity, and uses the default comparer for the key type. Declaration public SingleCreationValueCache() | Improve this Doc View Source SingleCreationValueCache(IEnumerable<KeyValuePair<TKey, TValue>>) Initializes a new instance of the SingleCreationValueCache<TKey, TValue> class that contains elements copied from the specified IEnumerable<T> , has the default concurrency level, has the default initial capacity, and uses the default comparer for the key type. Declaration public SingleCreationValueCache(IEnumerable<KeyValuePair<TKey, TValue>> collection) Parameters Type Name Description IEnumerable < KeyValuePair <TKey, TValue>> collection the IEnumerable<T> whose element are to be used for the new cache Exceptions Type Condition ArgumentNullException when any arguments are null ArgumentException collection contains duplicate keys | Improve this Doc View Source SingleCreationValueCache(IEnumerable<KeyValuePair<TKey, TValue>>, IEqualityComparer<TKey>) Initializes a new instance of the SingleCreationValueCache<TKey, TValue> class that contains elements copied from the specified IEnumerable<T> has the default concurrency level, has the default initial capacity, and uses the specified IEqualityComparer<T> . Declaration public SingleCreationValueCache(IEnumerable<KeyValuePair<TKey, TValue>> collection, IEqualityComparer<TKey> comparer) Parameters Type Name Description IEnumerable < KeyValuePair <TKey, TValue>> collection the IEnumerable<T> whose elements are to be used for the new cache IEqualityComparer <TKey> comparer the equality comparer to use when comparing keys Exceptions Type Condition ArgumentNullException collection or comparer is null | Improve this Doc View Source SingleCreationValueCache(IEqualityComparer<TKey>) Initializes a new instance of the SingleCreationValueCache<TKey, TValue> class that is empty, has the default concurrency level and capacity, and uses the specified IEqualityComparer<T> . Declaration public SingleCreationValueCache(IEqualityComparer<TKey> comparer) Parameters Type Name Description IEqualityComparer <TKey> comparer the equality comparer to use when comparing keys Exceptions Type Condition ArgumentNullException comparer is null Properties | Improve this Doc View Source Count Gets the number of elements that this cache contains. Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source IsEmpty Gets a value that indicates whether this cache is empty. Declaration public bool IsEmpty { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Clear() Clears the cache. Declaration public void Clear() | Improve this Doc View Source ContainsKey(TKey) Gets a value indicating whether or not this cache contains key . Declaration public bool ContainsKey(TKey key) Parameters Type Name Description TKey key the key to search for Returns Type Description Boolean true if the cache contains the key, false otherwise | Improve this Doc View Source GetOrAdd(TKey, Func<TKey, TValue>) Gets the value associated with the specified key from the cache. If it does not exist, and no creators are currently running for this key, then the creator is called to create the value and the value is added to the cache. If there is a creator currently running for the key, then this waits for the creator to finish and retrieves the value. Declaration public TValue GetOrAdd(TKey key, Func<TKey, TValue> creator) Parameters Type Name Description TKey key the key to search for Func <TKey, TValue> creator the delegate to use to create the value if it does not exist Returns Type Description TValue the value that was found, or the result of creator | Improve this Doc View Source ToArray() Copies the key-value pairs stored by the cache to a new array, filtering all elements that are currently being created. Declaration public KeyValuePair<TKey, TValue>[] ToArray() Returns Type Description KeyValuePair <TKey, TValue>[] an array containing a snapshot of the key-value pairs contained in this cache | Improve this Doc View Source TryGetValue(TKey, out TValue) Attempts to get the value associated with the specified key from the cache. Declaration public bool TryGetValue(TKey key, out TValue value) Parameters Type Name Description TKey key the key to search for TValue value the value retrieved, if any Returns Type Description Boolean true if the value was found, false otherwise Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Utilities.Async.SingleThreadTaskScheduler.html": {
    "href": "api/IPA.Utilities.Async.SingleThreadTaskScheduler.html",
    "title": "Class SingleThreadTaskScheduler",
    "keywords": "Class SingleThreadTaskScheduler A single-threaded task scheduler that runs all of its tasks on the same thread. Inheritance Object TaskScheduler SingleThreadTaskScheduler Implements IDisposable Inherited Members TaskScheduler.TryDequeue(Task) TaskScheduler.FromCurrentSynchronizationContext() TaskScheduler.TryExecuteTask(Task) TaskScheduler.MaximumConcurrencyLevel TaskScheduler.Default TaskScheduler.Current TaskScheduler.Id TaskScheduler.UnobservedTaskException Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Utilities.Async Assembly : IPA.Loader.dll Syntax public class SingleThreadTaskScheduler : TaskScheduler, IDisposable Properties | Improve this Doc View Source IsRunning Gets whether or not the underlying thread has been started. Declaration public bool IsRunning { get; } Property Value Type Description Boolean Exceptions Type Condition ObjectDisposedException Thrown if this object has already been disposed. Methods | Improve this Doc View Source Dispose() Disposes this object. This puts the object into an unusable state. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Disposes this object. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing whether or not to dispose managed objects | Improve this Doc View Source Exit() Terminates the runner thread, and waits for the currently running task to complete. Declaration public IEnumerable<Task> Exit() Returns Type Description IEnumerable < Task > an IEnumerable<T> of Task s that did not execute Remarks After this method returns, this object has been disposed and is no longer in a valid state. Exceptions Type Condition ObjectDisposedException Thrown if this object has already been disposed. | Improve this Doc View Source GetScheduledTasks() Throws a NotSupportedException . Declaration protected override IEnumerable<Task> GetScheduledTasks() Returns Type Description IEnumerable < Task > nothing Overrides TaskScheduler.GetScheduledTasks() Exceptions Type Condition NotSupportedException Always. | Improve this Doc View Source Join() Waits for the runner thread to complete all tasks in the queue, then exits. Declaration public void Join() Remarks After this method returns, this object has been disposed and is no longer in a valid state. Exceptions Type Condition ObjectDisposedException Thrown if this object has already been disposed. | Improve this Doc View Source QueueTask(Task) Queues a given Task to this scheduler. The Task must> be scheduled for this TaskScheduler by the runtime. Declaration protected override void QueueTask(Task task) Parameters Type Name Description Task task the Task to queue Overrides TaskScheduler.QueueTask(Task) Exceptions Type Condition ObjectDisposedException Thrown if this object has already been disposed. | Improve this Doc View Source Start() Starts the thread that executes tasks scheduled with this TaskScheduler Declaration public void Start() Exceptions Type Condition ObjectDisposedException Thrown if this object has already been disposed. | Improve this Doc View Source TryExecuteTaskInline(Task, Boolean) Rejects any attempts to execute a task inline. Declaration protected override bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued) Parameters Type Name Description Task task the task to attempt to execute Boolean taskWasPreviouslyQueued whether the task was previously queued to this scheduler Returns Type Description Boolean false Overrides TaskScheduler.TryExecuteTaskInline(Task, Boolean) Remarks This task scheduler always runs its tasks on the thread that it manages, therefore it doesn't make sense to run it inline. Exceptions Type Condition ObjectDisposedException Thrown if this object has already been disposed. Implements System.IDisposable Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Utilities.Async.Synchronization.html": {
    "href": "api/IPA.Utilities.Async.Synchronization.html",
    "title": "Class Synchronization",
    "keywords": "Class Synchronization Utilities for inter-thread synchronization. All Locker method acquire their object immediately, and should only be used with langword_csharp_using to automatically release them. Inheritance Object Synchronization Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Utilities.Async Assembly : IPA.Loader.dll Syntax public static class Synchronization Examples The canonical usage of all of the member functions is as follows, substituting Lock(Mutex) with whichever member you want to use, according to your lock type. using var _locker = Synchronization.Lock(mutex); Methods | Improve this Doc View Source Lock(Mutex) Creates a locker for a mutex. Declaration public static Synchronization.MutexLocker Lock(Mutex mut) Parameters Type Name Description Mutex mut the mutex to acquire Returns Type Description Synchronization.MutexLocker the locker to use with langword_csharp_using | Improve this Doc View Source Lock(Semaphore) Creates a locker for a semaphore. Declaration public static Synchronization.SemaphoreLocker Lock(Semaphore sem) Parameters Type Name Description Semaphore sem the semaphore to acquire Returns Type Description Synchronization.SemaphoreLocker the locker to use with langword_csharp_using | Improve this Doc View Source Lock(SemaphoreSlim) Creates a locker for a slim semaphore. Declaration public static Synchronization.SemaphoreSlimLocker Lock(SemaphoreSlim sem) Parameters Type Name Description SemaphoreSlim sem the slim semaphore to acquire Returns Type Description Synchronization.SemaphoreSlimLocker the locker to use with langword_csharp_using | Improve this Doc View Source LockAsync(SemaphoreSlim) Creates a locker for a slim semaphore asynchronously. Declaration public static async Task<Synchronization.SemaphoreSlimAsyncLocker> LockAsync(SemaphoreSlim sem) Parameters Type Name Description SemaphoreSlim sem the slim semaphore to acquire async Returns Type Description Task < Synchronization.SemaphoreSlimAsyncLocker > the locker to use with langword_csharp_using | Improve this Doc View Source LockRead(ReaderWriterLockSlim) Creates a locker for a read lock on a ReaderWriterLockSlim . Declaration public static Synchronization.ReaderWriterLockSlimReadLocker LockRead(ReaderWriterLockSlim rwl) Parameters Type Name Description ReaderWriterLockSlim rwl the lock to acquire in read mode Returns Type Description Synchronization.ReaderWriterLockSlimReadLocker the locker to use with langword_csharp_using | Improve this Doc View Source LockReadUpgradable(ReaderWriterLockSlim) Creates a locker for an upgradable read lock on a ReaderWriterLockSlim . Declaration public static Synchronization.ReaderWriterLockSlimUpgradableReadLocker LockReadUpgradable(ReaderWriterLockSlim rwl) Parameters Type Name Description ReaderWriterLockSlim rwl the lock to acquire in upgradable read mode Returns Type Description Synchronization.ReaderWriterLockSlimUpgradableReadLocker the locker to use with langword_csharp_using | Improve this Doc View Source LockWrite(ReaderWriterLockSlim) Creates a locker for a write lock ReaderWriterLockSlim . Declaration public static Synchronization.ReaderWriterLockSlimWriteLocker LockWrite(ReaderWriterLockSlim rwl) Parameters Type Name Description ReaderWriterLockSlim rwl the lock to acquire in write mode Returns Type Description Synchronization.ReaderWriterLockSlimWriteLocker the locker to use with langword_csharp_using"
  },
  "api/IPA.Utilities.Async.Synchronization.MutexLocker.html": {
    "href": "api/IPA.Utilities.Async.Synchronization.MutexLocker.html",
    "title": "Struct Synchronization.MutexLocker",
    "keywords": "Struct Synchronization.MutexLocker A locker for a Mutex that automatically releases when it is disposed. Create this with Lock(Mutex) . Implements IDisposable Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : IPA.Utilities.Async Assembly : IPA.Loader.dll Syntax public struct MutexLocker : IDisposable Explicit Interface Implementations | Improve this Doc View Source IDisposable.Dispose() Declaration void IDisposable.Dispose() Implements System.IDisposable Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[]) See Also Synchronization Lock(Mutex)"
  },
  "api/IPA.Utilities.Async.Synchronization.ReaderWriterLockSlimReadLocker.html": {
    "href": "api/IPA.Utilities.Async.Synchronization.ReaderWriterLockSlimReadLocker.html",
    "title": "Struct Synchronization.ReaderWriterLockSlimReadLocker",
    "keywords": "Struct Synchronization.ReaderWriterLockSlimReadLocker A locker for a read lock on a ReaderWriterLockSlim that automatically releases when it is disposed. Create this with LockRead(ReaderWriterLockSlim) . Implements IDisposable Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : IPA.Utilities.Async Assembly : IPA.Loader.dll Syntax public struct ReaderWriterLockSlimReadLocker : IDisposable Explicit Interface Implementations | Improve this Doc View Source IDisposable.Dispose() Declaration void IDisposable.Dispose() Implements System.IDisposable Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[]) See Also Synchronization LockRead(ReaderWriterLockSlim)"
  },
  "api/IPA.Utilities.Async.Synchronization.ReaderWriterLockSlimUpgradableReadLocker.html": {
    "href": "api/IPA.Utilities.Async.Synchronization.ReaderWriterLockSlimUpgradableReadLocker.html",
    "title": "Struct Synchronization.ReaderWriterLockSlimUpgradableReadLocker",
    "keywords": "Struct Synchronization.ReaderWriterLockSlimUpgradableReadLocker A locker for an upgradable read lock on a ReaderWriterLockSlim that automatically releases when it is disposed. Create this with LockReadUpgradable(ReaderWriterLockSlim) . Implements IDisposable Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : IPA.Utilities.Async Assembly : IPA.Loader.dll Syntax public struct ReaderWriterLockSlimUpgradableReadLocker : IDisposable Methods | Improve this Doc View Source Upgrade() Creates a locker for a write lock on the ReaderWriterLockSlim associated with this locker, upgrading the current thread's lock. Declaration public Synchronization.ReaderWriterLockSlimWriteLocker Upgrade() Returns Type Description Synchronization.ReaderWriterLockSlimWriteLocker a locker for the new write lock See Also Synchronization Explicit Interface Implementations | Improve this Doc View Source IDisposable.Dispose() Declaration void IDisposable.Dispose() Implements System.IDisposable Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[]) See Also Synchronization LockReadUpgradable(ReaderWriterLockSlim)"
  },
  "api/IPA.Utilities.Async.Synchronization.ReaderWriterLockSlimWriteLocker.html": {
    "href": "api/IPA.Utilities.Async.Synchronization.ReaderWriterLockSlimWriteLocker.html",
    "title": "Struct Synchronization.ReaderWriterLockSlimWriteLocker",
    "keywords": "Struct Synchronization.ReaderWriterLockSlimWriteLocker A locker for a write lock on a ReaderWriterLockSlim that automatically releases when it is disposed. Create this with LockWrite(ReaderWriterLockSlim) . Implements IDisposable Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : IPA.Utilities.Async Assembly : IPA.Loader.dll Syntax public struct ReaderWriterLockSlimWriteLocker : IDisposable Explicit Interface Implementations | Improve this Doc View Source IDisposable.Dispose() Declaration void IDisposable.Dispose() Implements System.IDisposable Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[]) See Also Synchronization LockWrite(ReaderWriterLockSlim)"
  },
  "api/IPA.Utilities.Async.Synchronization.SemaphoreLocker.html": {
    "href": "api/IPA.Utilities.Async.Synchronization.SemaphoreLocker.html",
    "title": "Struct Synchronization.SemaphoreLocker",
    "keywords": "Struct Synchronization.SemaphoreLocker A locker for a Semaphore that automatically releases when it is disposed. Create this with Lock(Semaphore) . Implements IDisposable Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : IPA.Utilities.Async Assembly : IPA.Loader.dll Syntax public struct SemaphoreLocker : IDisposable Explicit Interface Implementations | Improve this Doc View Source IDisposable.Dispose() Declaration void IDisposable.Dispose() Implements System.IDisposable Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[]) See Also Synchronization Lock(Semaphore)"
  },
  "api/IPA.Utilities.Async.Synchronization.SemaphoreSlimAsyncLocker.html": {
    "href": "api/IPA.Utilities.Async.Synchronization.SemaphoreSlimAsyncLocker.html",
    "title": "Struct Synchronization.SemaphoreSlimAsyncLocker",
    "keywords": "Struct Synchronization.SemaphoreSlimAsyncLocker A locker for a SemaphoreSlim that was created asynchronously and automatically releases when it is disposed. Create this with LockAsync(SemaphoreSlim) . Implements IDisposable Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : IPA.Utilities.Async Assembly : IPA.Loader.dll Syntax public struct SemaphoreSlimAsyncLocker : IDisposable Explicit Interface Implementations | Improve this Doc View Source IDisposable.Dispose() Declaration void IDisposable.Dispose() Implements System.IDisposable Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[]) See Also Synchronization LockAsync(SemaphoreSlim)"
  },
  "api/IPA.Utilities.Async.Synchronization.SemaphoreSlimLocker.html": {
    "href": "api/IPA.Utilities.Async.Synchronization.SemaphoreSlimLocker.html",
    "title": "Struct Synchronization.SemaphoreSlimLocker",
    "keywords": "Struct Synchronization.SemaphoreSlimLocker A locker for a SemaphoreSlim that automatically releases when it is disposed. Create this with Lock(SemaphoreSlim) . Implements IDisposable Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : IPA.Utilities.Async Assembly : IPA.Loader.dll Syntax public struct SemaphoreSlimLocker : IDisposable Explicit Interface Implementations | Improve this Doc View Source IDisposable.Dispose() Declaration void IDisposable.Dispose() Implements System.IDisposable Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[]) See Also Synchronization Lock(SemaphoreSlim)"
  },
  "api/IPA.Utilities.Async.UnityMainThreadTaskScheduler.html": {
    "href": "api/IPA.Utilities.Async.UnityMainThreadTaskScheduler.html",
    "title": "Class UnityMainThreadTaskScheduler",
    "keywords": "Class UnityMainThreadTaskScheduler A task scheduler that runs tasks on the Unity main thread via coroutines. Inheritance Object TaskScheduler UnityMainThreadTaskScheduler Implements IDisposable Inherited Members TaskScheduler.TryDequeue(Task) TaskScheduler.FromCurrentSynchronizationContext() TaskScheduler.TryExecuteTask(Task) TaskScheduler.MaximumConcurrencyLevel TaskScheduler.Current TaskScheduler.Id TaskScheduler.UnobservedTaskException Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Utilities.Async Assembly : IPA.Loader.dll Syntax public class UnityMainThreadTaskScheduler : TaskScheduler, IDisposable Properties | Improve this Doc View Source Cancelling Gets whether or not this scheduler is in the process of shutting down. Declaration public bool Cancelling { get; } Property Value Type Description Boolean true if the scheduler is shutting down, false otherwise | Improve this Doc View Source Default Gets the default main thread scheduler that is managed by BSIPA. Declaration public static UnityMainThreadTaskScheduler Default { get; } Property Value Type Description UnityMainThreadTaskScheduler a scheduler that is managed by BSIPA | Improve this Doc View Source Factory Gets a factory for creating tasks on Default . Declaration public static TaskFactory Factory { get; } Property Value Type Description TaskFactory a factory for creating tasks on the default scheduler | Improve this Doc View Source IsRunning Gets whether or not this scheduler is currently executing tasks. Declaration public bool IsRunning { get; } Property Value Type Description Boolean true if the scheduler is running, false otherwise | Improve this Doc View Source YieldAfterTasks Gets or sets the number of tasks to execute before yielding back to Unity. Declaration public int YieldAfterTasks { get; set; } Property Value Type Description Int32 the number of tasks to execute per resume | Improve this Doc View Source YieldAfterTime Gets or sets the amount of time to execute tasks for before yielding back to Unity. Default is 0.5ms. Declaration public TimeSpan YieldAfterTime { get; set; } Property Value Type Description TimeSpan the amount of time to execute tasks for before yielding back to Unity Methods | Improve this Doc View Source Cancel() Cancels the scheduler. If the scheduler is currently executing tasks, that batch will finish first. All remaining tasks will be left in the queue. Declaration public void Cancel() Exceptions Type Condition ObjectDisposedException if this scheduler is disposed InvalidOperationException if the scheduler is not running | Improve this Doc View Source Coroutine() When used as a Unity coroutine, runs the scheduler. Otherwise, this is an invalid call. Declaration public IEnumerator Coroutine() Returns Type Description IEnumerator a Unity coroutine Remarks Do not ever call UnityEngine.MonoBehaviour.StopCoroutine(System.Collections.IEnumerator) on this coroutine, nor UnityEngine.MonoBehaviour.StopAllCoroutines on the behaviour hosting this coroutine. This has no way to detect this, and this object will become invalid. If you need to stop this coroutine, first call Cancel() , then wait for it to exit on its own. Exceptions Type Condition ObjectDisposedException if this scheduler is disposed InvalidOperationException if the scheduler is already running | Improve this Doc View Source Dispose() Disposes this object. This puts the object into an unusable state. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Disposes this object. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing whether or not to dispose managed objects | Improve this Doc View Source GetScheduledTasks() Throws a NotSupportedException . Declaration protected override IEnumerable<Task> GetScheduledTasks() Returns Type Description IEnumerable < Task > nothing Overrides TaskScheduler.GetScheduledTasks() Exceptions Type Condition NotSupportedException Always. | Improve this Doc View Source QueueTask(Task) Queues a given Task to this scheduler. The Task must be scheduled for this TaskScheduler by the runtime. Declaration protected override void QueueTask(Task task) Parameters Type Name Description Task task the Task to queue Overrides TaskScheduler.QueueTask(Task) Exceptions Type Condition ObjectDisposedException Thrown if this object has already been disposed. | Improve this Doc View Source TryExecuteTaskInline(Task, Boolean) Runs the task inline if the current thread is the Unity main thread. Declaration protected override bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued) Parameters Type Name Description Task task the task to attempt to execute Boolean taskWasPreviouslyQueued whether the task was previously queued to this scheduler Returns Type Description Boolean false if the task could not be run, true if it was Overrides TaskScheduler.TryExecuteTaskInline(Task, Boolean) Exceptions Type Condition ObjectDisposedException Thrown if this object has already been disposed. Implements System.IDisposable Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Utilities.CriticalSection.AutoExecuteSection.html": {
    "href": "api/IPA.Utilities.CriticalSection.AutoExecuteSection.html",
    "title": "Struct CriticalSection.AutoExecuteSection",
    "keywords": "Struct CriticalSection.AutoExecuteSection A struct that allows using blocks to manage an execute section. Implements IDisposable Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : IPA.Utilities Assembly : IPA.Loader.dll Syntax public struct AutoExecuteSection : IDisposable Explicit Interface Implementations | Improve this Doc View Source IDisposable.Dispose() Declaration void IDisposable.Dispose() Implements System.IDisposable Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Utilities.CriticalSection.html": {
    "href": "api/IPA.Utilities.CriticalSection.html",
    "title": "Class CriticalSection",
    "keywords": "Class CriticalSection Provides utilities for managing various critical sections. Inheritance Object CriticalSection Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Utilities Assembly : IPA.Loader.dll Syntax public static class CriticalSection Methods | Improve this Doc View Source EnterExecuteSection() Enters a critical execution section. Does not nest. Declaration public static void EnterExecuteSection() | Improve this Doc View Source ExecuteSection() Creates an CriticalSection.AutoExecuteSection for automated management of an execute section. Declaration public static CriticalSection.AutoExecuteSection ExecuteSection() Returns Type Description CriticalSection.AutoExecuteSection the new CriticalSection.AutoExecuteSection that manages the section | Improve this Doc View Source ExitExecuteSection() Exits a critical execution section. Does not nest. Declaration public static void ExitExecuteSection()"
  },
  "api/IPA.Utilities.EnumerableExtensions.html": {
    "href": "api/IPA.Utilities.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions",
    "keywords": "Class EnumerableExtensions Extensions for IEnumerable<T> that don't currently exist in System.Linq . Inheritance Object EnumerableExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Utilities Assembly : IPA.Loader.dll Syntax public static class EnumerableExtensions Methods | Improve this Doc View Source NonNull<T>(IEnumerable<T>) LINQ-style extension method that filters null elements out of an enumeration. Declaration public static IEnumerable<T> NonNull<T>(this IEnumerable<T> self) where T : class Parameters Type Name Description IEnumerable <T> self the enumeration to filter Returns Type Description IEnumerable <T> a filtered enumerable Type Parameters Name Description T the type of the enumeration | Improve this Doc View Source NonNull<T>(IEnumerable<Nullable<T>>) LINQ-style extension method that filters null elements from an enumeration of nullable types. Declaration public static IEnumerable<T> NonNull<T>(this IEnumerable<T?> self) where T : struct Parameters Type Name Description IEnumerable < Nullable <T>> self the enumeration to filter Returns Type Description IEnumerable <T> a filtered enumerable Type Parameters Name Description T the underlying type of the nullable enumeration | Improve this Doc View Source NonNull<T, U>(IEnumerable<T>, Func<T, U>) LINQ-style extension method that filters null elements out of an enumeration based on a converter. Declaration public static IEnumerable<T> NonNull<T, U>(this IEnumerable<T> self, Func<T, U> pred) where U : class Parameters Type Name Description IEnumerable <T> self the enumeration to filter Func <T, U> pred the predicate to select for filtering Returns Type Description IEnumerable <T> a filtered enumerable Type Parameters Name Description T the type of the enumeration U the type to compare to null | Improve this Doc View Source NonNull<T, U>(IEnumerable<T>, Func<T, Nullable<U>>) LINQ-style extension method that filters null elements out of an enumeration based on a converter to a nullable type. Declaration public static IEnumerable<T> NonNull<T, U>(this IEnumerable<T> self, Func<T, U?> pred) where U : struct Parameters Type Name Description IEnumerable <T> self the enumeration to filter Func <T, Nullable <U>> pred the predicate to select for filtering Returns Type Description IEnumerable <T> a filtered enumerable Type Parameters Name Description T the type of the enumeration U the type of the predicate's resulting nullable"
  },
  "api/IPA.Utilities.Extensions.html": {
    "href": "api/IPA.Utilities.Extensions.html",
    "title": "Class Extensions",
    "keywords": "Class Extensions A class providing various extension methods. Inheritance Object Extensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Utilities Assembly : IPA.Loader.dll Syntax public static class Extensions Methods | Improve this Doc View Source GetDefault(Type) Gets the default value for a given Type . Declaration public static object GetDefault(this Type type) Parameters Type Name Description Type type the Type to get the default value for Returns Type Description Object the default value of type | Improve this Doc View Source IsSubPathOf(String, String) Returns true if path starts with the path baseDirPath . The comparison is case-insensitive, handles / and \\ slashes as folder separators and only matches if the base dir folder name is matched exactly (\"c:\\foobar\\file.txt\" is not a sub path of \"c:\\foo\"). Declaration public static bool IsSubPathOf(this string path, string baseDirPath) Parameters Type Name Description String path String baseDirPath Returns Type Description Boolean | Improve this Doc View Source Right(String, Int32) Gets the rightmost length characters from a string. Declaration public static string Right(this string value, int length) Parameters Type Name Description String value The string to retrieve the substring from. Int32 length The number of characters to retrieve. Returns Type Description String The substring. | Improve this Doc View Source Unwrap(Nullable<Boolean>) Unwraps a Nullable<T> where T is Boolean such that if the value is null, it gives false . Declaration public static bool Unwrap(this bool? self) Parameters Type Name Description Nullable < Boolean > self the bool? to unwrap Returns Type Description Boolean the unwrapped value, or false if it was null | Improve this Doc View Source WithEnding(String, String) Returns str with the minimal concatenation of ending (starting from end) that results in satisfying .EndsWith(ending). Declaration public static string WithEnding(this string str, string ending) Parameters Type Name Description String str String ending Returns Type Description String Examples \"hel\".WithEnding(\"llo\") returns \"hello\", which is the result of \"hel\" + \"lo\"."
  },
  "api/IPA.Utilities.FieldAccessor-2.Accessor.html": {
    "href": "api/IPA.Utilities.FieldAccessor-2.Accessor.html",
    "title": "Delegate FieldAccessor<T, U>.Accessor",
    "keywords": "Delegate FieldAccessor<T, U>.Accessor A delegate for a field accessor taking a T ref and returning a U ref. Namespace : IPA.Utilities Assembly : IPA.Loader.dll Syntax public delegate ref U Accessor(ref T obj); Parameters Type Name Description T obj the object to access the field of Returns Type Description U a reference to the field's value Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Utilities.FieldAccessor-2.html": {
    "href": "api/IPA.Utilities.FieldAccessor-2.html",
    "title": "Class FieldAccessor<T, U>",
    "keywords": "Class FieldAccessor<T, U> A type containing utilities for accessing non-public fields of objects. Inheritance Object FieldAccessor<T, U> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Utilities Assembly : IPA.Loader.dll Syntax public static class FieldAccessor<T, U> Type Parameters Name Description T the type that the fields are on U the type of the field to access Methods | Improve this Doc View Source Access(ref T, String) Accesses a field for an object by name. Declaration public static ref U Access(ref T obj, string name) Parameters Type Name Description T obj the object to access the field of String name the name of the field to access Returns Type Description U a reference to the object at the field Exceptions Type Condition MissingFieldException if the field does not exist on T See Also GetAccessor(String) | Improve this Doc View Source Get(T, String) Gets the value of a field of an object by name. Declaration public static U Get(T obj, string name) Parameters Type Name Description T obj the object to access the field of String name the name of the field to access Returns Type Description U the value of the field Exceptions Type Condition MissingFieldException if the field does not exist on T See Also Get(ref T, String) Access(ref T, String) GetAccessor(String) | Improve this Doc View Source Get(ref T, String) Gets the value of a field of an object by name. Declaration public static U Get(ref T obj, string name) Parameters Type Name Description T obj the object to access the field of String name the name of the field to access Returns Type Description U the value of the field Remarks The only good reason to use this over Get(T, String) is when you are working with a value type, as it prevents a copy. Exceptions Type Condition MissingFieldException if the field does not exist on T See Also Get(T, String) Access(ref T, String) GetAccessor(String) | Improve this Doc View Source GetAccessor(String) Gets an FieldAccessor<T, U>.Accessor for the field named name on T . Declaration public static FieldAccessor<T, U>.Accessor GetAccessor(string name) Parameters Type Name Description String name the field name Returns Type Description FieldAccessor.Accessor <> an accessor for the field Exceptions Type Condition MissingFieldException if the field does not exist on T | Improve this Doc View Source Set(T, String, U) Sets the value of a field for an object by name. Declaration public static void Set(T obj, string name, U value) Parameters Type Name Description T obj the object to set the field of String name the name of the field U value the value to set it to Remarks This overload cannot be safely used for value types. Use Set(ref T, String, U) instead. Exceptions Type Condition MissingFieldException if the field does not exist on T See Also Set(ref T, String, U) Access(ref T, String) GetAccessor(String) | Improve this Doc View Source Set(ref T, String, U) Sets the value of a field for an object by name. Declaration public static void Set(ref T obj, string name, U value) Parameters Type Name Description T obj the object to set the field of String name the name of the field U value the value to set it to Remarks This overload must be used for value types. Exceptions Type Condition MissingFieldException if the field does not exist on T See Also Set(T, String, U) Access(ref T, String) GetAccessor(String) See Also PropertyAccessor <T, U>"
  },
  "api/IPA.Utilities.html": {
    "href": "api/IPA.Utilities.html",
    "title": "",
    "keywords": "Classes AlmostVersion A type that wraps Hive.Versioning.Version so that the string of the version is stored when the string is not a valid Hive.Versioning.Version . AlmostVersionConverter A ValueConverter<T> for AlmostVersion s. CriticalSection Provides utilities for managing various critical sections. EnumerableExtensions Extensions for IEnumerable<T> that don't currently exist in System.Linq . Extensions A class providing various extension methods. FieldAccessor<T, U> A type containing utilities for accessing non-public fields of objects. MethodAccessor<T, TDelegate> A type containing utilities for calling non-public methods on an object. PropertyAccessor<T, U> A type containing utilities for accessing non-public properties of an object. Ref Utilities to create Ref<T> using type inference. Ref<T> A class to store a reference for passing to methods which cannot take ref parameters. ReflectionUtil A utility class providing reflection helper methods. UnityGame Provides some basic utility methods and properties of Beat Saber Utils A class providing static utility functions that in any other language would just exist . Structs CriticalSection.AutoExecuteSection A struct that allows using blocks to manage an execute section. SwitchToUnityMainThreadAwaitable An awaitable which, when awaited, switches the current context to the Unity main thread. SwitchToUnityMainThreadAwaiter An awaiter which, when awaited, switches the current context to the Unity main thread. Utils.ScopeGuardObject An object used to manage scope guards. Enums AlmostVersion.StoredAs Represents a storage type of either parsed Hive.Versioning.Version object or raw String . UnityGame.Release The different types of releases of the game. Delegates FieldAccessor<T, U>.Accessor A delegate for a field accessor taking a T ref and returning a U ref. PropertyAccessor<T, U>.Getter A getter for a property. PropertyAccessor<T, U>.Setter A setter for a property."
  },
  "api/IPA.Utilities.MethodAccessor-2.html": {
    "href": "api/IPA.Utilities.MethodAccessor-2.html",
    "title": "Class MethodAccessor<T, TDelegate>",
    "keywords": "Class MethodAccessor<T, TDelegate> A type containing utilities for calling non-public methods on an object. Inheritance Object MethodAccessor<T, TDelegate> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Utilities Assembly : IPA.Loader.dll Syntax public static class MethodAccessor<T, TDelegate> where TDelegate : Delegate Type Parameters Name Description T the type to find the methods on TDelegate the delegate type to create, and to use as a signature to search for Methods | Improve this Doc View Source GetDelegate(String) Gets a delegate to the named method with the signature specified by TDelegate . Declaration public static TDelegate GetDelegate(string name) Parameters Type Name Description String name the name of the method to get Returns Type Description TDelegate a delegate that can call the specified method Exceptions Type Condition MissingMethodException if name does not represent the name of a method with the given signature ArgumentException if the method found returns a type incompatable with the return type of TDelegate"
  },
  "api/IPA.Utilities.PropertyAccessor-2.Getter.html": {
    "href": "api/IPA.Utilities.PropertyAccessor-2.Getter.html",
    "title": "Delegate PropertyAccessor<T, U>.Getter",
    "keywords": "Delegate PropertyAccessor<T, U>.Getter A getter for a property. Namespace : IPA.Utilities Assembly : IPA.Loader.dll Syntax public delegate U Getter(ref T obj); Parameters Type Name Description T obj the object it is a member of Returns Type Description U the value of the property Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Utilities.PropertyAccessor-2.html": {
    "href": "api/IPA.Utilities.PropertyAccessor-2.html",
    "title": "Class PropertyAccessor<T, U>",
    "keywords": "Class PropertyAccessor<T, U> A type containing utilities for accessing non-public properties of an object. Inheritance Object PropertyAccessor<T, U> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Utilities Assembly : IPA.Loader.dll Syntax public static class PropertyAccessor<T, U> Type Parameters Name Description T the type that the properties are on U the type of the property to access Methods | Improve this Doc View Source Get(T, String) Gets the value of the property identified by name on obj . Declaration public static U Get(T obj, string name) Parameters Type Name Description T obj the instance to access String name the name of the property Returns Type Description U the value of the property Exceptions Type Condition MissingMemberException if the property does not exist See Also Get(ref T, String) GetGetter(String) | Improve this Doc View Source Get(ref T, String) Gets the value of the property identified by name on obj . Declaration public static U Get(ref T obj, string name) Parameters Type Name Description T obj the instance to access String name the name of the property Returns Type Description U the value of the property Remarks The only reason to use this over Get(T, String) is if you are using a value type because it avoids a copy. Exceptions Type Condition MissingMemberException if the property does not exist See Also Get(T, String) GetGetter(String) | Improve this Doc View Source GetGetter(String) Gets a PropertyAccessor<T, U>.Getter for the property identified by name . Declaration public static PropertyAccessor<T, U>.Getter GetGetter(string name) Parameters Type Name Description String name the name of the property Returns Type Description PropertyAccessor.Getter <> a PropertyAccessor<T, U>.Getter that can access that property Exceptions Type Condition MissingMemberException if the property does not exist | Improve this Doc View Source GetSetter(String) Gets a PropertyAccessor<T, U>.Setter for the property identified by name . Declaration public static PropertyAccessor<T, U>.Setter GetSetter(string name) Parameters Type Name Description String name the name of the property Returns Type Description PropertyAccessor.Setter <> a PropertyAccessor<T, U>.Setter that can access that property Exceptions Type Condition MissingMemberException if the property does not exist | Improve this Doc View Source Set(T, String, U) Sets the value of the property identified by name on obj . Declaration public static void Set(T obj, string name, U val) Parameters Type Name Description T obj the instance to access String name the name of the property U val the new value of the property Remarks This overload cannot be safely used for value types. Use Set(ref T, String, U) instead. Exceptions Type Condition MissingMemberException if the property does not exist See Also Set(ref T, String, U) GetSetter(String) | Improve this Doc View Source Set(ref T, String, U) Sets the value of the property identified by name on obj . Declaration public static void Set(ref T obj, string name, U val) Parameters Type Name Description T obj the instance to access String name the name of the property U val the new value of the property Remarks This overload must be used for value types. Exceptions Type Condition MissingMemberException if the property does not exist See Also Set(T, String, U) GetSetter(String)"
  },
  "api/IPA.Utilities.PropertyAccessor-2.Setter.html": {
    "href": "api/IPA.Utilities.PropertyAccessor-2.Setter.html",
    "title": "Delegate PropertyAccessor<T, U>.Setter",
    "keywords": "Delegate PropertyAccessor<T, U>.Setter A setter for a property. Namespace : IPA.Utilities Assembly : IPA.Loader.dll Syntax public delegate void Setter(ref T obj, U val); Parameters Type Name Description T obj the object it is a member of U val the new property value Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Utilities.Ref.html": {
    "href": "api/IPA.Utilities.Ref.html",
    "title": "Class Ref",
    "keywords": "Class Ref Utilities to create Ref<T> using type inference. Inheritance Object Ref Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Utilities Assembly : IPA.Loader.dll Syntax public static class Ref Methods | Improve this Doc View Source Create<T>(T) Creates a Ref<T> . Declaration public static Ref<T> Create<T>(T val) Parameters Type Name Description T val the default value. Returns Type Description Ref <T> the new Ref<T> . Type Parameters Name Description T the type to reference."
  },
  "api/IPA.Utilities.Ref-1.html": {
    "href": "api/IPA.Utilities.Ref-1.html",
    "title": "Class Ref<T>",
    "keywords": "Class Ref<T> A class to store a reference for passing to methods which cannot take ref parameters. Inheritance Object Ref<T> Implements IComparable <T> IComparable < Ref <T>> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Utilities Assembly : IPA.Loader.dll Syntax public class Ref<T> : IComparable<T>, IComparable<Ref<T>> Type Parameters Name Description T the type of the value Constructors | Improve this Doc View Source Ref(T) Constructor. Declaration public Ref(T reference) Parameters Type Name Description T reference the initial value of the reference Properties | Improve this Doc View Source Error An exception that was generated while creating the value. Declaration public Exception Error { get; set; } Property Value Type Description Exception the error held in this Ref<T> | Improve this Doc View Source Value The value of the reference Declaration public T Value { get; set; } Property Value Type Description T the value wrapped by this Ref<T> Methods | Improve this Doc View Source CompareTo(T) Compares the wrapped object to the other object. Declaration public int CompareTo(T other) Parameters Type Name Description T other the object to compare to Returns Type Description Int32 the value of the comparison | Improve this Doc View Source CompareTo(Ref<T>) Compares the wrapped object to the other wrapped object. Declaration public int CompareTo(Ref<T> other) Parameters Type Name Description Ref <T> other the wrapped object to compare to Returns Type Description Int32 the value of the comparison | Improve this Doc View Source Verify() Throws error if one was set. Declaration public void Verify() Operators | Improve this Doc View Source Implicit(T to Ref<T>) Converts a value T to a reference to that object. Will overwrite the reference in the left hand expression if there is one. Declaration public static implicit operator Ref<T>(T toConvert) Parameters Type Name Description T toConvert the value to wrap in the Ref Returns Type Description Ref <T> the Ref wrapping the value | Improve this Doc View Source Implicit(Ref<T> to T) Converts to referenced type, returning the stored reference. Declaration public static implicit operator T(Ref<T> self) Parameters Type Name Description Ref <T> self the object to be de-referenced Returns Type Description T the value referenced by the object Implements System.IComparable<T> System.IComparable<T> Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/IPA.Utilities.ReflectionUtil.html": {
    "href": "api/IPA.Utilities.ReflectionUtil.html",
    "title": "Class ReflectionUtil",
    "keywords": "Class ReflectionUtil A utility class providing reflection helper methods. Inheritance Object ReflectionUtil Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Utilities Assembly : IPA.Loader.dll Syntax public static class ReflectionUtil Methods | Improve this Doc View Source CopyComponent(Component, Type, GameObject, Type) Copies a component original to a component of overridingType on the destination UnityEngine.GameObject . Declaration public static Component CopyComponent(this Component original, Type overridingType, GameObject destination, Type originalTypeOverride = null) Parameters Type Name Description UnityEngine.Component original the original component Type overridingType the new component's type UnityEngine.GameObject destination the destination GameObject Type originalTypeOverride overrides the source component type (for example, to a superclass) Returns Type Description UnityEngine.Component the copied component | Improve this Doc View Source CopyComponent<T>(Component, GameObject, Type) A generic version of CopyComponent(Component, Type, GameObject, Type) . Declaration public static T CopyComponent<T>(this Component original, GameObject destination, Type originalTypeOverride = null) where T : Component Parameters Type Name Description UnityEngine.Component original the original component UnityEngine.GameObject destination the destination game object Type originalTypeOverride overrides the source component type (for example, to a superclass) Returns Type Description T the copied component Type Parameters Name Description T the overriding type See Also CopyComponent(Component, Type, GameObject, Type) | Improve this Doc View Source GetField<U, T>(T, String) Gets the value of a field. Declaration public static U GetField<U, T>(this T obj, string fieldName) Parameters Type Name Description T obj the object instance to pull from String fieldName the name of the field to read Returns Type Description U the value of the field Type Parameters Name Description U the type of the field (result casted) T the type to get the field from Exceptions Type Condition MissingFieldException if fieldName does not exist on T See Also Get(ref T, String) | Improve this Doc View Source GetProperty<U, T>(T, String) Gets a property on the target object, as gotten from T . Declaration public static U GetProperty<U, T>(this T obj, string propertyName) Parameters Type Name Description T obj the object instance String propertyName the property to get Returns Type Description U the value of the property Type Parameters Name Description U the type of the property to get T the type to get the property from Exceptions Type Condition MissingMemberException if propertyName does not exist on T See Also Get(ref T, String) | Improve this Doc View Source InvokeMethod<U, T>(T, String, Object[]) Invokes a method from T on an object. Declaration public static U InvokeMethod<U, T>(this T obj, string methodName, params object[] args) Parameters Type Name Description T obj the object instance String methodName the method's name Object [] args the method arguments Returns Type Description U the return value Type Parameters Name Description U the type that the method returns T the type to search for the method on Exceptions Type Condition MissingMethodException if methodName does not exist on T | Improve this Doc View Source SetField<T, U>(T, String, U) Sets a field on the target object, as gotten from T . Declaration public static void SetField<T, U>(this T obj, string fieldName, U value) Parameters Type Name Description T obj the object instance String fieldName the field to set U value the value to set it to Type Parameters Name Description T the type to get the field from U the type of the field to set Exceptions Type Condition MissingFieldException if fieldName does not exist on T See Also Set(ref T, String, U) | Improve this Doc View Source SetProperty<T, U>(T, String, U) Sets a property on the target object, as gotten from T . Declaration public static void SetProperty<T, U>(this T obj, string propertyName, U value) Parameters Type Name Description T obj the object instance String propertyName the property to set U value the value to set it to Type Parameters Name Description T the type to get the property from U the type of the property to set Exceptions Type Condition MissingMemberException if propertyName does not exist on T See Also Set(ref T, String, U) | Improve this Doc View Source ToCompilerGeneratedBackingField(String) Converts the property name to the one of the compiler-generated backing field. This can be used for the field-based reflection when you want to set the value of a get-only property Declaration public static string ToCompilerGeneratedBackingField(string propertyName) Parameters Type Name Description String propertyName Name of the property Returns Type Description String Name of the backing field Remarks Only works for properties with compiler-generated backing fields. This is only a simple method and doesn't have any guarantees to work 100% of the time across different compilers/runtimes. See this link for more info."
  },
  "api/IPA.Utilities.SwitchToUnityMainThreadAwaitable.html": {
    "href": "api/IPA.Utilities.SwitchToUnityMainThreadAwaitable.html",
    "title": "Struct SwitchToUnityMainThreadAwaitable",
    "keywords": "Struct SwitchToUnityMainThreadAwaitable An awaitable which, when awaited, switches the current context to the Unity main thread. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : IPA.Utilities Assembly : IPA.Loader.dll Syntax public struct SwitchToUnityMainThreadAwaitable Methods | Improve this Doc View Source GetAwaiter() Gets the awaiter for this awaitable. Declaration public SwitchToUnityMainThreadAwaiter GetAwaiter() Returns Type Description SwitchToUnityMainThreadAwaiter The awaiter for this awaitable. Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[]) See Also SwitchToMainThreadAsync()"
  },
  "api/IPA.Utilities.SwitchToUnityMainThreadAwaiter.html": {
    "href": "api/IPA.Utilities.SwitchToUnityMainThreadAwaiter.html",
    "title": "Struct SwitchToUnityMainThreadAwaiter",
    "keywords": "Struct SwitchToUnityMainThreadAwaiter An awaiter which, when awaited, switches the current context to the Unity main thread. Implements ICriticalNotifyCompletion INotifyCompletion Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : IPA.Utilities Assembly : IPA.Loader.dll Syntax public struct SwitchToUnityMainThreadAwaiter : ICriticalNotifyCompletion, INotifyCompletion Properties | Improve this Doc View Source IsCompleted Gets whether or not this awaiter is completed. Declaration public readonly bool IsCompleted { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source GetResult() Gets the result of this awaiter. Declaration public void GetResult() | Improve this Doc View Source OnCompleted(Action) Registers a continuation to be called when this awaiter finishes. Declaration public void OnCompleted(Action continuation) Parameters Type Name Description Action continuation The continuation. | Improve this Doc View Source UnsafeOnCompleted(Action) Registers a continuation to be called when this awaiter finishes, without capturing the execution context. Declaration public void UnsafeOnCompleted(Action continuation) Parameters Type Name Description Action continuation The continuation. Implements System.Runtime.CompilerServices.ICriticalNotifyCompletion System.Runtime.CompilerServices.INotifyCompletion Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[]) See Also SwitchToMainThreadAsync()"
  },
  "api/IPA.Utilities.UnityGame.html": {
    "href": "api/IPA.Utilities.UnityGame.html",
    "title": "Class UnityGame",
    "keywords": "Class UnityGame Provides some basic utility methods and properties of Beat Saber Inheritance Object UnityGame Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Utilities Assembly : IPA.Loader.dll Syntax public static class UnityGame Properties | Improve this Doc View Source GameVersion Provides the current game version. Declaration public static AlmostVersion GameVersion { get; } Property Value Type Description AlmostVersion the SemVer version of the game | Improve this Doc View Source InstallPath Gets the path to the game's install directory. Declaration public static string InstallPath { get; } Property Value Type Description String the path of the game install directory | Improve this Doc View Source LibraryPath The path to the Libs folder. Use only if necessary. Declaration public static string LibraryPath { get; } Property Value Type Description String the path to the library directory | Improve this Doc View Source NativeLibraryPath The path to the Libs\\Native folder. Use only if necessary. Declaration public static string NativeLibraryPath { get; } Property Value Type Description String the path to the native library directory | Improve this Doc View Source OnMainThread Checks if the currently running code is running on the Unity main thread. Declaration public static bool OnMainThread { get; } Property Value Type Description Boolean true if the curent thread is the Unity main thread, false otherwise | Improve this Doc View Source PluginsPath The directory to load plugins from. Declaration public static string PluginsPath { get; } Property Value Type Description String the path to the plugin directory | Improve this Doc View Source ReleaseType Gets the UnityGame.Release type of this installation of Beat Saber Declaration public static UnityGame.Release ReleaseType { get; } Property Value Type Description UnityGame.Release the type of release this is Remarks This only gives a | Improve this Doc View Source UserDataPath The path to the UserData folder. Declaration public static string UserDataPath { get; } Property Value Type Description String the path to the user data directory Methods | Improve this Doc View Source SwitchToMainThreadAsync() Asynchronously switches the current execution context to the Unity main thread. Declaration public static SwitchToUnityMainThreadAwaitable SwitchToMainThreadAsync() Returns Type Description SwitchToUnityMainThreadAwaitable An awaitable which causes any following code to execute on the main thread."
  },
  "api/IPA.Utilities.UnityGame.Release.html": {
    "href": "api/IPA.Utilities.UnityGame.Release.html",
    "title": "Enum UnityGame.Release",
    "keywords": "Enum UnityGame.Release The different types of releases of the game. Namespace : IPA.Utilities Assembly : IPA.Loader.dll Syntax public enum Release Fields Name Description Other Indicates a non-Steam release. Steam Indicates a Steam release. Extension Methods ReflectionUtil.SetField<UnityGame.Release, U>(String, U) ReflectionUtil.GetField<U, UnityGame.Release>(String) ReflectionUtil.SetProperty<UnityGame.Release, U>(String, U) ReflectionUtil.GetProperty<U, UnityGame.Release>(String) ReflectionUtil.InvokeMethod<U, UnityGame.Release>(String, Object[])"
  },
  "api/IPA.Utilities.Utils.html": {
    "href": "api/IPA.Utilities.Utils.html",
    "title": "Class Utils",
    "keywords": "Class Utils A class providing static utility functions that in any other language would just exist . Inheritance Object Utils Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IPA.Utilities Assembly : IPA.Loader.dll Syntax public static class Utils Properties | Improve this Doc View Source CanUseDateTimeNowSafely Whether you can safely use Now without Mono throwing a fit. Declaration public static bool CanUseDateTimeNowSafely { get; } Property Value Type Description Boolean true if you can use Now safely, false otherwise Methods | Improve this Doc View Source ByteArrayToString(Byte[]) Converts a byte array to a hex string. Declaration public static string ByteArrayToString(byte[] ba) Parameters Type Name Description Byte [] ba the byte array Returns Type Description String the hex form of the array | Improve this Doc View Source CopyAll(DirectoryInfo, DirectoryInfo, String, Func<Exception, FileInfo, Boolean>) Copies all files from source to target . Declaration public static void CopyAll(DirectoryInfo source, DirectoryInfo target, string appendFileName = \"\", Func<Exception, FileInfo, bool> onCopyException = null) Parameters Type Name Description DirectoryInfo source the source directory DirectoryInfo target the destination directory String appendFileName the filename of the file to append together Func < Exception , FileInfo , Boolean > onCopyException a delegate called when there is an error copying. Return true to keep going. | Improve this Doc View Source CurrentTime() Returns Now if supported, otherwise UtcNow . Declaration public static DateTime CurrentTime() Returns Type Description DateTime the current DateTime if supported, otherwise some indeterminant increasing value. | Improve this Doc View Source Deconstruct<TKey, TValue>(KeyValuePair<TKey, TValue>, out TKey, out TValue) Deconstructs a KeyValuePair<TKey,TValue> as its key and value. Declaration public static void Deconstruct<TKey, TValue>(this KeyValuePair<TKey, TValue> kvp, out TKey key, out TValue value) Parameters Type Name Description KeyValuePair <TKey, TValue> kvp The KeyValuePair<TKey,TValue> to deconstruct. TKey key The key in kvp . TValue value The value in kvp . Type Parameters Name Description TKey The type of the key. TValue The type of the value. | Improve this Doc View Source GetRelativePath(String, String) Gets a path relative to the provided folder. Declaration public static string GetRelativePath(string file, string folder) Parameters Type Name Description String file the file to relativize String folder the source folder Returns Type Description String a path to get from folder to file | Improve this Doc View Source ScopeGuard(Action) Creates a scope guard for a given Action . Declaration public static Utils.ScopeGuardObject ScopeGuard(Action action) Parameters Type Name Description Action action the Action to run on dispose Returns Type Description Utils.ScopeGuardObject a Utils.ScopeGuardObject that will run action on disposal Examples using var _ = Utils.ScopeGuard(() => RunOnScopeExit(value)); | Improve this Doc View Source StringToByteArray(String) Converts a hex string to a byte array. Declaration public static byte[] StringToByteArray(string hex) Parameters Type Name Description String hex the hex stream Returns Type Description Byte [] the corresponding byte array | Improve this Doc View Source UnsafeCompare(Byte[], Byte[]) Uses unsafe code to compare 2 byte arrays quickly. Declaration public static bool UnsafeCompare(byte[] a1, byte[] a2) Parameters Type Name Description Byte [] a1 array 1 Byte [] a2 array 2 Returns Type Description Boolean whether or not they are byte-for-byte equal | Improve this Doc View Source VersionCompareNoPrerelease(Version, Version) Compares a pair of Hive.Versioning.Version s ignoring both the prerelease and build fields. Declaration public static int VersionCompareNoPrerelease(Version l, Version r) Parameters Type Name Description Hive.Versioning.Version l the left value Hive.Versioning.Version r the right value Returns Type Description Int32 < 0 if l is less than r, 0 if they are equal in the numeric portion, or > 0 if l is greater than r | Improve this Doc View Source VersionCompareNoPrerelease(Version, Version) Compares a pair of Version s ignoring both the prerelease and build fields. Declaration [Obsolete(\"Use Hive.Versioning.Version overload instead.\")] public static int VersionCompareNoPrerelease(Version l, Version r) Parameters Type Name Description Version l the left value Version r the right value Returns Type Description Int32 < 0 if l is less than r, 0 if they are equal in the numeric portion, or > 0 if l is greater than r"
  },
  "api/IPA.Utilities.Utils.ScopeGuardObject.html": {
    "href": "api/IPA.Utilities.Utils.ScopeGuardObject.html",
    "title": "Struct Utils.ScopeGuardObject",
    "keywords": "Struct Utils.ScopeGuardObject An object used to manage scope guards. Implements IDisposable Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : IPA.Utilities Assembly : IPA.Loader.dll Syntax public struct ScopeGuardObject : IDisposable Examples using var _ = new Utils.ScopeGuardObject(() => RunOnScopeExit(value)); Constructors | Improve this Doc View Source ScopeGuardObject(Action) Creates a new scope guard that will invoke action when disposed. Declaration public ScopeGuardObject(Action action) Parameters Type Name Description Action action the action to run on dispose Explicit Interface Implementations | Improve this Doc View Source IDisposable.Dispose() Declaration void IDisposable.Dispose() Implements System.IDisposable Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[]) See Also ScopeGuard(Action)"
  },
  "api/SemVer.html": {
    "href": "api/SemVer.html",
    "title": "",
    "keywords": "Classes Range Version"
  },
  "api/SemVer.Range.html": {
    "href": "api/SemVer.Range.html",
    "title": "Class Range",
    "keywords": "Class Range Inheritance Object Range Implements IEquatable < Range > IEquatable < VersionRange > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : SemVer Assembly : SemVer.dll Syntax [Obsolete(\"Use Hive.Versioning.VersionRange instead.\")] public class Range : IEquatable<Range>, IEquatable<VersionRange> Constructors | Improve this Doc View Source Range(String, Boolean) Declaration public Range(string rangeSpec, bool loose = false) Parameters Type Name Description String rangeSpec Boolean loose Properties | Improve this Doc View Source UnderlyingRange Declaration public VersionRange UnderlyingRange { get; } Property Value Type Description VersionRange Methods | Improve this Doc View Source Equals(Range) Declaration public bool Equals(Range other) Parameters Type Name Description Range other Returns Type Description Boolean | Improve this Doc View Source Equals(Nullable<VersionRange>) Declaration public bool Equals(VersionRange? other) Parameters Type Name Description Nullable < VersionRange > other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) | Improve this Doc View Source ForHiveRange(VersionRange) Declaration public static Range ForHiveRange(VersionRange real) Parameters Type Name Description VersionRange real Returns Type Description Range | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() | Improve this Doc View Source Intersect(Range) Declaration public Range Intersect(Range other) Parameters Type Name Description Range other Returns Type Description Range | Improve this Doc View Source IsSatisfied(Hive.Versioning.Version) Declaration public bool IsSatisfied(Hive.Versioning.Version version) Parameters Type Name Description Hive.Versioning.Version version Returns Type Description Boolean | Improve this Doc View Source IsSatisfied(Version) Declaration public bool IsSatisfied(Version version) Parameters Type Name Description Version version Returns Type Description Boolean | Improve this Doc View Source IsSatisfied(String, Boolean) Declaration public bool IsSatisfied(string versionString, bool loose = false) Parameters Type Name Description String versionString Boolean loose Returns Type Description Boolean | Improve this Doc View Source IsSatisfied(String, String, Boolean) Declaration public static bool IsSatisfied(string rangeSpec, string versionString, bool loose = false) Parameters Type Name Description String rangeSpec String versionString Boolean loose Returns Type Description Boolean | Improve this Doc View Source MaxSatisfying(IEnumerable<Version>) Declaration public Version MaxSatisfying(IEnumerable<Version> versions) Parameters Type Name Description IEnumerable < Version > versions Returns Type Description Version | Improve this Doc View Source MaxSatisfying(IEnumerable<String>, Boolean) Declaration public string MaxSatisfying(IEnumerable<string> versionStrings, bool loose = false) Parameters Type Name Description IEnumerable < String > versionStrings Boolean loose Returns Type Description String | Improve this Doc View Source MaxSatisfying(String, IEnumerable<String>, Boolean) Declaration public static string MaxSatisfying(string rangeSpec, IEnumerable<string> versions, bool loose = false) Parameters Type Name Description String rangeSpec IEnumerable < String > versions Boolean loose Returns Type Description String | Improve this Doc View Source Satisfying(IEnumerable<Version>) Declaration public IEnumerable<Version> Satisfying(IEnumerable<Version> versions) Parameters Type Name Description IEnumerable < Version > versions Returns Type Description IEnumerable < Version > | Improve this Doc View Source Satisfying(IEnumerable<String>, Boolean) Declaration public IEnumerable<string> Satisfying(IEnumerable<string> versions, bool loose = false) Parameters Type Name Description IEnumerable < String > versions Boolean loose Returns Type Description IEnumerable < String > | Improve this Doc View Source Satisfying(String, IEnumerable<String>, Boolean) Declaration public static IEnumerable<string> Satisfying(string rangeSpec, IEnumerable<string> versions, bool loose = false) Parameters Type Name Description String rangeSpec IEnumerable < String > versions Boolean loose Returns Type Description IEnumerable < String > | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Operators | Improve this Doc View Source Equality(Range, Range) Declaration public static bool operator ==(Range a, Range b) Parameters Type Name Description Range a Range b Returns Type Description Boolean | Improve this Doc View Source Inequality(Range, Range) Declaration public static bool operator !=(Range a, Range b) Parameters Type Name Description Range a Range b Returns Type Description Boolean Implements System.IEquatable<T> System.IEquatable<T> Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "api/SemVer.Version.html": {
    "href": "api/SemVer.Version.html",
    "title": "Class Version",
    "keywords": "Class Version Inheritance Object Version Implements IComparable < Version > IComparable < Hive.Versioning.Version > IComparable IEquatable < Version > IEquatable < Hive.Versioning.Version > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : SemVer Assembly : SemVer.dll Syntax [Obsolete(\"Use Hive.Versioning.Version instead.\")] public class Version : IComparable<Version>, IComparable<Hive.Versioning.Version>, IComparable, IEquatable<Version>, IEquatable<Hive.Versioning.Version> Constructors | Improve this Doc View Source Version(Int32, Int32, Int32, String, String) Declaration public Version(int major, int minor, int patch, string preRelease = null, string build = null) Parameters Type Name Description Int32 major Int32 minor Int32 patch String preRelease String build | Improve this Doc View Source Version(String, Boolean) Declaration public Version(string input, bool loose = false) Parameters Type Name Description String input Boolean loose Properties | Improve this Doc View Source Build Declaration public string Build { get; } Property Value Type Description String | Improve this Doc View Source Major Declaration public int Major { get; } Property Value Type Description Int32 | Improve this Doc View Source Minor Declaration public int Minor { get; } Property Value Type Description Int32 | Improve this Doc View Source Patch Declaration public int Patch { get; } Property Value Type Description Int32 | Improve this Doc View Source PreRelease Declaration public string PreRelease { get; } Property Value Type Description String | Improve this Doc View Source UnderlyingVersion Declaration public Hive.Versioning.Version UnderlyingVersion { get; } Property Value Type Description Hive.Versioning.Version Methods | Improve this Doc View Source BaseVersion() Declaration public Version BaseVersion() Returns Type Description Version | Improve this Doc View Source Clean() Declaration public string Clean() Returns Type Description String | Improve this Doc View Source CompareTo(Version) Declaration public int CompareTo(Version other) Parameters Type Name Description Version other Returns Type Description Int32 | Improve this Doc View Source CompareTo(Nullable<Hive.Versioning.Version>) Declaration public int CompareTo(Hive.Versioning.Version? other) Parameters Type Name Description Nullable < Hive.Versioning.Version > other Returns Type Description Int32 | Improve this Doc View Source CompareTo(Object) Declaration public int CompareTo(object obj) Parameters Type Name Description Object obj Returns Type Description Int32 | Improve this Doc View Source Equals(Version) Declaration public bool Equals(Version other) Parameters Type Name Description Version other Returns Type Description Boolean | Improve this Doc View Source Equals(Nullable<Hive.Versioning.Version>) Declaration public bool Equals(Hive.Versioning.Version? other) Parameters Type Name Description Nullable < Hive.Versioning.Version > other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) | Improve this Doc View Source ForHiveVersion(Hive.Versioning.Version) Declaration public static Version ForHiveVersion(Hive.Versioning.Version real) Parameters Type Name Description Hive.Versioning.Version real Returns Type Description Version | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Operators | Improve this Doc View Source Equality(Version, Version) Declaration public static bool operator ==(Version a, Version b) Parameters Type Name Description Version a Version b Returns Type Description Boolean | Improve this Doc View Source GreaterThan(Version, Version) Declaration public static bool operator>(Version a, Version b) Parameters Type Name Description Version a Version b Returns Type Description Boolean | Improve this Doc View Source GreaterThanOrEqual(Version, Version) Declaration public static bool operator >=(Version a, Version b) Parameters Type Name Description Version a Version b Returns Type Description Boolean | Improve this Doc View Source Inequality(Version, Version) Declaration public static bool operator !=(Version a, Version b) Parameters Type Name Description Version a Version b Returns Type Description Boolean | Improve this Doc View Source LessThan(Version, Version) Declaration public static bool operator <(Version a, Version b) Parameters Type Name Description Version a Version b Returns Type Description Boolean | Improve this Doc View Source LessThanOrEqual(Version, Version) Declaration public static bool operator <=(Version a, Version b) Parameters Type Name Description Version a Version b Returns Type Description Boolean Implements System.IComparable<T> System.IComparable<T> System.IComparable System.IEquatable<T> System.IEquatable<T> Extension Methods ReflectionUtil.SetField<T, U>(T, String, U) ReflectionUtil.GetField<U, T>(T, String) ReflectionUtil.SetProperty<T, U>(T, String, U) ReflectionUtil.GetProperty<U, T>(T, String) ReflectionUtil.InvokeMethod<U, T>(T, String, Object[])"
  },
  "articles/command-line.html": {
    "href": "articles/command-line.html",
    "title": "The Command Line",
    "keywords": "The Command Line BSIPA has 2 command lines: the installer, and the game. Their documentation is below. The Installer ( IPA.exe ) The Game The installer has quite a few options, which are documented inline with the -h or --help flag. This is what it currently looks like: usage: IPA.exe [FLAGS] [ARGUMENTS] flags: -h, --help prints this message -v, --version prints the version that will be installed and is currently installed -w, --waitfor=PID waits for the specified PID to exit -f, --force forces the operation to go through -r, --revert reverts the IPA installation -n, --nowait doesn't wait for user input after the operation -s, --start=ARGUMENTS uses the specified arguments to start the game after the patch/unpatch -l, --launch uses positional parameters as arguments to start the game after patch/unpatch -R, --no-revert prevents a normal installation from first reverting The game also gets quite a few command line options, though there isn't anything as convenient as a help page for them. Here's a quick list of what they are and what they do. --verbose Makes a console appear with log information at startup. --debug Enables the loading of debug information in Mono. The debugging information must be in the portable PDB format, in the same location as the DLL that it's for. This option also forces BSIPA to show all debug messages in the console, as well as where they were called. This overrides the config settings Debug.ShowDebug and Debug.ShowCallSource . --trace Enables trace level messages. By default, they do not ever enter the message queue, and thus cost almost nothing. When this or the config option is used, they are added and logged with the same rules as Debug messages. This overrides the config setting Debug.ShowTrace . --mono-debug Enables the built-in Mono soft debugger engine. By default, it acts as a client, and requires that there be a soft debugger server running on port 10000 on localhost . Implies --debug . --server Does nothing on its own. When paired with --mono-debug , this option makes the Mono soft debugger act in server mode. It begins listening on port 10000 on any address, and will pause startup (with no window) until a debugger is connected. I recommend using SDB, but that is a command line debugger and a lot of people don't care for those. --no-yeet Disables mod yeeting. By default, whenever BSIPA detects that the game is now running a newer version than previous runs, it will move all mods to another folder and not load them. (They still get checked for updates though.) When this is enabled, that behaviour is disabled. Overrides the config setting YeetMods . --condense-logs Reduces the number of log files BSIPA will output for a given session. By default, BSIPA will create a subfolder in the Logs folder for each mod sublog, as well as each mod. This disables that behaviour, and restricts it to only create a global log and mod logs. Overrides the config setting Debug.CondenseModLogs . --plugin-logs Causes each plugins' log messages to be written to files in their own folder for ease of debugging. This was the default through 4.1.6, however is now disabled by default. Overrides the config setting Debug.CreateModLogs ."
  },
  "articles/contributing.html": {
    "href": "articles/contributing.html",
    "title": "Contributing",
    "keywords": "Contributing Prerequisites Microsoft Visual Studio 2019 or later (2017 may work, no guarantees) Tools for C/C++ (MSVC) v141 .NET 4.6.1 SDK and .NET 4.7.2 SDK Beat Saber (if developing for .NET 4.5+) Muse Dash (if developing for .NET 3.5) Building Clone with git clone https://github.com/beat-saber-modding-group/BeatSaber-IPA-Reloaded.git --recursive Create a file, bsinstalldir.txt in the solution root. Do NOT create this in Visual Studio; VS adds a BOM at the begginning of the file that the tools used cannot read. It should contain the path to your Beat Saber installation, using forward slashes with a trailing slash. e.g. C:/Program Files (x86)/Steam/steamapps/common/Beat Saber/ If you intend to be doing .NET 3.5 centric development, you must put your Muse Dash installation folder in a file named mdinstalldir.txt that is otherwise identical to bsinstalldir.txt . Open BSIPA.sln in Visual Studio. Choose the configuration that you intend to target during development. Rebuild all. When you make a change somewhere in BSIPA itself, right click on BSIPA-Meta and click Build or Rebuild . This sets up the output in path/to/solution/BSIPA-Meta/bin/<Configuration> to be what should be copied to the game directory. When making a change to Mod List, you only need to build Mod List itself. Install by copying everything in path/to/solution/BSIPA-ModList/bin/<Configuration> to your game directory. When building a Debug build, all referenced assemblies from Beat Saber will be copied from the install directory provided in bsinstalldir.txt into Refs/ . Any new references should reference the copy in there. When building for Release, it just uses the files already in Refs/ ."
  },
  "articles/index.html": {
    "href": "articles/index.html",
    "title": "Getting Started",
    "keywords": "Getting Started Starting out is quite simple. Just follow one of the following guides: Installing BSIPA Making your own mod Or, if you want to contribute, see Contributing ."
  },
  "articles/start-dev.html": {
    "href": "articles/start-dev.html",
    "title": "Making your own mod",
    "keywords": "Making a mod Overview What follows is a very barebones, and frankly not very useful plugin class, even as a starting point, but it should be enough to give a decent idea of how to do quick upgrades of existing mods for those who want to. using System; using IPA; using IPA.Logging; namespace Demo { [Plugin(RuntimeOptions.SingleStartInit)] internal class Plugin { public static Logger log { get; private set; } [Init] public Plugin(Logger logger) { log = logger; log.Debug(\"Basic plugin running!\"); // setup that does not require game code // this is only called once ever, so do once-ever initialization } [OnStart] public void OnStart() { // setup that requires game code } [OnExit] public void OnExit() { // teardown } } } There are basically 4 major concepts here: Logger , the logging system. PluginAttribute , which declares that this class is a plugin and how it should behave. InitAttribute , which declares the constructor (and optionally other methods) as being used for initialization. The lifecycle event attributes OnStartAttribute and OnExitAttribute . I reccommend you read the docs for each of those to get an idea for what they do. It is worth noting that this example is of a mod that cannot be enabled and disabled at runtime, as marked by RuntimeOptions.SingleStartInit . What can be changed Before we go adding more functionality, its worth mentioning that that is not the only way to have a plugin set up. For starters, we can add another method marked [Init] , and it will be called after the constructor, with the same injected parameters, if those are applicable. [Init] public void Init(Logger logger) { // logger will be the same instance as log currently is } If you only had a method marked [Init] , and no constructors marked [Init] , then the plugin type must expose a public default constructor. If multiple constructors are marked [Init] , only the one with the most parameters will be called. You may also mark as many methods as you wish with [Init] and all of them will be called, in no well-defined order on initialization. The same is true for [OnStart] and [OnExit] , respectively. From Scratch If you are starting from scratch, you will need one other thing to get your plugin up and running: a manifest. A basic manifest for that might look a little like this: { \"author\": \"ExampleMan\", \"description\": [ \"A demo plugin written for the BSIPA basic tutorial.\" ], \"gameVersion\": \"1.6.0\", \"id\": null, \"name\": \"Demo Plugin\", \"version\": \"0.0.1\", \"links\": { \"project-source\": \"https://github.com/exampleman/demo-plugin/\", \"donate\": \"https://ko-fi.com/exampleman\" }, } There is a lot going on there, but most of it should be decently obvious. Among the things that aren't immediately obvious, are id : This represents a unique identifier for the mod, for use by package managers such as BeatMods. It may be null if the mod chooses not to support those. features : Don't worry about this for now, this is a not-very-simple thing that will be touched on later. In addition, there are a few gatchas with it: description : This can be either a string or an array representing different lines. Markdown formatting is permitted. gameVersion : This should match exactly with the application version of the game being targeted. While this is not enforced by BSIPA, mod repositories like BeatMods may require it match, and it is good practice regardless. version : This must be a valid SemVer version number for your mod. In order for your plugin to load, the manifest must be embedded into the plugin DLL as an embedded resource. This can be set in the Visual Studio file properties panel under Build Action , or in the .csproj like so: <ItemGroup> <EmbeddedResource Include=\"manifest.json\" /> </ItemGroup> At this point, if the main plugin source file and the manifest are in the same source location, and the plugin class is using the project's default namespace, the plugin will load just fine. However, this is somewhat difficult both to explain and verify, so I recommend you use the the misc.plugin-hint field in your manifest. It can be used like so: \"misc\": { \"plugin-hint\": \"Demo.Plugin\" } With this, you can set plugin-hint to the full typename of your plugin type, and it will correctly load. This is a hint though, and will also try it as a namespace if it fails to find the plugin type. If that fails, it will then fall back to using the manifest's embedded namespace. A less painful description If you want to have a relatively long or well-formatted description for your mod, it may start to become painful to embed it in a list of JSON strings in the manifest. Luckily, there is a way to handle this. The first step is to create another embedded file, but this time it should be a Markdown file, perhaps description.md . It may contain something like this: # Demo Plugin A little demo for the BSIPA modding introduction. --- WE CAN USE MARKDOWN!!! Then, in your manifest description, have the first line be something look like this, but replacing Demo.description.md with the fully namespaced name of the resource: \"#![Demo.description.md]\", Now, when loaded into memory, if anything reads your description metadata, they get the content of that file instead of the content of the manifest key. Configuring your plugin Something that many plugins want and need is configuration. Fortunately, BSIPA provides a fairly powerful configuration system out of the box. To start using it, first create a config class of some kind. Lets take a look at a fairly simple example of this: namespace Demo { public class PluginConfig { public static PluginConfig Instance { get; set; } public int IntValue { get; set; } = 42; public float FloatValue { get; set; } = 3.14159f; } } Notice how the class is both marked public and is not marked sealed . For the moment, both of these are necessary. Also notice that all of the members are properties. While this doesn't change much now, it will be significant in the near future. Now, how do we get this object off of disk? Simple. Back in your plugin class, change your [Init] constructor to look like this: [Init] public Plugin(Logger logger, Config conf) { log = logger; PluginConfig.Instance = conf.Generated<PluginConfig>(); log.Debug(\"Config loaded\"); // setup that does not require game code } For this to compile, though, we will need to add a few using s: using IPA.Config; using IPA.Config.Stores; With just this, you have your config automatically loading from disk! It's even reloaded when it gets changed mid-game! You can now access it from anywhere by simply accessing PluginConfig.Instance . Make sure you don't accidentally reassign this though, as then you will loose your only interaction with the user's preferences. By default, it will be named the same as is in your plugin's manifest's name field, and will use the built-in json provider. This means that the file that will be loaded from will be UserData/Demo Plugin.json for our demo plugin. You can, however, control both of those by applying attributes to the Config parameter, namely Config.NameAttribute to control the name, and Config.PreferAttribute to control the type. If the type preferences aren't registered though, it will just fall back to JSON. The config's behaviour can be found either later here, or in the remarks section of Generated<T>(Config, Boolean) . At this point, your main plugin file should look something like this: using System; using IPA; using IPA.Logging; using IPA.Config; using IPA.Config.Stores; namespace Demo { [Plugin(RuntimeOptions.SingleStartInit)] internal class Plugin { public static Logger log { get; private set; } [Init] public Plugin(Logger logger, Config conf) { log = logger; PluginConfig.Instance = conf.Generated<PluginConfig>(); log.Debug(\"Config loaded\"); // setup that does not require game code } [OnStart] public void OnStart() { // setup that requires game code } [OnExit] public void OnExit() { // teardown } } } But what about more complex types than just int and float ? What if you want sub-objects? Those are supported natively, and so are very easy to set up. We just add this to the config class: public class SubThingsObject { public double DoubleValue { get; set; } = 2.718281828459045; } public SubThingsObject SubThings { get; set; } = new SubThingsObject(); Now this object will be automatically read from disk too. But there is one caveat to this: because SubThingsObject is a reference type, SubThings can be null . This is often undesireable. The obvious solution may be to simply change it to a struct , but that is both not supported and potentially undesirable for other reasons we'll get to later. Instead, you can use NonNullableAttribute . Change the definition of SubThings to this: [NonNullable] public SubThingsObject SubThings { get; set; } = new SubThingsObject(); And add this to the using s: using IPA.Config.Stores.Attributes; This attribute tells the serializer that null is an invalid value for the config object. This does, however, require that you take extra care ensure that it never becomes null in code, as that will break the serializer. What about collection types? Well, you can use those too, but you have to use something new: a converter. You may be familiar with them if you have used something like the popular Newtonsoft.Json library before. In BSIPA, they lie in the IPA.Config.Stores.Converters namespace. All converters either implement IValueConverter or derive from ValueConverter<T> . You will mostly use them with an UseConverterAttribute . To use them, we'll want to import them: using System.Collections.Generic; using IPA.Config.Stores; using IPA.Config.Stores.Converters; Then add a field, for example a list field: [UseConverter(typeof(ListConverter<string>))] public List<string> ListValue { get; set; } = new List<string>(); This uses a converter that is provided with BSIPA for List<T> s specifically. It converts the list to an ordered array, which is then written to disk as a JSON array. We could also potentially want use something like a HashSet<T> . Lets start by looking at the definition for such a member, then deciphering what exactly it means: [UseConverter(typeof(CollectionConverter<string, HashSet<string>>))] public HashSet<string> SetValue { get; set; } = new HashSet<string>(); The converter we're using here is CollectionConverter<T, TCollection> , a base type for converters of all kinds of collections. In fact, the ListConverter<T> is derived from this, and uses it for most of its implementation. If a type implements ICollection<T> , CollectionConverter<T, TCollection> can convert it. It, like most other BSIPA provided aggregate converters, provides a type argument overload CollectionConverter<T, TCollection, TConverter> to compose other converters with it to handle unusual element types. Now after all that, your plugin class has not changed, and your config class should look something like this: using System.Collections.Generic; using IPA.Config.Stores; using IPA.Config.Stores.Attributes; using IPA.Config.Stores.Converters; namespace Demo { public class PluginConfig { public static PluginConfig Instance { get; set; } public class SubThingsObject { public double DoubleValue { get; set; } = 2.718281828459045; } public int IntValue { get; set; } = 42; public float FloatValue { get; set; } = 3.14159f; [NonNullable] public SubThingsObject SubThings { get; set; } = new SubThingsObject(); [UseConverter(typeof(ListConverter<string>))] public List<string> ListValue { get; set; } = new List<string>(); [UseConverter(typeof(CollectionConverter<string, HashSet<string>>))] public HashSet<string> SetValue { get; set; } = new HashSet<string>(); } } I mentioned earlier that your config file will be automatically reloaded -- but isn't that a bad thing? Doesn't that mean that the config could change under your feet without you having a way to tell? Not so- I just haven't introduced the mechanism. Define a public or protected virtual method named OnReload : public virtual void OnReload() { // this is called whenever the config file is reloaded from disk // use it to tell all of your systems that something has changed // this is called off of the main thread, and is not safe to interact // with Unity in } This method will be called whenever BSIPA reloads your config from disk. When it is called, the object will already have been populated. Use it to notify all of your systems that configuration has changed. Now, we know how to read from disk, and how to use unusual types, but how do we write it back to disk? This config system is based on automatic saving (though we haven't quite gotten to the automatic part), and so the config is written to disk whenever the system recognizes that something has changed. To tell is as much, define a public or protected virtual method named Changed : public virtual void Changed() { // this is called whenever one of the virtual properties is changed // can be called to signal that the content has been changed } This method can be called to tell BSIPA that this config object has changed. Later, when we enable automated change tracking, this will also be called when one of the config's members changes. You can use this body to validate something or, for example, write a timestamp for last change. I just mentioned automated change tracking -- lets add that now. To do this, just make all of the properties virtual, like so: public class SubThingsObject { public virtual double DoubleValue { get; set; } = 2.718281828459045; } public virtual int IntValue { get; set; } = 42; public virtual float FloatValue { get; set; } = 3.14159f; [NonNullable] public virtual SubThingsObject SubThings { get; set; } = new SubThingsObject(); [UseConverter(typeof(ListConverter<string>))] public virtual List<string> ListValue { get; set; } = new List<string>(); [UseConverter(typeof(CollectionConverter<string, HashSet<string>>))] public virtual HashSet<string> SetValue { get; set; } = new HashSet<string>(); Now, whenever you assign to any of those properties, your Changed method will be called, and the config object will be marked as changed and will be written to disk. Unfortunately, any properties that can be modified while only using the property getter do not trigger this, and so if you change any collections for example, you will have to manually call Changed . After doing all this, your config class should look something like this: using System.Collections.Generic; using IPA.Config.Stores; using IPA.Config.Stores.Attributes; using IPA.Config.Stores.Converters; namespace Demo { public class PluginConfig { public static PluginConfig Instance { get; set; } public class SubThingsObject { public virtual double DoubleValue { get; set; } = 2.718281828459045; } public virtual int IntValue { get; set; } = 42; public virtual float FloatValue { get; set; } = 3.14159f; [NonNullable] public virtual SubThingsObject SubThings { get; set; } = new SubThingsObject(); [UseConverter(typeof(ListConverter<string>))] public virtual List<string> ListValue { get; set; } = new List<string>(); [UseConverter(typeof(CollectionConverter<string, HashSet<string>>))] public virtual HashSet<string> SetValue { get; set; } = new HashSet<string>(); public virtual void Changed() { // this is called whenever one of the virtual properties is changed // can be called to signal that the content has been changed } public virtual void OnReload() { // this is called whenever the config file is reloaded from disk // use it to tell all of your systems that something has changed // this is called off of the main thread, and is not safe to interact // with Unity in } } } There is one more major problem with this though: the main class is still public. Most configs shouldn't be. Lets make it internal. So we make it internal: internal class PluginConfig But to make it actually work, we add this outside the namespace declaration: using System.Runtime.CompilerServices; [assembly: InternalsVisibleTo(GeneratedStore.AssemblyVisibilityTarget)] And now our full file looks like this: using System.Collections.Generic; using System.Runtime.CompilerServices; using IPA.Config.Stores; using IPA.Config.Stores.Attributes; using IPA.Config.Stores.Converters; [assembly: InternalsVisibleTo(GeneratedStore.AssemblyVisibilityTarget)] namespace Demo { internal class PluginConfig { public static PluginConfig Instance { get; set; } public class SubThingsObject { public virtual double DoubleValue { get; set; } = 2.718281828459045; } public virtual int IntValue { get; set; } = 42; public virtual float FloatValue { get; set; } = 3.14159f; [NonNullable] public virtual SubThingsObject SubThings { get; set; } = new SubThingsObject(); [UseConverter(typeof(ListConverter<string>))] public virtual List<string> ListValue { get; set; } = new List<string>(); [UseConverter(typeof(CollectionConverter<string, HashSet<string>>))] public virtual HashSet<string> SetValue { get; set; } = new HashSet<string>(); public virtual void Changed() { // this is called whenever one of the virtual properties is changed // can be called to signal that the content has been changed } public virtual void OnReload() { // this is called whenever the config file is reloaded from disk // use it to tell all of your systems that something has changed // this is called off of the main thread, and is not safe to interact // with Unity in } } }"
  },
  "articles/start-user.html": {
    "href": "articles/start-user.html",
    "title": "Installing BSIPA",
    "keywords": "Installing BSIPA Note This guide assumes that you are starting completely fresh. Grab a release from the GitHub Releases page . Make sure to download one of the BSIPA-*.zip s, as ModList.zip contains the Beat Saber mod for showing your mods in-game, not the loader itself. Note The specific ZIP you need to download varies on the game you will be patching. For example, if you are patching Beat Saber, you will need the file BSIPA-x64-Net4.zip . This is because Beat Saber is a 64 bit game running .NET 4. If you are patching Muse Dash, however, you nee the file BSIPA-x86-Net3.zip . Tip There are a few tricks for figuring out which file you need. If the game has a folder called MonoBleedingEdge in the install directory, then you need one of the Net4 builds. To determine which build to use, right click on the game executable, go to the Compatability tab, check the Run this program in compatability mode for checkbox, and look and see if the dropdown has any Windows XP emulation options. If it does, the application is 32 bit, and you need to get one of the x86 builds. Otherwise, get one of the x64 builds. Make sure to uncheck that checkbox before leaving the menu. Extract the zip into your game installation directory. There should now be a folder named IPA and a file named IPA.exe in the same folder as the game executable. For example, if you are installing BSIPA in Beat Saber, it might look like this after extraction: Run IPA.exe by double clicking it. A console window should pop up, and eventually, a gold message asking you to press a key will appear. Here is an example of a successful installation: Note In some cases, this may fail, something like this: In these cases, try dragging the game executable over IPA.exe . After installing, your game directory should look something like this: Note At this point it is recommended to run the game once before continuing, to ensure that things are installed correctly. The first run should create a UserData folder with Beat Saber IPA.json and Disabled Mods.json , as well as a Logs folder with several subfolders with their own files. If these are created, then the installation was very likely successful. Tip If you are not installing BSIPA on Beat Saber, you probably want to go to the config at UserData/Beat Saber IPA.json and set both of the following to false : { ... \"Updates\": { \"AutoUpdate\": false, \"AutoCheckUpdates\": false }, ... } Tip Depending on the game, you may have to set the config member GameAssemblies to the names of the assemblies that the game uses for BSIPA to virtualize them properly. For Beat Saber distrobutions, this will be set according to the version that it was built for by default. Otherwise, it will contain just Assembly-CSharp.dll since most games use that default. From here, just place all of your plugins in the Plugins folder, and you're all set! Many plugins will come in a zip such that the root of the zip represents the game install directory, so all you may have to do is extract the plugin into the game installation folder. Note For Linux users By default, WINE loads DLLs differently to Windows, causing issues with the injection. To make BSIPA's injection work with Wine, winhttp has to have a DLL override set to native,builtin . This is best achieved by putting WINEDLLOVERRIDES=\"winhttp=native,builtin\" %command% in Beat Saber's launch options in Steam. Alternatively, this can be set either through Protontricks, or using the following .reg file: REGEDIT4 [HKEY_CURRENT_USER\\Software\\Wine\\DllOverrides] \"winhttp\"=\"native,builtin\" For Steam, each game's Wine prefix is located under compatdata ; in Beat Saber's case SteamLibrary/steamapps/compatdata/620980/pfx/user.reg . Changes to this file might be ovewritten when the game or Proton are updated however, so the launch options method is recommended. Thats really all you have to do! The installation should persist across game updates for as long as winhttp.dll is present in the game directory, though your plugins will be moved to a different folder when it does update so things don't break horribly. Uninstalling Uninstalling is fairly simple, and can be done one of two ways: Drag the game executable over IPA.exe while holding Alt . Open a command prompt or Powershell terminal and run .\\IPA.exe -rn . (see The Command Line for what those options mean)"
  },
  "index.html": {
    "href": "index.html",
    "title": "BSIPA - Home",
    "keywords": "BSIPA - The Unity mod injector for the new age (pending confirmation). Assuming, that is, that Unity 2017 is \"new age\". How To Install See Installing How To Uninstall See Uninstalling Arguments See The Command Line . How To Develop See Developing for more information. How To Keep The Game Patched BSIPA will automatically repatch the game when it updates, as long as winhttp.dll is present in the install directory."
  },
  "other_api/config/schema.html": {
    "href": "other_api/config/schema.html",
    "title": "Configuration File Schema",
    "keywords": "Configuration File Schema { \"definitions\": { \"AntiMalware_\": { \"type\": \"object\", \"properties\": { \"UseIfAvailable\": { \"type\": \"boolean\" }, \"RunPartialThreatCode\": { \"type\": \"boolean\" } }, \"required\": [ \"UseIfAvailable\", \"RunPartialThreatCode\" ] }, \"Debug_\": { \"type\": \"object\", \"properties\": { \"ShowCallSource\": { \"type\": \"boolean\" }, \"ShowDebug\": { \"type\": \"boolean\" }, \"CondenseModLogs\": { \"type\": \"boolean\" }, \"CreateModLogs\": { \"type\": \"boolean\" }, \"ShowHandledErrorStackTraces\": { \"type\": \"boolean\" }, \"HideMessagesForPerformance\": { \"type\": \"boolean\" }, \"HideLogThreshold\": { \"type\": \"integer\" }, \"ShowTrace\": { \"type\": \"boolean\" }, \"SyncLogging\": { \"type\": \"boolean\" }, \"DarkenMessages\": { \"type\": \"boolean\" } }, \"required\": [ \"ShowCallSource\", \"ShowDebug\", \"CondenseModLogs\", \"CreateModLogs\", \"ShowHandledErrorStackTraces\", \"HideMessagesForPerformance\", \"HideLogThreshold\", \"ShowTrace\", \"SyncLogging\", \"DarkenMessages\" ] } }, \"type\": \"object\", \"properties\": { \"Regenerate\": { \"type\": \"boolean\" }, \"Debug\": { \"$ref\": \"#/definitions/Debug_\" }, \"AntiMalware\": { \"$ref\": \"#/definitions/AntiMalware_\" }, \"YeetMods\": { \"type\": \"boolean\" }, \"ResetGameAssebliesOnVersionChange\": { \"type\": \"boolean\" }, \"GameAssemblies\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } }, \"LastGameVersion\": { \"type\": \"string\" } }, \"required\": [ \"Regenerate\", \"Debug\", \"AntiMalware\", \"YeetMods\", \"ResetGameAssebliesOnVersionChange\", \"GameAssemblies\" ] }"
  },
  "other_api/index.html": {
    "href": "other_api/index.html",
    "title": "",
    "keywords": ""
  }
}